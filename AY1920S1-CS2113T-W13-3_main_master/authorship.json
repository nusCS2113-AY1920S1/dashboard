[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.4\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.jvm.convert\u0027 version \u00272.3.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "mainClassName \u003d \u0027sgtravel.Launcher\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d ["
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027javafx.controls\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            , \u0027javafx.base\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            , \u0027javafx.graphics\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            , \u0027javafx.fxml\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            , \u0027javafx.web\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        })"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.15-alpha\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.5.0\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    implementation group: \u0027com.google.code.gson\u0027, name: \u0027gson\u0027, version: \u00272.8.5\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    implementation group: \u0027org.apache.commons\u0027, name: \u0027commons-lang3\u0027, version: \u00273.9\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.9.9.3\u0027"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.9.9\u0027"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-11+26\u0027"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    archiveBaseName \u003d \"SGTravel\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    archiveVersion \u003d \"1.4\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            test.include \u0027sgtravel/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027coveralls\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "run {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 4,
      "-": 153,
      "Jefferson111": 35
    }
  },
  {
    "path": "src/main/java/sgtravel/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Launches the SGTravel Application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Main.main(args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/java/sgtravel/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * An app called SGTravel."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Starts SGTravel GUI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param stage the stage for GUI."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.INFO, \"SGTravel starting up...\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            MainWindow mainWindow \u003d new MainWindow(stage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.initialise(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stops the GUI."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception The exception thrown."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super.stop();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        launch();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 2,
      "-": 36,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines messages used by SGTravel."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Command Messages."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Include any specific error messages pertaining to the command."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Format is COMMAND_DESCRIPTION"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String LOCATIONSEARCH_STARTER \u003d \"These are the coordinates of your search:\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String LOCATIONSEARCH_API_EXCEPTION"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \u003d \"Sorry, but the search has timed out due to connection issues.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String BUS_ROUTE_STARTER \u003d \"Here is the bus route:\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String BUS_ROUTE_NOT_FOUND \u003d \"I\u0027m sorry, but nothing was found...\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ROUTE_NODE_ADD_SUCCESS \u003d \"Got it. I\u0027ve added this route:\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ROUTE_NODE_DELETE_SUCCESS \u003d \"Got it. I\u0027ve deleted this Route Node:\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ROUTE_NODE_EDIT_SUCCESS \u003d \"Edited the Route!\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ROUTE_NODE_NEIGHBOURS_SUCCESS \u003d \"Here are some Nodes that are close to this:\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ROUTE_DELETE_SUCCESS \u003d \"Got it. I\u0027ve deleted this Route:\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String STATIC_MAP_SUCCESS \u003d \"Showing map of :\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String STATIC_MAP_FAILURE \u003d \"I\u0027m sorry, but nothing was found...\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Error messages."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Format is ERROR_TYPE_DESCRIPTION"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_CONSTRAINT_UNKNOWN \u003d \"I\u0027m sorry, but I don\u0027t know what constraint this is :-(\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_DESCRIPTION_EMPTY \u003d \"The description cannot be empty. :-(\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_FIELD_UNKNOWN \u003d \"I\u0027m sorry, but I don\u0027t know what you want to edit :-(\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_FIELDS_EMPTY \u003d \"I\u0027m sorry, but one of the fields for this command is empty :-(\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_INPUT_INVALID_FORMAT \u003d \"Invalid format. :-(\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_INDEX_OUT_OF_BOUNDS \u003d \"Index requested is out of bounds! :-(\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_DATA_CORRUPTED \u003d \"Data cannot be converted! :-( \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_FILE_NOT_FOUND \u003d \"\\nFile not found! \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_FILE_NOT_SAVED \u003d \"File not saved! :-(\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_RESOURCE_NOT_FOUND \u003d \"Resource not found! :-( Missing: \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_OBJECT_NOT_CREATED \u003d \"Item could not be created! :-(\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_TASK_DUPLICATED \u003d \"Task already exists! :-(\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_ROUTE_DUPLICATE \u003d \"Route already exists! :-(\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_ROUTE_NOT_FOUND \u003d \"Route not found! :-(\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_ROUTE_NODE_DUPLICATE \u003d \"Node already exists! :-(\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_ROUTE_GENERATE_FAIL \u003d \"The Route failed to generate, try other locations :-(\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_CATEGORY_NOT_FOUND \u003d \"Category does not exists! :-(\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_API_FAIL \u003d \"I\u0027m sorry, but nothing could be found. :-(\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_VENUE_EMPTY \u003d \"There are no Venues. VenueList is empty.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_EVENT_NOT_SELECTED \u003d \"There are no events selected.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_RESULT_NOT_FOUND \u003d \"I\u0027m sorry, but nothing could be found for your input. :-(\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_BUS_SERVICE_NOT_FOUND \u003d \"I\u0027m sorry, there is no such bus service.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_BUS_STOP_NOT_FOUND \u003d \"I\u0027m sorry, the bus stop does not exist! :-(\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_BUS_STOP_NOT_FOUND_STARTER \u003d \"I\u0027m sorry, the bus stop \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_BUS_STOP_NOT_FOUND_END \u003d \" does not exist! :-(\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_TRAIN_STATION_NOT_FOUND_STARTER \u003d \"I\u0027m sorry, the train station \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_TRAIN_STATION_NOT_FOUND_END \u003d \" does not exist! :-(\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_DATE_INCONSISTENT \u003d \"Im sorry, there is some discrepancy between your dates\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_DATE_BEFORE_NOW \u003d \"Im sorry, your dates must be in the future\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static final String ERROR_DATE_AFTER_NOW \u003d \"Im sorry, your dates must be in the past\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static final String ERROR_ADDLIST_NAME_EMPTY \u003d \"I\u0027m sorry, you need to add an itinerary name\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_ITINERARY_EMPTY_TODOLIST \u003d \"I\u0027m sorry, but entering todos for a day is compulsory\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_ITINERARY_FAIL_CREATION \u003d \"I\u0027m sorry, but you have not entered your \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"itinerary properly\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_ITINERARY_INCORRECT_COMMAND \u003d \"I\u0027m sorry, but your itinerary command \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"syntax is wrong.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static final String ERROR_ITINERARY_INCORRECT_DAYS \u003d \"I\u0027m sorry, but your entered the wrong number of days\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static final String ERROR_ITINERARY_REPEATED_DAYS \u003d \"I\u0027m sorry, but your entered repeated day numbers\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_ITINERARY_NOT_FOUND \u003d \"I\u0027m sorry, but that itinerary list does not exist \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_ITINERARY_NO_RECENT \u003d \"I\u0027m sorry, there are no recent itinerary to add.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_RECOMMENDATION_FAIL \u003d \"I\u0027m sorry, the days of the trip is too long.\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            + \"I can only give a good recommendation within 8 days\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_HELP_FAIL \u003d \"I\u0027m sorry, unable to open user guide.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Messages sent via Prompt by Duke."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Format is PROMPT_TYPE_DESCRIPTION"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ERROR \u003d \"Sorry, but something went wrong...\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_NOT_INT \u003d \"Please use a number!\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_NOT_DOUBLE \u003d \"Please use a number!\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_NOT_DATE \u003d \"Please use a proper date!\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_NOT_ROUTE_FIELD \u003d \"Please choose either name or description!\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_NOT_ROUTENODE_FIELD \u003d \"Please use a proper field!\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_SEARCH_STARTER \u003d \"Where would you like to find?\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_SEARCH_SUCCESS \u003d \"These are the coordinates of your search:\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FIND_STARTER \u003d \"What task would you like to find?\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_DELETE_STARTER \u003d \"What would you like to delete?\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_GETBUSSTOP_STARTER \u003d \"Which bus stop do you want to find?\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_MARKDONE_STARTER \u003d \"Which task have you completed?\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static final String PROMPT_SETUP_PROFILE \u003d \"Welcome to SGTravel.\\n Please enter your name.\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static final String PROMPT_BIRTHDAY \u003d \"Enter your birthday.\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_ADD_STARTER \u003d \"Please enter the name of the route!\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_ADD_DESCRIPTION \u003d \"Please enter the description of the route!\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_ADD_SUCCESS \u003d \"Route generated successfully: \";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_DELETE_STARTER \u003d \"Which route will you like to delete?\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_DELETE_SUCCESS \u003d \"Route deleted successfully!\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_EDIT_STARTER \u003d \"Which route will you like to edit?\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_EDIT_FIELD \u003d \"What is the field that you want to edit?\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_EDIT_SUCCESS \u003d \"Route edited successfully!\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_GENERATE_STARTER \u003d \"Where do you want to start from?\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_GENERATE_ENDLOCATION \u003d \"Where is your destination?\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_GENERATE_CONSTRAINT \u003d \"How do you want to travel by?\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_GENERATE_SUCCESS \u003d \"Route generated successfully!\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_ADD_STARTER \u003d \"Which route do you want to add the node to?\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_ADD_NODEINDEX \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \"What is the index of the node? (Enter 0 to add to the end of the route)\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_ADD_TYPE \u003d \"Is it a bus stop or a train station?\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_ADD_INPUT \u003d \"What is the bus stop number or train station name?\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_ADD_SUCCESS \u003d \"Route node added successfully!\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_DELETE_STARTER \u003d \"Which route does the node belong to?\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_DELETE_NODEINDEX \u003d \"What is the index of the node?\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_DELETE_SUCCESS \u003d \"Route node deleted successfully!\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_SHOW_STARTER \u003d \"Which route does the node belong to?\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_SHOW_NODEINDEX \u003d \"What is the index of the node?\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_SHOW_SUCCESS \u003d \"Here is the route node\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_LIST_STARTER \u003d \"Which route would you like to see?\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_SELECTOR_DISPLAY \u003d \"Showing node:\\n\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_CANCEL \u003d \"Current conversation has ended.\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String STARTUP_WELCOME_MESSAGE \u003d \"Welcome to SGTravel!\\n\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String STARTUP_WELCOME_MESSAGE_ITINERARY_START \u003d \"You currently have \";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String STARTUP_WELCOME_MESSAGE_ITINERARY_END \u003d \" itineraries.\\n\\n\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String STARTUP_WELCOME_MESSAGE_ROUTE_START \u003d \"You also have \";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String STARTUP_WELCOME_MESSAGE_ROUTE_END \u003d \" Routes currently stored.\\n\\n\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String STARTUP_WELCOME_MESSAGE_HELP \u003d \"If you need any help, please type in \\\"help\\\"!\\n\""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"Have a good day planning your trip!\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 6,
      "Inno97": 80,
      "hongchuan97": 3,
      "Jefferson111": 37
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/enumerations/Constraint.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.enumerations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Enumerates the different findPath constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public enum Constraint {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    MRT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    BUS,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    CUSTOM"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 7,
      "Inno97": 2,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/enumerations/Direction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.enumerations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Enumerates the direction of bus travel."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public enum Direction {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    FORWARD,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    BACKWARD"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 1,
      "hongchuan97": 7,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/enumerations/TimePatternType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.enumerations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Enumerates specificity of time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public enum TimePatternType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    DAY_OF_WEEK,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    DATE_TIME,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    DATE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    TIME"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/AddListFailException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Exception thrown when user does not specify new name while adding a recommendation."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class AddListFailException extends ParseException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public AddListFailException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        super(Messages.ERROR_ADDLIST_NAME_EMPTY);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 12
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/ApiException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when the API call fails."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ApiException extends ParseException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ApiException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_API_FAIL);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 9,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/ChronologyAfterPresentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when a given time is in the future when it should not."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ChronologyAfterPresentException extends ParseException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ChronologyAfterPresentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        super(Messages.ERROR_DATE_AFTER_NOW);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 7,
      "hongchuan97": 7,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/ChronologyBeforePresentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Exception thrown when Dates entered are before present."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ChronologyBeforePresentException extends ParseException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ChronologyBeforePresentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.ERROR_DATE_BEFORE_NOW);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 6,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/ChronologyInconsistentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Exception thrown when startDate \u003e endDate or endDate \u003c startDate."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ChronologyInconsistentException extends ParseException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ChronologyInconsistentException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.ERROR_DATE_INCONSISTENT);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 6,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when an operation fails in SGTravel."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message The message to display."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Inno97": 7,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/DuplicateRouteException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when duplicate route is found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DuplicateRouteException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DuplicateRouteException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_ROUTE_DUPLICATE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 12,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/DuplicateRouteNodeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when duplicate route is found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DuplicateRouteNodeException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DuplicateRouteNodeException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_ROUTE_NODE_DUPLICATE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 12,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/DuplicateTaskException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when a duplicate task is detected."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DuplicateTaskException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_TASK_DUPLICATED);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 2,
      "Inno97": 6,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/EmptyVenueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when there are no venues."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EmptyVenueException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EmptyVenueException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.ERROR_VENUE_EMPTY);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 5,
      "Jefferson111": 11
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/EventNotSelectedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when event is not selected."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EventNotSelectedException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventNotSelectedException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.ERROR_EVENT_NOT_SELECTED);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 5,
      "Jefferson111": 11
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/FileLoadFailException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when file cannot be loaded."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class FileLoadFailException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param filePath The relative path of the file being loaded."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FileLoadFailException(String filePath) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(filePath + Messages.ERROR_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 13,
      "Jefferson111": 5
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/FileNotSavedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when file is not saved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class FileNotSavedException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public FileNotSavedException(String fileName) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_FILE_NOT_SAVED + \"(\" + fileName + \")\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 14,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/HelpFailException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when the UserGuide cannot be opened in a browser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class HelpFailException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public HelpFailException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.ERROR_HELP_FAIL);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 7,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/ItineraryIncorrectDaysException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when the user enters the incorrect number of agendas in the newItinerary command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class ItineraryIncorrectDaysException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public ItineraryIncorrectDaysException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        super(Messages.ERROR_ITINERARY_INCORRECT_DAYS);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 12
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/NoRecentItineraryException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when no recent recommendations are found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class NoRecentItineraryException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public NoRecentItineraryException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.ERROR_ITINERARY_NO_RECENT);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 6,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/NoSuchBusServiceException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when no such bus service can be found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class NoSuchBusServiceException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public NoSuchBusServiceException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.ERROR_BUS_SERVICE_NOT_FOUND);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 7,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/NoSuchBusStopException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when no such bus stop can be found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class NoSuchBusStopException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public NoSuchBusStopException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.ERROR_BUS_STOP_NOT_FOUND);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 7,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/NoSuchCategoryException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when no such category can be found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class NoSuchCategoryException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public NoSuchCategoryException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        super(Messages.ERROR_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 7,
      "hongchuan97": 5,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/NoSuchItineraryException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error a specified itinerary is not found within the itineraryTable."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class NoSuchItineraryException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public NoSuchItineraryException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.ERROR_ITINERARY_NOT_FOUND);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 6,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/NoSuchRouteException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when no such Route can be found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class NoSuchRouteException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public NoSuchRouteException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_ROUTE_NOT_FOUND);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 2,
      "Inno97": 10,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/NullResultException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when no result can be found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class NullResultException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public NullResultException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.ERROR_RESULT_NOT_FOUND);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 13,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/OutOfBoundsException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when index query is out of bounds."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class OutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public OutOfBoundsException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 12,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when parsing fails."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ParseException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message The message to display."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(message + \"\\nRefer to help for format of instructions.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 8,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/QueryFailedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when the query fails."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class QueryFailedException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String queriedItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param queriedItem The item that was queried."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public QueryFailedException(String queriedItem) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_RESOURCE_NOT_FOUND);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.queriedItem \u003d queriedItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the name of the queried item."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return queriedItem The name of the queried item."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getQueriedItem() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return queriedItem;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 27,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/RecommendationFailException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when the trip is too long (greater than 8 days)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class RecommendationFailException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public RecommendationFailException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.ERROR_RECOMMENDATION_FAIL);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 6,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/RepeatedDayNumberException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when the user enters 2 of the same day numbers in the newItinerary command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class RepeatedDayNumberException extends ParseException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public RepeatedDayNumberException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        super(Messages.ERROR_ITINERARY_REPEATED_DAYS);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 12
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/RouteGenerateFailException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when a route cannot be generated."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteGenerateFailException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteGenerateFailException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_ROUTE_GENERATE_FAIL);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 14,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/UnknownConstraintException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when file is not saved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class UnknownConstraintException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public UnknownConstraintException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_CONSTRAINT_UNKNOWN);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 14,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/sgtravel/commons/exceptions/UnknownFieldException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when an invalid field is queried."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class UnknownFieldException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public UnknownFieldException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_FIELD_UNKNOWN);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 14,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Defines the api of main logic."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets response from LogicManager."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The input string from user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return CommandResult Object containing information for Ui to display."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    CommandResult execute(String userInput) throws DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 2,
      "Inno97": 1,
      "Jefferson111": 15
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ChronologyAfterPresentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ChronologyBeforePresentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ChronologyInconsistentException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.PanelResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.ConversationManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.edits.EditorManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * The main logic of the application."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private ConversationManager conversationManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a LogicManager instance."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public LogicManager() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets response from LogicManager."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The input string from user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return CommandResult Object containing information for Ui to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (EditorManager.isActive()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            logger.log(Level.INFO, \"editing...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            c \u003d EditorManager.edit(userInput);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else  {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                c \u003d Parser.parseComplexCommand(userInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                conversationManager.clearContext();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            } catch (ChronologyAfterPresentException | ChronologyBeforePresentException"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    | ChronologyInconsistentException | ApiException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                throw e;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                c \u003d getCommandFromConversationManager(userInput);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return (CommandResult) c.execute(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets response from LogicManager."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param keyCode The KeyCode for the EditorManager."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public PanelResult execute(KeyCode keyCode) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (EditorManager.isActive()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return EditorManager.edit(keyCode);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new PanelResult();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets a command from ConversationManager."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param userInput The user input."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Command getCommandFromConversationManager(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(userInput);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return conversationManager.getCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return model.getName();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 10,
      "hongchuan97": 7,
      "Jefferson111": 77
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/PathFinder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.enumerations.Direction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.exceptions.RouteGenerateFailException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.api.ApiConstraintParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.CustomNode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.RouteNode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.TrainStation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.BusService;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.TransportationMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines an algorithm to find a path between 2 Venues."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class PathFinder {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private TransportationMap map;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashSet\u003cBusStop\u003e visited;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashMap\u003cString, String\u003e path;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private boolean found \u003d false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Initialise Pathfinder object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public PathFinder(TransportationMap map) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.map \u003d map;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.visited \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.path \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Find path between start and end."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param start starting location."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param end ending location."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return path."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ArrayList\u003cVenue\u003e execute(Venue start, Venue end, Constraint constraint) throws RouteGenerateFailException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        found \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        switch (constraint) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case BUS:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return findBusRoute(start, end);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case MRT:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return findTrainRoute(start, end);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new RouteGenerateFailException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cVenue\u003e findTrainRoute(Venue start, Venue end) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.found \u003d false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        TrainStation startTrainStation \u003d ApiConstraintParser.getNearestTrainStation(start, this.map.getTrainMap());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        TrainStation endTrainStation \u003d ApiConstraintParser.getNearestTrainStation(end, this.map.getTrainMap());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cVenue\u003e path \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (isSameLocation(startTrainStation, endTrainStation)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            path.add(start);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            path.add(end);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return path;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (!isSameLocation(start, startTrainStation)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            path.add(start);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        path.add(startTrainStation);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (!onSameLine(startTrainStation, endTrainStation)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ArrayList\u003cTrainStation\u003e curTrainLine;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (String line : startTrainStation.getTrainCodes()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                curTrainLine \u003d this.map.getTrainLine(line.substring(0,2));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                assert curTrainLine !\u003d null : \"Train Code does not exist\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                for (TrainStation trainStation : curTrainLine) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    if (onSameLine(trainStation, endTrainStation)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        path.add(trainStation);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        found \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (found) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            found \u003d true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        path.add(endTrainStation);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (!isSameLocation(end, endTrainStation)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            path.add(end);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (found) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return path;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private boolean isSameLocation(Venue start, Venue end) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return start.equals(end);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private boolean onSameLine(TrainStation cur, TrainStation endTrainStation) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (String code : cur.getTrainCodes()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (String code2 : endTrainStation.getTrainCodes()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (code2.contains(code.substring(0,2))) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cVenue\u003e findBusRoute(Venue start, Venue end) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.found \u003d false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop startBusStop \u003d ApiConstraintParser.getNearestBusStop(start, this.map.getBusStopMap());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop endBusStop \u003d ApiConstraintParser.getNearestBusStop(end, this.map.getBusStopMap());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cVenue\u003e ans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (isSameLocation(startBusStop, endBusStop)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans.add(start);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans.add(end);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return ans;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop cur \u003d startBusStop;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        int depthLimit \u003d 0;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        while (!found \u0026\u0026 depthLimit \u003c 3) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.visited.clear();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.path.clear();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            depthFirstSearch(cur, endBusStop, depthLimit);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            depthLimit +\u003d 1;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (!this.found) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            cur \u003d endBusStop;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (!isSameLocation(end, endBusStop)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                ans.add(end);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            while (!cur.getBusCode().equals(startBusStop.getBusCode())) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                ans.add(cur);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                cur \u003d this.map.getBusStopMap().get(path.get(cur.getBusCode()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans.add(cur);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (!isSameLocation(start, startBusStop)) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                ans.add(start);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return ans;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void depthFirstSearch(BusStop cur, BusStop endBusStop, int depthLimit) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (depthLimit \u003d\u003d 0 || this.visited.contains(cur)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.visited.add(cur);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (String bus : cur.getBuses()) { //loop through all bus in bus stop"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            Direction direction;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (this.map.getBusMap().get(bus).getDirection(Direction.FORWARD).contains(cur.getBusCode())) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                direction \u003d Direction.FORWARD;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                direction \u003d Direction.BACKWARD;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            for (String busCode : this.map.getBusMap().get(bus).getDirection(direction)) { // depth search the bus route"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (this.found) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (busCode.equals(cur.getBusCode())) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                path.put(busCode, cur.getBusCode());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (haveSameBus(this.map.getBusStopMap().get(busCode), endBusStop)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    path.put(endBusStop.getBusCode(), busCode);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    this.found \u003d true;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    depthFirstSearch(this.map.getBusStopMap().get(busCode), endBusStop, depthLimit - 1);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns if two BusStops have a common Bus Service."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param firstBusStop The first BusStop object."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param secondBusStop The second BusStop object."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If the two BusStops have a common Bus Service."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private boolean haveSameBus(BusStop firstBusStop, BusStop secondBusStop) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (String bus : firstBusStop.getBuses()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (secondBusStop.getBuses().contains(bus)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates a custom RouteNode from a venue."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param venue The venue."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The custom RouteNode created."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static RouteNode generateCustomRouteNode(Venue venue) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CustomNode(venue.getAddress(), \"\", venue.getLatitude(), venue.getLongitude());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates an ArrayList of Venues between 2 Venues."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startVenue The starting Venue."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endVenue The ending Venue."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The ArrayList of Venues."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryFailedException If a TrainStation cannot be queried."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static ArrayList\u003cVenue\u003e generateInbetweenNodes(Venue startVenue, Venue endVenue, Model model)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throws QueryFailedException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (startVenue instanceof BusStop \u0026\u0026 endVenue instanceof BusStop) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d generateInbetweenBusRoutes(startVenue, endVenue, model);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else if (startVenue instanceof TrainStation \u0026\u0026 endVenue instanceof TrainStation) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d generateInbetweenTrainRoutes((TrainStation) startVenue, (TrainStation) endVenue, model);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates an ArrayList of BusStops between 2 Bus Stops."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startVenue The starting Venue."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endVenue The ending Venue."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The ArrayList of BusStops."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static ArrayList\u003cVenue\u003e generateInbetweenBusRoutes(Venue startVenue, Venue endVenue, Model model)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throws QueryFailedException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isGenerated \u003d false;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        TransportationMap map \u003d model.getMap();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        HashMap\u003cString, BusService\u003e busMap \u003d map.getBusMap();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Set\u003cString\u003e busServices \u003d ((BusStop) startVenue).getBuses();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (String busNumber: busServices) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (!isGenerated) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                BusService bus \u003d busMap.get(busNumber);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                ArrayList\u003cString\u003e busCodes \u003d bus.getDirection(Direction.FORWARD);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result \u003d"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        searchForwardDirectionBus((BusStop) startVenue, (BusStop) endVenue, busNumber, busCodes, model);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (result !\u003d null) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    isGenerated \u003d true;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    Collections.reverse(busCodes);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    result \u003d"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        searchReverseDirectionBus((BusStop) startVenue, (BusStop) endVenue, busNumber, busCodes, model);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    if (result !\u003d null) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        isGenerated \u003d true;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Searches the forward direction of a given BusCode ArrayList to find the start and end venue."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startVenue The start Venue."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endVenue The end Venue."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busNumber The bus service number."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busCodes The ArrayList of bus stop codes."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The ArrayList of BusStops."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryFailedException If the bus stop cannot be found."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static ArrayList\u003cVenue\u003e searchForwardDirectionBus(BusStop startVenue, BusStop endVenue,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                              String busNumber, ArrayList\u003cString\u003e busCodes, Model model) throws QueryFailedException {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isStartNodeFound \u003d false;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isGenerated \u003d false;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String startNodeBusCode \u003d startVenue.getBusCode();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String endNodeBusCode \u003d endVenue.getBusCode();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (String busCode : busCodes) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (endNodeBusCode.equals(busCode) \u0026\u0026 !isStartNodeFound) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (endNodeBusCode.equals(busCode) \u0026\u0026 isStartNodeFound) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                isGenerated \u003d true;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isStartNodeFound) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                BusStop node \u003d new BusStop(busCode, \"\", \"\", 0, 0);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add(node);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (startNodeBusCode.equals(busCode)) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                BusStop node \u003d new BusStop(busCode, \"\", \"\", 0, 0);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                node.fetchData(model);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add(new CustomNode(\"Bus Service \" + busNumber, \"\", node.getLatitude(),"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        node.getLongitude()));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                isStartNodeFound \u003d true;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isGenerated) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Searches the reverse direction of a given BusCode ArrayList to find the start and end venue."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startVenue The start Venue."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endVenue The end Venue."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busNumber The bus service number."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busCodes The ArrayList of bus stop codes."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The ArrayList of BusStops."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryFailedException If the bus stop cannot be found."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static ArrayList\u003cVenue\u003e searchReverseDirectionBus(BusStop startVenue, BusStop endVenue,"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                              String busNumber, ArrayList\u003cString\u003e busCodes, Model model) throws QueryFailedException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isStartNodeFound \u003d false;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isGenerated \u003d false;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String startNodeBusCode \u003d startVenue.getBusCode();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String endNodeBusCode \u003d endVenue.getBusCode();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (String busCode : busCodes) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (endNodeBusCode.equals(busCode) \u0026\u0026 isStartNodeFound) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                isGenerated \u003d true;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isStartNodeFound) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                BusStop node \u003d new BusStop(busCode, \"\", \"\", 0, 0);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add(node);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (startNodeBusCode.equals(busCode)) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                BusStop node \u003d new BusStop(busCode, \"\", \"\", 0, 0);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                node.fetchData(model);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add(new CustomNode(\"Bus Service \" + busNumber, \"\", node.getLatitude(),"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        node.getLongitude()));"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                isStartNodeFound \u003d true;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isGenerated) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates an ArrayList of TrainStations between 2 Bus Stops."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startVenue The starting Venue."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endVenue The ending Venue."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The ArrayList of TrainStations."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static ArrayList\u003cVenue\u003e generateInbetweenTrainRoutes(TrainStation startVenue, TrainStation endVenue,"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                                                                 Model model) throws QueryFailedException {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isGenerated \u003d false;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        TransportationMap map \u003d model.getMap();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String startNodeDescription \u003d startVenue.getDescription();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        TrainStation start \u003d map.getTrainStation(startNodeDescription);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cString\u003e trainCodes \u003d start.getTrainCodes();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (String trainCode: trainCodes) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (!isGenerated) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                String lineCode \u003d trainCode.substring(0, 2);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                ArrayList\u003cTrainStation\u003e trainLine \u003d map.getTrainLine(lineCode);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result \u003d searchForwardDirectionTrain(startVenue, endVenue, trainCode, trainLine);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (result !\u003d null) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    isGenerated \u003d true;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    Collections.reverse(trainLine);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    result \u003d searchReverseDirectionTrain(startVenue, endVenue, trainCode, trainLine);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    if (result !\u003d null) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        isGenerated \u003d true;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Searches the forward direction of a train line to find the start and end venue."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startVenue The start venue."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endVenue The end venue."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainCode The train code."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainLine The train line"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The ArrayList of train stations."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static ArrayList\u003cVenue\u003e searchForwardDirectionTrain(TrainStation startVenue, TrainStation endVenue,"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                               String trainCode, ArrayList\u003cTrainStation\u003e trainLine) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isStartNodeFound \u003d false;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isGenerated \u003d false;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String startNodeDescription \u003d startVenue.getDescription();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String endNodeDescription \u003d endVenue.getDescription();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (TrainStation trainStation : trainLine) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String newNodeDescription \u003d trainStation.getDescription();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (endNodeDescription.equals(newNodeDescription) \u0026\u0026 !isStartNodeFound) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (endNodeDescription.equals(newNodeDescription) \u0026\u0026 isStartNodeFound) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                isGenerated \u003d true;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isStartNodeFound) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add(trainStation);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (startNodeDescription.equals(newNodeDescription)) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add(new CustomNode(trainCode + \" Line\", \"\", trainStation.getLatitude(),"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        trainStation.getLongitude()));"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                isStartNodeFound \u003d true;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isGenerated) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Searches the reverse direction of a train line to find the start and end venue."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startVenue The start venue."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endVenue The end venue."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainCode The train code."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainLine The train line"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The ArrayList of train stations."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static ArrayList\u003cVenue\u003e searchReverseDirectionTrain(TrainStation startVenue, TrainStation endVenue,"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                                                                String trainCode, ArrayList\u003cTrainStation\u003e trainLine) {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isStartNodeFound \u003d false;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isGenerated \u003d false;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String startNodeDescription \u003d startVenue.getDescription();"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String endNodeDescription \u003d endVenue.getDescription();"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (TrainStation trainStation : trainLine) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String newNodeDescription \u003d trainStation.getDescription();"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (endNodeDescription.equals(newNodeDescription) \u0026\u0026 isStartNodeFound) {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                isGenerated \u003d true;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isStartNodeFound) {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add(trainStation);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (startNodeDescription.equals(newNodeDescription)) {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add(new CustomNode(trainCode + \" Line\", \"\", trainStation.getLatitude(),"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        trainStation.getLongitude()));"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                isStartNodeFound \u003d true;"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isGenerated) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 321,
      "hongchuan97": 178,
      "Jefferson111": 16
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/api/ApiConstraintParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.api;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.TransportationMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.TrainStation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles all API constraint parsing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class ApiConstraintParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Get nearest Bus Stop to location."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param place Starting location."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busStopMap Map of all Bus Stop."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The nearest Bus Stop."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static BusStop getNearestBusStop(Venue place, HashMap\u003cString, BusStop\u003e busStopMap) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double minimumDisplacement \u003d 1000;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop nearestBusStop \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (Map.Entry mapElement : busStopMap.entrySet()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BusStop cur \u003d (BusStop) mapElement.getValue();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            double displacement \u003d getDisplacement(place, cur);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (displacement \u003c minimumDisplacement) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                minimumDisplacement \u003d displacement;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                nearestBusStop \u003d cur;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return nearestBusStop;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the displacement between 2 Venues."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param start The start Venue."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param end The end Venue."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return displacement The displacement between both Venues."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static double getDisplacement(Venue start, Venue end) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double displacement \u003d Math.pow(Math.abs(start.getLatitude() - end.getLatitude()), 2)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                + Math.pow(Math.abs(start.getLongitude() - end.getLongitude()), 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        displacement \u003d Math.sqrt(displacement);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return displacement;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Get nearest Train Station to location."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param place Starting location."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainMap Map of all Train Station."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The nearest Train Station."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static TrainStation getNearestTrainStation(Venue place, HashMap\u003cString, TrainStation\u003e trainMap) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double curMinDisplacement \u003d 1000;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        TrainStation nearestTrainStation \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (Map.Entry mapElement : trainMap.entrySet()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            TrainStation cur \u003d (TrainStation)mapElement.getValue();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            double displacement \u003d getDisplacement(place, cur);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (displacement \u003c curMinDisplacement) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                curMinDisplacement \u003d displacement;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                nearestTrainStation \u003d cur;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return nearestTrainStation;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Return the nearest transportation from the starting location."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param start The starting location."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param map All transportation location."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Nearest transportation."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static Venue getNearestTransport(Venue start, TransportationMap map) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        TrainStation nearestTrain \u003d getNearestTrainStation(start, map.getTrainMap());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop nearestBus \u003d getNearestBusStop(start, map.getBusStopMap());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return nearestTransport(start, nearestTrain, nearestBus);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Compares and returns the closer TrainStation or BusStop."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param venue The base Venue."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param nearestTrain The nearest TrainStation."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param nearestBus The nearest BusStop."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The closer TrainStation or BusStop."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static Venue nearestTransport(Venue venue, TrainStation nearestTrain, BusStop nearestBus) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double displacementTrain;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double displacementBus;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        displacementTrain \u003d getDisplacement(venue, nearestTrain);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        displacementBus \u003d getDisplacement(venue, nearestBus);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (displacementTrain \u003c\u003d displacementBus) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return nearestTrain;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return nearestBus;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 8,
      "Inno97": 36,
      "hongchuan97": 59,
      "Jefferson111": 6
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/api/ApiParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.api;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.api.requests.LocationSearchUrlRequest;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.api.requests.StaticMapUrlRequest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.RouteNode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.TrainStation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.model.transports.TransportationMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles all API requests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class ApiParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String DIMENSIONS \u003d \"512\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String ZOOM_LEVEL \u003d \"16\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String RED_VALUE_OTHER \u003d \"255\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String GREEN_VALUE_OTHER \u003d \"122\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String BLUE_VALUE_OTHER \u003d \"0\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String RED_VALUE_QUERY \u003d \"122\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String GREEN_VALUE_QUERY \u003d \"255\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String BLUE_VALUE_QUERY \u003d \"0\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String RED_VALUE_NEIGHBOUR \u003d \"0\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String GREEN_VALUE_NEIGHBOUR \u003d \"0\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String BLUE_VALUE_NEIGHBOUR \u003d \"0\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String LINE_WIDTH \u003d \"2\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final int DISTANCE_THRESHOLD \u003d 3000;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final int NEIGHBOUR_MAX_SIZE \u003d 5;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final int ROUTE_NEIGHBOUR_MAX_SIZE \u003d 6;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final double STATIC_MAP_MAX_DIST \u003d 0.04;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns a Venue from a location search."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param param The query location."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The location found."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiException If there is an issue with the request."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Venue getLocationSearch(String param) throws ApiException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        LocationSearchUrlRequest req \u003d new LocationSearchUrlRequest(param);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return req.execute();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets Static Map from StaticMap API."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param param String formatted parameters."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The image from API."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiException If there is an issue with the request."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Image getStaticMap(String param) throws ApiException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        StaticMapUrlRequest req \u003d new StaticMapUrlRequest(param);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return req.execute();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates Param in String format for StaticMapUrlRequest."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param imageLength The length of StaticImage."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param imageWidth The width of StaticImage."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param zoomLvl The zoom level."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param centerLat The latitude coordinates of center."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param centerLong The longitude coordinates of center."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param polygonRegion The polygon regions to highlight."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param lineCoord The line coordinates to highlight."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param pointCoord The point coordinates to show."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The String param to parse."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String generateStaticMapParams(String imageLength, String imageWidth, String zoomLvl,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                     String centerLat, String centerLong, String polygonRegion, String lineCoord, String pointCoord) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String result \u003d \"layerchosen\u003ddefault\u0026\" + \"lat\u003d\" + centerLat + \"\u0026lng\u003d\" + centerLong + \"\u0026zoom\u003d\" + zoomLvl"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"\u0026height\u003d\" + imageLength + \"\u0026width\u003d\" + imageWidth;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result +\u003d \"\u0026polygons\u003d\" + polygonRegion;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result +\u003d \"\u0026lines\u003d\" + lineCoord;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result +\u003d \"\u0026points\u003d\" + pointCoord + \"\u0026color\u003d\u0026fillColor\u003d\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates parameter in String format for polygonRegion or lineCoord in StaticMap."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param points The ArrayList of points."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param rgb The color of the region or line."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The String param."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String generateStaticMapLines(ArrayList\u003cString\u003e points, String rgb, String lineWidth) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (points.size() \u003e 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d new StringBuilder(\"[\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (String point : points) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.append(\"[\").append(point).append(\"],\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d new StringBuilder(result.substring(0, result.length() - 1) + \"]\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (!rgb.isEmpty()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.append(\":\").append(rgb).append(\":\").append(lineWidth);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.append(\":0,0,0:\").append(lineWidth);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates Point in String format for StaticMap."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param r The R value in RGB."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param g The G value in RGB."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param b The B value in RGB."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param label The text label for the point."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The String result."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String generateStaticMapPoint(String latitude, String longitude,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                                                String r, String g, String b, String label) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return \"[\" + latitude + \",\" + longitude + \",\\\"\" + r + \",\" + g + \",\" + b + \"\\\",\\\"\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    + (Character.toString(label.charAt(0))).toUpperCase() + \"\\\"]\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return \"[\" + latitude + \",\" + longitude + \",\\\"\" + r + \",\" + g + \",\" + b + \"\\\",\\\"\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    + \"\\\"]\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates an image from StaticMap API for RouteNodeShowCommand."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The Route that the RouteNode belongs to."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param node The RouteNode that is queried."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexNode The index of the RouteNode in the Route."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return image The image from StaticMap API."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiException If the API request fails."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static Image generateRouteNodeShow(Route route, RouteNode node, int indexNode)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throws ApiException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String param;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (node instanceof BusStop) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            param \u003d ((BusStop) node).getBusCode();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            param \u003d node.getAddress();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue query \u003d getLocationSearch(param);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cString\u003e points \u003d generateOtherPoints(route, node, indexNode);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String rgb \u003d RED_VALUE_OTHER + \",\" + GREEN_VALUE_OTHER + \",\" + BLUE_VALUE_OTHER;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return getStaticMap(ApiParser.generateStaticMapParams(DIMENSIONS, DIMENSIONS,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                ZOOM_LEVEL, String.valueOf(query.getLatitude()), String.valueOf(query.getLongitude()), \"\","
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                generateLineParam(points, rgb), generatePointParam(route, node, null)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates an image from StaticMap API for RouteNodeNeighboursCommand."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The Route that the RouteNode belongs to."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param node The RouteNode that is queried."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexNode The index of the RouteNode in the Route."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return image The image from StaticMap API."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiException If the API request fails."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws OutOfBoundsException If fetching any node fails."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static Image generateStaticMapNeighbours(Model model, Route route, RouteNode node, int indexNode)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throws ApiException, OutOfBoundsException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cString\u003e points \u003d generateOtherPoints(route, node, indexNode);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String param \u003d getLocationSearchName(node);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue query \u003d ApiParser.getLocationSearch(param);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e nearbyNodes \u003d getNeighbour(model, node);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String rgb \u003d RED_VALUE_OTHER + \",\" + GREEN_VALUE_OTHER + \",\" + BLUE_VALUE_OTHER;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return ApiParser.getStaticMap(ApiParser.generateStaticMapParams(DIMENSIONS, DIMENSIONS, ZOOM_LEVEL,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                String.valueOf(query.getLatitude()), String.valueOf(query.getLongitude()), \"\","
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                generateLineParam(points, rgb), generatePointParam(route, node, nearbyNodes)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns a String in the RouteNode that is searchable by LocationSearchUrlRequest."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param node The RouteNode to query."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The String for LocationSearchUrlRequest."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String getLocationSearchName(RouteNode node) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (node instanceof BusStop) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return ((BusStop) node).getBusCode();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return node.getAddress();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the nearest few BusStops or TrainStations to a given RouteNode."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param node The RouteNode to check."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The neighbours of the RouteNode."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws OutOfBoundsException If fetching any node fails."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static ArrayList\u003cVenue\u003e getNeighbour(Model model, RouteNode node) throws OutOfBoundsException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ArrayList\u003cVenue\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ArrayList\u003cVenue\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            TransportationMap transportationMap \u003d model.getMap();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Map\u003cString, BusStop\u003e busStopMap \u003d transportationMap.getBusStopMap();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (Map.Entry mapElement : busStopMap.entrySet()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                addNearbyBusStop(node, temp, mapElement);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Map\u003cString, TrainStation\u003e trainStationMap \u003d transportationMap.getTrainMap();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (Map.Entry mapElement : trainStationMap.entrySet()) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                addNearbyTrainStation(node, temp, mapElement);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            temp.sort((Venue o1, Venue o2) -\u003e (int) (o1.getDistance(node) - o2.getDistance(node)));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (int i \u003d 0; i \u003c NEIGHBOUR_MAX_SIZE \u0026\u0026 i \u003c temp.size(); i++) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add(temp.get(i));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new OutOfBoundsException();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a BusStop to an ArrayList of Venues if it is close enough."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param node The RouteNode being selected."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param temp The ArrayList of Venues."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param mapElement The map value corresponding to the BusStop being checked."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static void addNearbyBusStop(RouteNode node, ArrayList\u003cVenue\u003e temp, Map.Entry mapElement) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop newNode \u003d ((BusStop) mapElement.getValue());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (newNode.getDistance(node) \u003c DISTANCE_THRESHOLD"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                \u0026\u0026 !newNode.equals(node)) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            temp.add(newNode);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a TrainStation to an ArrayList of Venues if it is close enough."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param node The RouteNode being selected."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param temp The ArrayList of Venues."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param mapElement The map value corresponding to the TrainStation being checked."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static void addNearbyTrainStation(RouteNode node, ArrayList\u003cVenue\u003e temp, Map.Entry mapElement) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        TrainStation newNode \u003d ((TrainStation) mapElement.getValue());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (newNode.getDistance(node) \u003c DISTANCE_THRESHOLD \u0026\u0026 !newNode.equals(node)) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            temp.add(newNode);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates 6 other nodes beside the selected one in the Route as an ArrayList."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The Route object."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param query The original RouteNode being queried."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return points The ArrayList of points."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static ArrayList\u003cString\u003e generateOtherPoints(Route route, RouteNode query, int indexNode) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cString\u003e points \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int startIndex \u003d Math.max(0, indexNode - (ROUTE_NEIGHBOUR_MAX_SIZE / 2));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int endIndex \u003d Math.min(route.size() - 1, startIndex + ROUTE_NEIGHBOUR_MAX_SIZE);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (int i \u003d startIndex; i \u003c\u003d endIndex; i++) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteNode newNode \u003d route.getNode(i);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            points.add(newNode.getLatitude() + \",\" + newNode.getLongitude());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates the line parameters for the StaticMap request."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param points The ArrayList of points."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param rgb The RGB value."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The line parameters."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String generateLineParam(ArrayList\u003cString\u003e points, String rgb)  {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return ApiParser.generateStaticMapLines(points, rgb, LINE_WIDTH);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates the point parameters of a Route."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The Route object."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param query The RouteNode being shown."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The point parameters."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String generatePointParam(Route route, RouteNode query, ArrayList\u003cVenue\u003e extraNodes) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (extraNodes !\u003d null) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            appendExtraNodes(extraNodes, result);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (RouteNode node : route.getNodes()) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            appendNodes(query, result, node);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d new StringBuilder(result.substring(0, result.length() - 1));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Appends RouteNodes in a StringBuilder."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param query The query RouteNode."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param result The String to append to."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param node The RouteNode to compare to."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static void appendNodes(RouteNode query, StringBuilder result, RouteNode node) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (!node.equals(query) \u0026\u0026 isWithinDistance(node, query)) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result.append(ApiParser.generateStaticMapPoint(String.valueOf(node.getLatitude()),"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    String.valueOf(node.getLongitude()), RED_VALUE_OTHER, GREEN_VALUE_OTHER, BLUE_VALUE_OTHER,"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    node.getAddress())).append(\"|\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result.append(ApiParser.generateStaticMapPoint(String.valueOf(node.getLatitude()),"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    String.valueOf(node.getLongitude()), RED_VALUE_QUERY, GREEN_VALUE_QUERY, BLUE_VALUE_QUERY,"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    node.getAddress())).append(\"|\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Appends RouteNodes in a StringBuilder."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param extraNodes The ArrayList of RouteNodes to add."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param result The String to append to."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static void appendExtraNodes(ArrayList\u003cVenue\u003e extraNodes, StringBuilder result) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (Venue node : extraNodes) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result.append(ApiParser.generateStaticMapPoint(String.valueOf(node.getLatitude()),"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    String.valueOf(node.getLongitude()), RED_VALUE_NEIGHBOUR, GREEN_VALUE_NEIGHBOUR,"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    BLUE_VALUE_NEIGHBOUR, String.valueOf(index))).append(\"|\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks if a node is close enough to appear in the StaticMap image of the query."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param query The node being checked."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param node The node in the center of the image."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Whether the node is close enough to be added."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static boolean isWithinDistance(RouteNode query, RouteNode node) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return (Math.abs(node.getLatitude() - query.getLatitude()) \u003c STATIC_MAP_MAX_DIST"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                \u0026\u0026 Math.abs(node.getLongitude() - query.getLongitude()) \u003c STATIC_MAP_MAX_DIST);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 350,
      "hongchuan97": 2,
      "Jefferson111": 14
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/api/requests/LocationSearchRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.api.requests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.storageparsers.PlanningStorageParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Handles search request perform locally."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LocationSearchRequest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String VENUE_FILE_PATH \u003d \"/data/venues.txt\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Searches venue from local database."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param query The query."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Venue search(String query) throws ApiException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.INFO, query);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Scanner s \u003d new Scanner(getClass().getResourceAsStream(VENUE_FILE_PATH));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String queryUppercase \u003d query.toUpperCase();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                Venue v \u003d getNextVenue(s);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (v.getAddress().contains(queryUppercase)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    return v;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                logger.log(Level.WARNING, \"Resource folder has been modified.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        throw new ApiException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the next Venue from the Storage."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param s The Scanner object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The Venue found from the Storage."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ParseException If the Storage fails to load."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Venue getNextVenue(Scanner s) throws ParseException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return PlanningStorageParser.getVenueFromStorage(s.nextLine());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16,
      "Jefferson111": 36
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/api/requests/LocationSearchUrlRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.api.requests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles Search URL requests to OneMap API."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LocationSearchUrlRequest extends UrlRequest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String PARAM_TYPE \u003d \"searchVal\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String OPTIONAL_VARIABLES \u003d \"\u0026returnGeom\u003dY\u0026getAddrDetails\u003dY\u0026pageNum\u003d1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String API_LINK \u003d \"https://developers.onemap.sg/commonapi/search?\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the URL Request."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param param The query."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public LocationSearchUrlRequest(String param) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(param.replace(\" \", \"+\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes the URL request to OneMap API."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The Venue object created from the request result."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiException If there is an issue with the request."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Venue execute() throws ApiException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        LocationSearchRequest localSearch \u003d new LocationSearchRequest();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            response \u003d getLocationSearch();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return localSearch.search(param);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (response !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Venue result \u003d getResult(response);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (result !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return localSearch.search(param);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Parses the String response from the API."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param response The String response from the API."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The Venue corresponding to the response from the API."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Venue getResult(String response) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        JsonParser jp \u003d new JsonParser();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        JsonElement root \u003d jp.parse(response);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        JsonObject results \u003d root.getAsJsonObject();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        JsonArray arr \u003d results.getAsJsonArray(\"results\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String numFoundString \u003d String.valueOf(results.getAsJsonPrimitive(\"found\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int numFound \u003d Integer.parseInt(numFoundString);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (numFound \u003e 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            JsonObject firstResult \u003d arr.get(0).getAsJsonObject();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new Venue(firstResult.get(\"ADDRESS\").getAsString(), firstResult.get(\"LATITUDE\").getAsDouble(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    firstResult.get(\"LONGITUDE\").getAsDouble(), firstResult.get(\"X\").getAsDouble(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    firstResult.get(\"Y\").getAsDouble());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets a response from the OneMap Search API."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return response The response from the OneMap Search API."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws IOException If the API request fails."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String getLocationSearch() throws IOException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        URL url \u003d new URL(API_LINK + PARAM_TYPE + \"\u003d\" + param + OPTIONAL_VARIABLES);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        URLConnection connection \u003d url.openConnection();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        connection.setConnectTimeout(5000);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        connection.setReadTimeout(5000);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BufferedReader in \u003d new BufferedReader(new InputStreamReader(connection.getInputStream()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        response \u003d in.readLine();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return response;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 91,
      "Jefferson111": 12
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/api/requests/StaticMapUrlRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.api.requests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles StaticMap URL requests to OneMap StaticMap API."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class StaticMapUrlRequest extends UrlRequest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String API_LINK \u003d \"https://developers.onemap.sg/commonapi/staticmap/getStaticImage?\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Construct the URL Request."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param param The location query."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public StaticMapUrlRequest(String param) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(param.replace(\" \", \"+\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes the URL request to StaticMap API."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return image The static map image"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiException If there is an issue with the request."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Image execute() throws ApiException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Image image;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            URL url \u003d new URL(API_LINK + param);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            image \u003d new Image(url.toExternalForm(), true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ApiException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return image;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 36,
      "Jefferson111": 5
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/api/requests/UrlRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.api.requests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Abstract class representing individual URL requests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public abstract class UrlRequest\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected String param;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the UrlRequest."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param param The parameter for the request."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public UrlRequest(String param) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.param \u003d param;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes and sends the given URL request."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return response The response from the request."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception ApiException If there is an issue with the request."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public abstract T execute() throws ApiException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 24,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Adds a new event to users EventList."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private final Event event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_ADDITION \u003d \"Got it. I\u0027ve added this event:\\n  \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new AddCommand with the given event."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param event The event to add."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public AddCommand(Event event) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws FileNotSavedException If the data could not be saved."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DuplicateTaskException If there is a duplicated event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws DuplicateTaskException, FileNotSavedException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model.getEvents().add(event);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultText(MESSAGE_ADDITION + event);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 38
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/AddSampleItineraryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.AddListFailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.NoRecentItineraryException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Adds the given recommended list to users itineraries."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class AddSampleItineraryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private String newName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Creates a new AddSampleItinerary with the given newName."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param newName The new name of the itinerary."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public AddSampleItineraryCommand(String newName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.newName \u003d newName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws FileNotSavedException If the data could not be saved."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws NoRecentItineraryException If there is no recent itinerary."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public CommandResultText execute(Model model) throws FileNotSavedException, NoRecentItineraryException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            AddListFailException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Itinerary itinerary \u003d model.getRecentItinerary();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        model.confirmRecentItinerary(newName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        model.setRecentItinerary(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String printString \u003d itinerary.printItinerary();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new CommandResultText(\"Successfully added the recommendation : \" + \"\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                + printString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 34,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public abstract class Command\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return feedback of the operation result for display."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeException If an error occurs during command execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public abstract T execute(Model model) throws DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 1,
      "Jefferson111": 16
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Deletes an Event."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_DELETE \u003d \"Alright! I\u0027ve removed this task:\\n  \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new DeleteCommand with the given index."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws FileNotSavedException If the data could not be saved."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws OutOfBoundsException If the index is out of bounds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws OutOfBoundsException, FileNotSavedException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Event event \u003d model.getEvents().remove(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new CommandResultText(MESSAGE_DELETE + event);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new OutOfBoundsException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 42
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/DoneItineraryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.NoSuchItineraryException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Deletes a requested itinerary."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class DoneItineraryCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Creates a new AddSampleItinerary with the given search name."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param name The name of the itinerary to be deleted."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public DoneItineraryCommand(String name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws NoSuchItineraryException If the itinerary cannot be found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public CommandResultText execute(Model model) throws NoSuchItineraryException, FileNotSavedException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        model.doneItinerary(name);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new CommandResultText(\"Successfully deleted your itinerary with name \" + name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 36
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Edits the EventList on SGTravel."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_EDIT_FAILURE \u003d \"Changes are not saved.\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean canSave;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates an edit command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param canSave Boolean to decide if the edit should be saved."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param events The new edited list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EditCommand(boolean canSave, EventList events) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.canSave \u003d canSave;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws FileNotSavedException If the data could not be saved."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws FileNotSavedException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (canSave \u0026\u0026 events.isUnique()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            model.setEvents(events);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            logger.log(Level.FINE, \"Event list is saved.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new CommandResultText(model.getEvents());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultText(MESSAGE_EDIT_FAILURE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 46
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/EditorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.EmptyVenueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.edits.EditorManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.apache.commons.lang3.SerializationUtils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Turns on the editing mode on SGTravel."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EditorCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_EDITOR \u003d \"Editor mode is turned on. Please press any key to begin. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"Enter new information to edit. Enter x to save changes and exit Editor mode.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws EmptyVenueException If the event list is empty."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws EmptyVenueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d SerializationUtils.clone(model.getEvents());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.activate(events, model.getEventVenues());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultText(MESSAGE_EDITOR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 30
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultExit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Exits SGTravel."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_BYE \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultExit execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultExit(MESSAGE_BYE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 1,
      "Jefferson111": 19
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Finds an Event by keyword."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new FindCommand with the given keyword."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param keyword The keyword to find."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws DuplicateTaskException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d model.getEvents();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList result \u003d find(events);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultText(result);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Finds events with matching keyword."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param events The EventList to be search from."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return EventList containing the events."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DuplicateTaskException If there are duplicated events found."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList find(EventList events) throws DuplicateTaskException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList result \u003d new EventList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event event: events) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (event.toString().contains(keyword)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                result.add(event);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 52
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/GetBusRouteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.enumerations.Direction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.NoSuchBusServiceException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.BusService;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Retrieves the bus route of a given bus."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class GetBusRouteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String bus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new GetBusRouteCommand with the given bus service."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param bus The bus service number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public GetBusRouteCommand(String bus) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.bus \u003d bus;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws NoSuchBusServiceException If there is no such bus service."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws NoSuchBusServiceException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            assert (this.bus.matches(\"-?\\\\d+(\\\\.\\\\d+)?\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            HashMap\u003cString, BusService\u003e busMap \u003d model.getMap().getBusMap();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BusService bus \u003d busMap.get(this.bus);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            String result \u003d \"\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            HashMap\u003cString, BusStop\u003e allBus \u003d model.getBusStops();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            for (String busCode : bus.getDirection(Direction.FORWARD)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (allBus.containsKey(busCode)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    BusStop busStop \u003d allBus.get(busCode);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    result \u003d result.concat(busCode + \" \" + busStop.getAddress() + \"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(Messages.BUS_ROUTE_STARTER + result);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(Messages.BUS_ROUTE_NOT_FOUND);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 20,
      "hongchuan97": 18,
      "Jefferson111": 14
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/GetBusStopCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.NoSuchBusStopException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Retrieves all the bus stops."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class GetBusStopCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String buscode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new GetBusStopCommand with the given bus stop number."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busCode The bus stop number."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public GetBusStopCommand(String busCode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.buscode \u003d busCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing transports."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws NoSuchBusStopException If no such bus stop exists."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws NoSuchBusStopException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        HashMap\u003cString, BusStop\u003e allBus \u003d model.getBusStops();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultText(getResult(allBus));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the result of the bus stop query."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param allBus Hash map that stores all bus stops in Singapore."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The result of the query in String."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws NoSuchBusStopException If no such bus stop exists."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String getResult(HashMap\u003cString, BusStop\u003e allBus) throws NoSuchBusStopException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (allBus.containsKey(buscode)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            BusStop busStop \u003d allBus.get(buscode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return getBusStopInformation(busStop);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        throw new NoSuchBusStopException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the information of a Bus Stop."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busStop The Bus Stop."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The information of the Bus Stop."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String getBusStopInformation(BusStop busStop) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String result \u003d \"This is the information for this Bus Stop:\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + busStop.getAddress() + \"\\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (String busCode : busStop.getBuses()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result +\u003d busCode + \"\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 18,
      "hongchuan97": 16,
      "Jefferson111": 31
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.HelpFailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.net.URISyntaxException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Shows the help message."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String HELP_URL \u003d \"https://github.com/AY1920S1-CS2113T-W13-3/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_HELP \u003d \"Here is the list of commands:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Event: event \u003cvenue\u003e between \u003ctime\u003e and \u003ctime\u003e\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Event: delete \u003cindex\u003e \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Event: done \u003cindex\u003e \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    List events: list\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Showing a Profile: profileShow\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Showing bus stop: busStop \u003cbus stop code\u003e\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Showing a bus route: busRoute \u003cbus number\u003e\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Search locations: search \u003cvenue\u003e\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Map of locations: map \u003cvenue\u003e\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Find event in events: find \u003ckeyword\u003e\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    For more commands, please visit our Github website.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            ;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws HelpFailException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Desktop desktop \u003d Desktop.getDesktop();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            desktop.browse(new URI(HELP_URL));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (URISyntaxException | IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new HelpFailException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(MESSAGE_HELP);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 12,
      "Jefferson111": 34
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Lists items in the Event list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultText(model.getEvents());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 1,
      "Jefferson111": 18
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/ListItineraryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Lists the stored itineraries names an serial number."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class ListItineraryCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        HashMap\u003cString, Itinerary\u003e itineraryHashMap \u003d model.getItineraryTable();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (String name : itineraryHashMap.keySet()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            stringBuilder.append(i++).append(\". \").append(name).append(\"\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new CommandResultText(\"Your Saved Itineraries are :\" + \"\\n\" + stringBuilder.toString());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 24,
      "Jefferson111": 5
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/LocationSearchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.api.ApiParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Fetches a location query and returns a location with coordinates."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class LocationSearchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *  Creates a new LocationSearchCommand with the given location."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param location The location to search."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public LocationSearchCommand(String location) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command with given param."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Venue venue \u003d ApiParser.getLocationSearch(location);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(Messages.LOCATIONSEARCH_STARTER + venue.getAddress() + \"\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    + venue.getLatitude() + \" \" + venue.getLongitude());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (ApiException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(Messages.LOCATIONSEARCH_API_EXCEPTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 28,
      "Jefferson111": 13
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/MarkDoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Marks an Event as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class MarkDoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_MARK_DONE \u003d \"Nice! I\u0027ve marked this task as done:\\n  \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new MarkDoneCommand with the given index."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param index The index of the event."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public MarkDoneCommand(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws OutOfBoundsException If the index is out of bounds."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws FileNotSavedException If the data cannot be saved."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws OutOfBoundsException, FileNotSavedException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Event event \u003d model.getEvents().get(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            event.setDone(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new CommandResultText(MESSAGE_MARK_DONE + event);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new OutOfBoundsException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 43
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/NewItineraryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.ItineraryIncorrectDaysException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Creates a new custom itinerary."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class NewItineraryCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Itinerary itinerary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Constructs a NewItineraryCommand with the users details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param itinerary The itinerary to add."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public NewItineraryCommand(Itinerary itinerary) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.itinerary \u003d itinerary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ApiException If the api request fails."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If the information cannot be parsed into an itinerary."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws FileNotSavedException If the data cannot be saved."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public CommandResultText execute(Model model) throws ApiException, ParseException, FileNotSavedException,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            ItineraryIncorrectDaysException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (itinerary.getList().size() !\u003d itinerary.getNumberOfDays()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new ItineraryIncorrectDaysException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        model.setNewItinerary(itinerary);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        logger.log(Level.FINE, \"New itinerary is saved\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new CommandResultText(\"New Itinerary Created with name: \" + itinerary.getName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 38,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/ProfileAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Sets up the profile."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ProfileAddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private LocalDateTime birthday;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new AddProfileCommand with name and birthday."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param name The name of the person."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param birthday The birthday of the person."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ProfileAddCommand(String name, LocalDateTime birthday) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing the profile."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws FileNotSavedException If the data could not be saved."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws FileNotSavedException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        model.getProfileCard().setPerson(name, birthday);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new CommandResultText(Messages.STARTUP_WELCOME_MESSAGE + name + \"\\n\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 21,
      "Jefferson111": 21
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/ProfileAddFavCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.commons.exceptions.NoSuchItineraryException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Adds the favourite itinerary to profile."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ProfileAddFavCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs the ProfileSetParser."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ProfileAddFavCommand(String word) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        name \u003d word;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @throws FileNotSavedException If the data could not be saved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @throws NoSuchItineraryException If the itinerary cannot be found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CommandResultText execute(Model model) throws FileNotSavedException, NoSuchItineraryException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        // Add to the list of Itineraries"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Itinerary itinerary \u003d model.getItinerary(name);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        model.addToFavourite(name, itinerary);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new CommandResultText(\"Successfully added this itinerary to favourite: \" + \"\\n\" + name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 38
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/ProfileDeleteFavCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.commons.exceptions.NoSuchItineraryException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Deletes itinerary from favourite."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ProfileDeleteFavCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs the ProfileSetParser."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ProfileDeleteFavCommand(String word) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        name \u003d word;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @throws FileNotSavedException If the data could not be saved."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @throws NoSuchItineraryException If the itinerary cannot be found."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CommandResultText execute(Model model) throws FileNotSavedException, NoSuchItineraryException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        model.deleteFavourite(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new CommandResultText(\"Successfully deleted this itinerary from favourite: \" + \"\\n\" + name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 35
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/ProfileListFavCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.model.profile.ProfileCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Shows the user the list of their favourite itinerary."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ProfileListFavCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *  Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CommandResult execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ProfileCard profile \u003d model.getProfileCard();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, Itinerary\u003e favHashMap \u003d profile.getFavouriteList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (String name : favHashMap.keySet()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            stringBuilder.append(i++).append(\". \").append(name).append(\"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new CommandResultText(\"Here is a list of favourite itinerary: \" + \"\\n\" + stringBuilder.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 32
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/ProfileSetPreferenceCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.NoSuchCategoryException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Sets the preference base on user input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ProfileSetPreferenceCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private Boolean setting;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs ProfileSetPreferenceCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param category Category of preference to set."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param setting Setting which user wish to set preference to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If the user try to change settings to contain garbage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ProfileSetPreferenceCommand(String category, String setting) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.category \u003d category.toLowerCase();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (setting.equalsIgnoreCase(\"true\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.setting \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (setting.equalsIgnoreCase(\"false\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.setting \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ParseException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (!this.category.equals(\"sports\") \u0026\u0026 !this.category.equals(\"entertainment\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 !this.category.equals(\"arts\") \u0026\u0026 !this.category.equals(\"lifestyle\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ParseException(Messages.ERROR_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model containing the profile."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws NoSuchCategoryException If there is no such category."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws FileNotSavedException If the data cannot be saved."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(Model model) throws NoSuchCategoryException, FileNotSavedException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        model.getProfileCard().setPreference(category, setting);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new CommandResultText(\"Your preference for \" + category + \" is set to \" + setting);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 27,
      "Jefferson111": 24
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/ProfileShowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Shows the user profile."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ProfileShowCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new CommandResultText(model.getProfileCard());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 12,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/ProfileShowFavCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.commons.exceptions.NoSuchItineraryException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.model.profile.ProfileCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Shows the requested favourite Itinerary."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ProfileShowFavCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs the command with the given itinerary name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ProfileShowFavCommand(String name) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @throws NoSuchItineraryException If the itinerary cannot be found."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CommandResult execute(Model model) throws NoSuchItineraryException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ProfileCard profileCard \u003d model.getProfileCard();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Itinerary favourite \u003d profileCard.getFavourite(name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new CommandResultText(favourite.printItinerary());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 36
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/PromptCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Class representing a command to handle a Prompt."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class PromptCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String prompt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new PromptCommand with the given prompt."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param prompt The prompt to display."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public PromptCommand(String prompt) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.prompt \u003d prompt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(prompt);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 13,
      "Jefferson111": 16
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/QuickEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.edits.Editor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Edits an event."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class QuickEditCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_EDIT_SUCCESS \u003d \"The following is successfully changed:\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int DESCRIPTION \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int START_DATE \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int END_DATE \u003d 2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String[] descriptors;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private QuickEditCommand(int index) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs a QuickEditCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param index The index of the Event."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param descriptors The new descriptors of the Event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public QuickEditCommand(int index, String... descriptors) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.descriptors \u003d descriptors;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ApiException If the api call fails."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws FileNotSavedException If the data cannot be saved."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws OutOfBoundsException If the index given is out of bounds."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If the descriptors cannot be parsed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws ApiException,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            FileNotSavedException, OutOfBoundsException,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Event event \u003d model.getEvents().get(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Editor.edit(descriptors[DESCRIPTION], event, DESCRIPTION);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Editor.edit(descriptors[START_DATE], event, START_DATE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Editor.edit(descriptors[END_DATE], event, END_DATE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new CommandResultText(MESSAGE_EDIT_SUCCESS + event);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new OutOfBoundsException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 60
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/RecommendationsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.RecommendationFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Recommendation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Recommends an itinerary based on number of trip days entered by user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class RecommendationsCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private String[] recommendationDetails;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Constructs a RecommendationsCommand with the users dates."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param recommendationDetails The details of the recommendation."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public RecommendationsCommand(String... recommendationDetails) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.recommendationDetails \u003d recommendationDetails;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If the itineraryDetails cannot be parsed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws RecommendationFailException If there are too many days."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws ParseException, RecommendationFailException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Recommendation recommendation \u003d model.getRecommendations();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        logger.log(Level.FINE, \"Recommendations have been received\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Itinerary recentItinerary \u003d recommendation.makeItinerary(recommendationDetails);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        model.setRecentItinerary(recentItinerary);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new CommandResultText(recentItinerary.printItinerary());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 36,
      "Jefferson111": 11
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/RouteAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.RouteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Adds a Route to RouteList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteAddCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteAddCommand with the given name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param name The name of the route."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param description The description of the route."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteAddCommand(String name, String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given Route List and user interface."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DuplicateRouteException If there is a duplicate route node."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws FileNotSavedException If the data cannot be saved."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws DuplicateRouteException, FileNotSavedException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteList routes \u003d model.getRoutes();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routes.add(new Route(name, description));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(Messages.ROUTE_NODE_ADD_SUCCESS + name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 31,
      "Jefferson111": 12
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/RouteDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.RouteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Deletes a Route from RouteList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteDeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Deletes a Route at the given index in Route List."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the Route."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteDeleteCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws OutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws FileNotSavedException, OutOfBoundsException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteList routes \u003d model.getRoutes();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Route route \u003d routes.get(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String routeName \u003d route.getName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routes.remove(index);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(Messages.ROUTE_DELETE_SUCCESS + routeName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new OutOfBoundsException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 38,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/RouteEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.UnknownFieldException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Edits a Route in RouteList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteEditCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String field;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String newValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteEditCommand with the given parameters."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of Route in RouteList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param field The variable of Route to edit."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param newValue The value to assign"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteEditCommand(int index, String field, String newValue) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.field \u003d field;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.newValue \u003d newValue;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given Route."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file is not saved."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws UnknownFieldException If the queried field is not valid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws OutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws FileNotSavedException, UnknownFieldException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            OutOfBoundsException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Route route \u003d model.getRoutes().get(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            editField(route);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(Messages.ROUTE_NODE_EDIT_SUCCESS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new OutOfBoundsException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Edits the field of the Route."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The Route to edit."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws UnknownFieldException If the field is unknown."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void editField(Route route) throws UnknownFieldException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (field.toLowerCase()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"name\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.setName(newValue);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"description\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.setDescription(newValue);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new UnknownFieldException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 63,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/RouteGenerateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.RouteGenerateFailException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteNodeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.UnknownConstraintException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.PathFinder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.api.ApiParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.model.lists.RouteList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.CustomNode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.RouteNode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.TrainStation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Generates a route based on 2 locations."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteGenerateCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String startPoint;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String endPoint;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Constraint type;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteGenerateCommand with the given node."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startPoint The starting point of the route."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endPoint The ending point of the route."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param type The type of RouteNodes the Route should have."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteGenerateCommand(String startPoint, String endPoint, Constraint type) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.startPoint \u003d startPoint;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.endPoint \u003d endPoint;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command and creates a new Route."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws UnknownConstraintException If the constraint is unknown."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws RouteGenerateFailException If the Route fails to generate."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws DuplicateRouteException If the new Route exists."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws UnknownConstraintException, RouteGenerateFailException,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            DuplicateRouteException, FileNotSavedException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ArrayList\u003cVenue\u003e venueList \u003d generateRoute(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (type \u003d\u003d Constraint.BUS) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    Collections.reverse(venueList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new RouteGenerateFailException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Route route \u003d new Route(startPoint + \" to \" + endPoint + \"  (\" + type.toString() + \")\", \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Venue previousVenue \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                for (Venue venue : venueList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    addInbetweenNodes(model, route, previousVenue, venue);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    addEndingNode(route, venue);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    previousVenue \u003d venue;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } catch (QueryFailedException | DuplicateRouteNodeException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new RouteGenerateFailException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (RouteNode node : route.getNodes()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (node instanceof TrainStation \u0026\u0026 node.getAddress() \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    node.setAddress(node.getDescription());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    updateRouteNode(node, model);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteList routes \u003d model.getRoutes();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routes.add(route);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(Messages.PROMPT_ROUTE_ADD_SUCCESS + \"\\n\" + route.getName());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (ApiException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(Messages.ERROR_API_FAIL);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates a Route via PathFinder."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The Route that is generated."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiException If the API call fails."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws RouteGenerateFailException If the Route fails to generate."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private ArrayList\u003cVenue\u003e generateRoute(Model model) throws ApiException, RouteGenerateFailException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue startVenue \u003d ApiParser.getLocationSearch(startPoint);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue endVenue \u003d ApiParser.getLocationSearch(endPoint);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        PathFinder pathFinder \u003d new PathFinder(model.getMap());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return pathFinder.execute(startVenue, endVenue, type);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds the ending RouteNode to the Route."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The Route to add to."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param venue The Venue to add to."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws DuplicateRouteNodeException If the RouteNode is a duplicate."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void addEndingNode(Route route, Venue venue) throws DuplicateRouteNodeException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (venue instanceof BusStop || venue instanceof TrainStation) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.addNode((RouteNode) venue);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.addNode(PathFinder.generateCustomRouteNode(venue));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds any RouteNodes that are inbetween 2 Venues."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The Route."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startVenue The starting Venue."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endVenue The ending Venue."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryFailedException If the RouteNode cannot be found in local storage."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws RouteGenerateFailException If the Route fails to generate."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void addInbetweenNodes(Model model, Route route, Venue startVenue, Venue endVenue)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throws QueryFailedException, RouteGenerateFailException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if ((startVenue instanceof BusStop \u0026\u0026 endVenue instanceof BusStop)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                || (startVenue instanceof TrainStation \u0026\u0026 endVenue instanceof TrainStation)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ArrayList\u003cVenue\u003e inBetweenNodes \u003d PathFinder.generateInbetweenNodes(startVenue, endVenue, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (Venue inbetweenVenue : inBetweenNodes) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    addNodeToRoute(route, (RouteNode) inbetweenVenue, model);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                } catch (DuplicateRouteNodeException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    pruneDuplicateRoute(route, inbetweenVenue);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Finds the duplicate RouteNode in a route, and removes the unneeded routes."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The route object."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param target The RouteNode that has a duplicate."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws RouteGenerateFailException If the Route fails to generate."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void pruneDuplicateRoute(Route route, Venue target) throws RouteGenerateFailException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (int i \u003d route.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                RouteNode node \u003d route.getNode(i);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (!node.equals(target)) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    route.remove(i);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new RouteGenerateFailException();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Updates the RouteNode in a route by fetching data from the model if possible."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param node The RouteNode object."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws RouteGenerateFailException If the Route fails to generate."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void updateRouteNode(RouteNode node, Model model) throws RouteGenerateFailException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (node instanceof BusStop) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                ((BusStop) node).fetchData(model);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else if (node instanceof TrainStation) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                ((TrainStation) node).fetchData(model);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (QueryFailedException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new RouteGenerateFailException();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a RouteNode to a Route, and if it is a CustomNode, update the description instead."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The Route to add the RouteNode to."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param node The RouteNode."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws RouteGenerateFailException If the Route fails to generate."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws DuplicateRouteNodeException If there is a duplicate RouteNode."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void addNodeToRoute(Route route, RouteNode node, Model model) throws RouteGenerateFailException,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            DuplicateRouteNodeException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (node instanceof CustomNode) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String description \u003d route.getDescription();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            description +\u003d node.getAddress() + \"/\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.setDescription(description);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (node instanceof TrainStation) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                node.setAddress(node.getDescription());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            updateRouteNode(node, model);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.addNode(node);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 203,
      "Jefferson111": 20
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/RouteListAllCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Lists all Routes in RouteList."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteListAllCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given Route List and user interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(model.getRoutes());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 16,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/RouteListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Lists a given Route in RouteList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteListCommand with the given index."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the Route in RouteList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteListCommand(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given Route List and user interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws OutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws OutOfBoundsException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(model.getRoute(index));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new OutOfBoundsException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 29,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/RouteNodeAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteNodeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultImage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.TrainStation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.RouteNode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Adds a RouteNode to RouteList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeAddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private RouteNode node;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexRoute;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexNode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private boolean isEmptyIndexNode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteNodeAddCommand with the given node."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param node The node to add."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexRoute The index of the Route."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexNode The index of the RouteNode."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param isEmptyIndexNode If the index of the RouteNode exists or not."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeAddCommand(RouteNode node, int indexRoute, int indexNode, boolean isEmptyIndexNode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.node \u003d node;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexRoute \u003d indexRoute;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexNode \u003d indexNode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.isEmptyIndexNode \u003d isEmptyIndexNode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file is not saved."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DuplicateRouteNodeException If there is a duplicate RouteNode."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws OutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws QueryFailedException If the query fails."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ApiException If the api call fails."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultImage execute(Model model) throws QueryFailedException, DuplicateRouteNodeException,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            OutOfBoundsException, FileNotSavedException, ApiException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            fetchNodeData(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (QueryFailedException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (node instanceof BusStop) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return new CommandResultImage(Messages.ERROR_BUS_STOP_NOT_FOUND_STARTER + e.getQueriedItem()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        + Messages.ERROR_BUS_STOP_NOT_FOUND_END, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return new CommandResultImage(Messages.ERROR_TRAIN_STATION_NOT_FOUND_STARTER + e.getQueriedItem()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        + Messages.ERROR_TRAIN_STATION_NOT_FOUND_END, null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            addToRoute(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new OutOfBoundsException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new RouteNodeShowCommand(indexRoute, indexNode).execute(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a RouteNode to the Route."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws OutOfBoundsException If the indexes are out of bounds."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws DuplicateRouteNodeException If the RouteNode is a duplicate."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void addToRoute(Model model) throws OutOfBoundsException, DuplicateRouteNodeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d model.getRoute(indexRoute);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isEmptyIndexNode) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.addNode(node);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            indexNode \u003d route.size() - 1;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else if (indexNode \u003e\u003d 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.addNode(node, indexNode);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new OutOfBoundsException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Fetches the RouteNode data from the Model."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryFailedException If the fetching of data fails."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void fetchNodeData(Model model) throws QueryFailedException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (node instanceof BusStop) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ((BusStop) node).fetchData(model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else if (node instanceof TrainStation) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ((TrainStation) node).fetchData(model);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 89,
      "Jefferson111": 19
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/RouteNodeDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.model.locations.RouteNode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Deletes a RouteNode from RouteList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeDeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexRoute;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexNode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Deletes a Route Node at the given index and given Route."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexRoute The index of the Route."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexNode The index of the Route Node."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeDeleteCommand(int indexRoute, int indexNode) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexRoute \u003d indexRoute;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexNode \u003d indexNode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file is not saved."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws OutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws FileNotSavedException, OutOfBoundsException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Route route \u003d model.getRoute(indexRoute);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteNode node \u003d route.getNode(indexNode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String address \u003d node.getAddress();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.remove(indexNode);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(Messages.ROUTE_NODE_DELETE_SUCCESS + address);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new OutOfBoundsException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 40,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/RouteNodeNeighboursCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.api.ApiParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultImage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.RouteNode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Shows nearby neighbours of a given RouteNode."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeNeighboursCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexRoute;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexNode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteNodeNeighboursCommand with the given parameters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexRoute The index of Route in RouteList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexNode The index of Node in RouteList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeNeighboursCommand(int indexRoute, int indexNode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexRoute \u003d indexRoute;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexNode \u003d indexNode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultImage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultImage execute(Model model) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Route route \u003d model.getRoute(indexRoute);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteNode node \u003d route.getNode(indexNode);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ArrayList\u003cVenue\u003e result \u003d ApiParser.getNeighbour(model, node);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                Image image \u003d ApiParser.generateStaticMapNeighbours(model, route, node, indexNode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return new CommandResultImage(image, Messages.ROUTE_NODE_NEIGHBOURS_SUCCESS, result);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } catch (ApiException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return new CommandResultImage(null, Messages.ERROR_API_FAIL, result);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException | OutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultImage(Messages.ERROR_INDEX_OUT_OF_BOUNDS, null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 48,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/RouteNodeShowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.api.ApiParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultImage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.RouteNode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Creates a StaticMap image of a Route for visualization."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeShowCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexRoute;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexNode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteNodeShowCommand with the given parameters."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexRoute The index of the Route in RouteList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexNode indexNode The index of the Node in RouteList."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeShowCommand(int indexRoute, int indexNode) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexRoute \u003d indexRoute;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexNode \u003d indexNode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given Route and user interface."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultRouteMap."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws OutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultImage execute(Model model) throws OutOfBoundsException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Route route \u003d model.getRoute(indexRoute);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteNode node \u003d route.getNode(indexNode);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                Image image \u003d ApiParser.generateRouteNodeShow(route, node, indexNode);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return new CommandResultImage(Messages.PROMPT_ROUTE_SELECTOR_DISPLAY + node.getDisplayInfo(), image);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } catch (ApiException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return new CommandResultImage(Messages.PROMPT_ROUTE_SELECTOR_DISPLAY + node.getDisplayInfo(), null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new OutOfBoundsException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 43,
      "Jefferson111": 11
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/RouteShowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Creates a MapWindow of a Route for visualization."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteShowCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteShowCommand with the given parameters."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the Route in RouteList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteShowCommand(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given Route and user interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultRouteMap."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws OutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultMap execute(Model model) throws OutOfBoundsException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultMap(model.getRoute(index));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new OutOfBoundsException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 30,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/ShowItineraryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.NoSuchItineraryException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Shows the requested Itinerary."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class ShowItineraryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Constructs a ShowItineraryCommand with the requested names."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param name The name of the itinerary to be shown."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public ShowItineraryCommand(String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws NoSuchItineraryException If the itinerary cannot be found."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws NoSuchItineraryException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Itinerary itinerary \u003d model.getItinerary(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (itinerary \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new NoSuchItineraryException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        logger.log(Level.FINE, \"Itinerary Found!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new CommandResultText(itinerary.printItinerary());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 33,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/StaticMapCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultImage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.api.ApiParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Shows a map of location from StaticMap API."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class StaticMapCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String DIMENSIONS \u003d \"512\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String ZOOM_LEVEL \u003d \"18\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String RED_VALUE \u003d \"255\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String GREEN_VALUE \u003d \"122\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String BLUE_VALUE \u003d \"0\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String param;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new StaticMapCommand for the given location query."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param location The location to query."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public StaticMapCommand(String location) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.param \u003d location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given user interface."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The Model object containing task list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResult containing the image from StaticMap."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ApiException If the api call fails."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultImage execute(Model model) throws ApiException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Venue query \u003d ApiParser.getLocationSearch(param);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Image image \u003d ApiParser.getStaticMap(ApiParser.generateStaticMapParams(DIMENSIONS, DIMENSIONS, ZOOM_LEVEL,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    String.valueOf(query.getLatitude()), String.valueOf(query.getLongitude()), \"\", \"\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    ApiParser.generateStaticMapPoint(String.valueOf(query.getLatitude()),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                            String.valueOf(query.getLongitude()), RED_VALUE, GREEN_VALUE, BLUE_VALUE, param)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultImage(Messages.STATIC_MAP_SUCCESS + param, image);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (ApiException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultImage(Messages.STATIC_MAP_FAILURE, null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Inno97": 40,
      "Jefferson111": 13
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/ViewScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultCalender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Command to allow users to view their calender."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ViewScheduleCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_SHOW_CALENDAR \u003d \"Calendar is launching...\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a calendar result."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultCalender execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        CommandResultCalender commandResult \u003d new CommandResultCalender(MESSAGE_SHOW_CALENDAR);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        commandResult.setEvents(model.getEvents());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 1,
      "Jefferson111": 19
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/results/Calenderable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Interface representing a calender."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public interface Calenderable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the EventList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The EventList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    EventList getEvents();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the EventList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param events The EventList to set."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setEvents(EventList events);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 10,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/results/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Abstract class which represents the result of a command\u0027s execution as a string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public abstract class CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the message in the object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return message The message in the object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 2,
      "Inno97": 13,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/results/CommandResultCalender.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines the command result of any calender command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class CommandResultCalender extends CommandResult implements Calenderable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a basic CommandResultCalender object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message Message for ui to display."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultCalender(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the EventList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param events The EventList to set."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setEvents(EventList events) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the EventList."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return events The EventList in this object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventList getEvents() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the message."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return message The message in this object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 39,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/results/CommandResultExit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines the command result of an exit command as a string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class CommandResultExit extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a basic CommandResultImage object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message Message for ui to display."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultExit(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return message The message in this object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 23,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/results/CommandResultImage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.TrainStation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines the command result of any command containing an image."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class CommandResultImage extends CommandResult implements Imageable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Image image \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a basic CommandResultImage object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message Message for ui to display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultImage(String message, Image image) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (image !\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.image \u003d image;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor that helps to create text for an ArrayList of Venue."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message The message to show at the top."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param venues The ArrayList of Venue."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultImage(Image image, String message, ArrayList\u003cVenue\u003e venues) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (Venue venue : venues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            appendNodeInformation(index, venue);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.image \u003d image;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Appends the RouteNode information to the result."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the route."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param venue The Venue object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void appendNodeInformation(int index, Venue venue) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (venue instanceof BusStop) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.message +\u003d \"(\" + index + \") \" + ((BusStop) venue).getBusCode() + \" \" + venue.getAddress() + \"\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else if (venue instanceof TrainStation) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.message +\u003d \"(\" + index + \") \" + ((TrainStation) venue).getDescription() + \" Station\\n\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.message +\u003d \"(\" + index + \") \" + venue.getAddress() + \"\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the Image."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return image The Image to show."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Image getImage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return image;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the message."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return message The message in this object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 73,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/results/CommandResultMap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.RouteNode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines the command result of a command needing a map."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class CommandResultMap extends CommandResult implements Routeable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private ArrayList\u003cRouteNode\u003e routes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a basic CommandResultMap object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param routes The route object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultMap(Route routes) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.routes \u003d routes.getNodes();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the Route represented by the Map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return route The Route represented by the Map."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ArrayList\u003cRouteNode\u003e getRoutes() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return routes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the Route in the Map."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param routes The Route to set."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setRoutes(ArrayList\u003cRouteNode\u003e routes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.routes \u003d routes;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 36,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/results/CommandResultText.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.RouteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.CustomNode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.TrainStation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.profile.ProfileCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.RouteNode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines the result of various commands as a string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class CommandResultText extends CommandResult {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a basic CommandResultText object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message Message for ui to display."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText(String message) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Alternative constructor that helps to create text for a list of events."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param events The EventList to create text for."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText(EventList events) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        message \u003d \"Here are the list of events:\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event t : events) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            message +\u003d (i + \". \" + t + \"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor that helps to create text for a list of Routes."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param routes The RouteList to create text for."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText(RouteList routes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        message \u003d \"Here is the information of Routes:\\nThere are \" + routes.size() + \" Routes.\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (Route route: routes.getRoutes()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            message +\u003d \"\\n(\" + index + \") \" + route.getName() + \"\\nDescription:\\n\" + route.getDescription() + \"\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor that helps to create text for a Route."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The Route to create text for."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText(Route route) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        message \u003d \"Here is the information of the Route:\\n\" + route.getName() + \"\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        message +\u003d (route.getDescription()).replace(\"/\", \"\\n\") + \"\\n\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (RouteNode node: route.getNodes()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            message +\u003d \"(\" + index + \") \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (node instanceof BusStop) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                message +\u003d ((BusStop) node).getBusCode() + \" \" + node.getAddress() + \"\\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else if (node instanceof TrainStation) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                message +\u003d node.getAddress() + \" \" + node.getDescription() + \"\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else if (node instanceof CustomNode)  {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                message +\u003d node.getAddress() + \"\\n\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor that helps to create text for a Route Node."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param node The RouteNode to create text for."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText(RouteNode node) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        message \u003d \"Here is the information of the \";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (node instanceof BusStop) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            message +\u003d \"Bus Stop:\\n\" + ((BusStop) node).getBusCode() + \"\\n\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else if (node instanceof TrainStation) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            message +\u003d \"Train Station:\\n\" + ((TrainStation) node).getTrainCodes() + \"\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        message +\u003d  node.getAddress() + \"\\n\" + node.getDescription() + \"\\n\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"(\" + node.getType().toString() + \", \" + node.getCoordinate() + \")\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor that helps to create text for an ArrayList of Venues."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message The message to show at the top."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param venues The ArrayList of Venues to create text for."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText(String message, ArrayList\u003cVenue\u003e venues) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(message);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (Venue venue : venues) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (venue instanceof BusStop) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.append(((BusStop) venue).getBusCode()).append(\" \").append(venue.getAddress()).append(\"\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.append(venue.getAddress()).append(\"\\n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.message \u003d result.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor that helps to create text for a ProfileCard."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param profileCard The ProfileCard to create text for."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CommandResultText(ProfileCard profileCard) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        message \u003d \"PROFILE:\\n\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        message +\u003d \"\\nName: \" + profileCard.getPersonName() + \"\\n\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        message +\u003d \"Age: \" + profileCard.getAge() + \"\\n\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        message +\u003d \"\\nLikes:\\n\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String[] category \u003d {\"sports\", \"entertainment\", \"arts\", \"lifestyle\"};"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (Boolean setting : profileCard.getPreference()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (setting) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                message +\u003d (category[i] + \"\\n\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        message +\u003d \"\\nFavorite Itinerary:\\n\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        i \u003d 1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (String name : profileCard.getFavouriteList().keySet()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            message +\u003d i++ + \". \" + name + \"\\n\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 100,
      "hongchuan97": 24,
      "Jefferson111": 15
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/results/Eventable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Interface representing an event list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public interface Eventable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the EventList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The EventList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    EventList getEvents();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the EventList."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param events The EventList to set."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setEvents(EventList events);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 10,
      "Jefferson111": 13
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/results/Imageable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Interface representing an image."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public interface Imageable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the Image shown."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The Image."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    Image getImage();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 12,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/results/PanelResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.VenueList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Represents the information that is to be displayed in side panel."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class PanelResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private VenueList venues;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isLock;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isReady;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int field;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a PanelResult object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public PanelResult() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isReady \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor for a PanelResult object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param event The event to be displayed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param venues The venues to be displayed."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param isLock Whether an event is locked on."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param index The index of the event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param field The index of the field that is selected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public PanelResult(Event event, VenueList venues, boolean isLock, int index, int field) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venues \u003d venues;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.isLock \u003d isLock;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.field \u003d field;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isReady \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Checks if the result is ready."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isReady() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isReady;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to get the description of the event."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The description of an event."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (event !\u003d null) : \"This method should only be called if its isReady.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return event.getLocation().getAddress();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the start date of the Event."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The start date of the Event."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getStartDate() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return ParserTimeUtil.stringify(event.getStartDate());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the end date of the Event."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The end date of the Event."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getEndDate() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return ParserTimeUtil.stringify(event.getEndDate());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the color of the Venue."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The color of the Venue."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Paint getVenueColor(int index) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (this.index \u003d\u003d index) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (isLock) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                return Paint.valueOf(\"orange\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return Paint.valueOf(\"green\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return Paint.valueOf(\"blue\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the Venue at a specified index."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index for the Venue."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The venue at index."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Venue getVenue(int index) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return venues.get(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the size of the VenueList."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The size of the VenueList."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return venues.size();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the index of the field that is currently selected."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public int getField() throws OutOfBoundsException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!isLock) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new OutOfBoundsException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return field;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 25,
      "Jefferson111": 100
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/commands/results/Routeable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.RouteNode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Interface representing a route."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public interface Routeable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the ArrayList of Routes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The ArrayList of Routes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    ArrayList\u003cRouteNode\u003e getRoutes();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the ArrayList of Routes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param routes The ArrayList of Routes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void setRoutes(ArrayList\u003cRouteNode\u003e routes);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 20,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/conversations/Conversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Abstract class representing an individual Conversation."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public abstract class Conversation {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected String result;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected String prompt;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected int state;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected int attempts;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final int ATTEMPTS_LIMIT \u003d 3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private boolean isFinished;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Conversation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isFinished \u003d false;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        attempts \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        state \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public abstract void execute(String input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Builds the result of the conversation string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected abstract void buildResult();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getPrompt() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return prompt;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getResult() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (result !\u003d null) : \"result should not be null\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void setFinished(boolean finished) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        isFinished \u003d finished;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks if input is int."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If the input is int."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected Boolean isIntInput(String input) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Integer.parseInt(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_NOT_INT;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks if input is a field of a Route."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The input."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If the input is a field of a Route."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected boolean isRouteField(String input) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (\"name\".equals(input) || \"description\".equals(input)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_NOT_ROUTE_FIELD;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks if input is a Constraint enum."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The input."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If the input is a Constraint."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected boolean isConstraint(String input) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Constraint.valueOf(input.toUpperCase());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.ERROR_CONSTRAINT_UNKNOWN;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks if input is a DateTime."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The input."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If the input is a DateTime."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected Boolean isDateInput(String input) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserTimeUtil.parseStringToDate(input);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_NOT_DATE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to cancel the conversation."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The userInput from UI object."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void tryCancelConversation(String userInput) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (attempts \u003e ATTEMPTS_LIMIT || \"cancel\".equals(userInput)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d \"cancel\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            isFinished \u003d true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns whether the conversation is finished."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If the conversation is finished."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isFinished() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isFinished;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 81,
      "Jefferson111": 65
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/conversations/ConversationManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ConversationParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.PromptParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Manages two-way communications between SGTravel and the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ConversationManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isFinished;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Conversation conversation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the ConversationManager object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ConversationManager() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isFinished \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Starts or continues a conversation with Duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If no conversation could be started."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void converse(String input) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (tryStartConversation(input)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversation.execute(input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryEndConversation();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to end a conversation. If the conversation is still ongoing, nothing happens."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void tryEndConversation() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (conversation.isFinished()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            isFinished \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to start a conversation. If the conversation is still ongoing, nothing happens."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input The user input from ui."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return true if a conversation is started, false otherwise."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If no conversation could be started."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean tryStartConversation(String input) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isFinished) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            startConversation(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            isFinished \u003d false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a Conversation object based on input."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input The words from user input."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If the input cannot be parsed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void startConversation(String input) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversation \u003d ConversationParser.parse(input);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets a command from the ConversationManager."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return Command for logic to execute."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeException If the result could not be parse by parser."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command getCommand() throws DukeException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isFinished) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return Parser.parseComplexCommand(getResult());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return PromptParser.parseCommand(getPrompt());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the result of the conversation."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return result The String result made from Conversation."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getResult() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String result \u003d conversation.getResult();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        clearContext();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the prompt from Conversation object if applicable."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The prompt."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getPrompt() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (conversation !\u003d null) : \"Conversation should not be null\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return conversation.getPrompt();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Clears the current context of the conversation."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void clearContext() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isFinished \u003d true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversation \u003d null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns whether the current conversation is finished."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return isFinished Whether the current conversation is finished."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isFinished() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isFinished;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 11,
      "Jefferson111": 114
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/conversations/DeleteConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a delete command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DeleteConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the DeleteConversation object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DeleteConversation() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_DELETE_STARTER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index \u003d input;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Builds the result of the conversation string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (index !\u003d null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d COMMAND + \" \" + index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 17,
      "Jefferson111": 24
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/conversations/FindConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a find command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class FindConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the FindConversation object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FindConversation() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_FIND_STARTER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        keyword \u003d input;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        buildResult();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setFinished(true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Builds the result of the conversation string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert  (keyword !\u003d null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d COMMAND + \" \" + keyword;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 14,
      "Jefferson111": 23
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/conversations/GetBusStopConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a busStop command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class GetBusStopConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String COMMAND \u003d \"busStop\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String busCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the GetBusStopConversation object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public GetBusStopConversation() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        prompt \u003d Messages.PROMPT_GETBUSSTOP_STARTER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            busCode \u003d input;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Builds the result of the conversation string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d COMMAND + \" \" + busCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 15,
      "Jefferson111": 25
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/conversations/MarkDoneConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a mark done command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class MarkDoneConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the MarkDoneConversation object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public MarkDoneConversation() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_MARKDONE_STARTER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            index \u003d input;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Builds the result of the conversation string."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (index !\u003d null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d COMMAND + \" \" + index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 16,
      "Jefferson111": 25
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/conversations/RouteAddConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when a RouteAdd command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteAddConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String COMMAND \u003d \"routeAdd\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the RouteAddConversation object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteAddConversation() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTE_ADD_STARTER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTE_ADD_DESCRIPTION;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            name \u003d input;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            state++;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTE_ADD_SUCCESS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            description \u003d input;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ERROR;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Builds the result of the conversation string."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d COMMAND + \" \" + name + \" desc \" + description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 53,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/conversations/RouteDeleteConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when a RouteDelete command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteDeleteConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String COMMAND \u003d \"routeDelete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the RouteDeleteConversation object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteDeleteConversation() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTE_DELETE_STARTER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index \u003d input;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTE_DELETE_SUCCESS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Builds the result of the conversation string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (index !\u003d null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d COMMAND + \" \" + index;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 41,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/conversations/RouteEditConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when a RouteEdit command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteEditConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String COMMAND \u003d \"routeEdit\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String field;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String newValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the RouteEditConversation object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteEditConversation() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTE_EDIT_STARTER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                index \u003d input;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTE_EDIT_FIELD;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                attempts \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isRouteField(input)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                field \u003d input;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTE_EDIT_FIELD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                attempts \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTE_EDIT_SUCCESS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            newValue \u003d input;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ERROR;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Builds the result of the conversation string."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d COMMAND + \" \" + index + \" \" + field + \" \" + newValue;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 65,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/conversations/RouteGenerateConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when a RouteGenerate command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteGenerateConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String COMMAND \u003d \"routeGenerate\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String startLocation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String endLocation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String constraint;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the RouteGenerateConversation object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteGenerateConversation() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTE_GENERATE_STARTER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            startLocation \u003d input;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTE_GENERATE_ENDLOCATION;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            state++;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            endLocation \u003d input;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTE_GENERATE_CONSTRAINT;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            state++;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isConstraint(input)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                constraint \u003d input;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTE_GENERATE_SUCCESS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                buildResult();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                setFinished(true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ERROR;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Builds the result of the conversation string."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d COMMAND + \" \" + startLocation + \" to \" + endLocation + \" by \" + constraint;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 63,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/conversations/RouteListConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when a RouteList command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteListConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String COMMAND \u003d \"routeList\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the RouteListConversation object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteListConversation() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTE_LIST_STARTER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index \u003d input;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Builds the result of the conversation string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (index !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d COMMAND + \" \" + index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 45,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/conversations/RouteNodeAddConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when a RouteNodeAddCommand is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeAddConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String COMMAND \u003d \"routeNodeAdd\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String routeIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String nodeIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String constraint;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the RouteNodeAddConversation object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeAddConversation() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTENODE_ADD_STARTER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                routeIndex \u003d input;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_ADD_NODEINDEX;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                nodeIndex \u003d input;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_ADD_TYPE;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isConstraint(input)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                constraint \u003d input;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_ADD_INPUT;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            name \u003d input;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTENODE_ADD_SUCCESS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ERROR;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Builds the result of the conversation string."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (!\"0\".equals(nodeIndex)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d COMMAND + \" \" + routeIndex + \" \" + nodeIndex + \" at \" + name + \" by \" + constraint;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d COMMAND + \" \" + routeIndex + \" at \" + name + \" by \" + constraint;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 77,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/conversations/RouteNodeDeleteConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when a RouteNodeDelete command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeDeleteConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String COMMAND \u003d \"routeNodeDelete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String routeIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String nodeIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the RouteNodeDeleteConversation object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeDeleteConversation() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTENODE_DELETE_STARTER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                routeIndex \u003d input;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_DELETE_NODEINDEX;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                nodeIndex \u003d input;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_DELETE_SUCCESS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                buildResult();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                setFinished(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ERROR;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Builds the result of the conversation string."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d COMMAND + \" \" + routeIndex + \" \" + nodeIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 58,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/conversations/SearchConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a search command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class SearchConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String COMMAND \u003d \"search\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the SearchConversation object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public SearchConversation() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_SEARCH_STARTER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_SEARCH_SUCCESS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        location \u003d input.replace(\" \", \"+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        buildResult();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        setFinished(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Builds the result of the conversation string."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (location !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d COMMAND + \" \" + location;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 40,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/conversations/SetupProfileConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when a profile setup command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class SetupProfileConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final String COMMAND \u003d \"profile\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String birthday;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the SetupProfileConversation object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public SetupProfileConversation() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        prompt \u003d Messages.PROMPT_SETUP_PROFILE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            prompt \u003d Messages.PROMPT_BIRTHDAY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            name \u003d input;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            state++;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (isDateInput(input)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                birthday \u003d input;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                buildResult();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                setFinished(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ERROR;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Builds the result of the conversation string."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (name !\u003d null \u0026\u0026 birthday !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            result \u003d COMMAND + \" \" + name + \" \" + birthday;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 14,
      "hongchuan97": 44,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/edits/Editor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.edits;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.api.ApiParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Editor that edits an Event object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Editor {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int DESCRIPTION \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int START_DATE \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int END_DATE \u003d 2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Edits an Event object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The new information."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param event The Event object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param eventField Integer indicating which field to edit."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws OutOfBoundsException If the eventField is out of bounds."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiException If there is an issue with the request."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If the date format is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static void edit(String userInput, Event event, int eventField) throws OutOfBoundsException,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            ApiException, ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (eventField) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case DESCRIPTION:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            editDescription(userInput, event);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case START_DATE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            editStartDate(userInput, event);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case END_DATE:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            editEndDate(userInput, event);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new OutOfBoundsException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Edits the description of an Event object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The new description."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param event The Event object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiException If there is an issue with the request."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static void editDescription(String userInput, Event event) throws ApiException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setLocation(ApiParser.getLocationSearch(userInput));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setDescription(userInput);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Edits the start date of an Event object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The new date."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param event The Event object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If the date format of user input is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static void editStartDate(String userInput, Event event) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setStartDate(ParserTimeUtil.parseStringToDate(userInput));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Edits the end date of an Event object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The new date."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param event The Event object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If the date format of user input is invalid."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static void editEndDate(String userInput, Event event) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setEndDate(ParserTimeUtil.parseStringToDate(userInput));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 2,
      "Jefferson111": 72
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/edits/EditorManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.edits;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.EmptyVenueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.EventNotSelectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.PanelResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.EditorParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.PromptParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.selectors.EventFieldSelector;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.selectors.LocationSelector;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.VenueList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Manages editing operations of the EventList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EditorManager {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static LocationSelector eventSelector;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static EventFieldSelector fieldSelector;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static EventList events;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static VenueList venues;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static Event currentEvent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static int eventField;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static boolean isActive \u003d false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Activates the EditorManager."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static void activate(EventList events, VenueList venues) throws EmptyVenueException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.INFO, \"Activating editor...\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.events \u003d events;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.venues \u003d venues;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        eventSelector \u003d new LocationSelector(venues);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        fieldSelector \u003d new EventFieldSelector();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isActive \u003d true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selectEvent();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static void deactivate() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isActive \u003d false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static boolean isActive() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isActive;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Edits the EventList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The input string from user."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return Command object for logic to execute."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws EventNotSelectedException If there are no event selected."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws OutOfBoundsException If the Event field is out of bounds."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If the user input cannot be parsed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ApiException If the API request timeout."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Command edit(String userInput) throws EventNotSelectedException, ParseException,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            ApiException, OutOfBoundsException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!eventSelector.isLock()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new EventNotSelectedException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (currentEvent !\u003d null) : \"currentEvent must always exist when the lock is on\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        boolean canSave \u003d EditorParser.parse(userInput);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isActive) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Editor.edit(userInput, currentEvent, eventField);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return PromptParser.parseCommand(\"editing...\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new EditCommand(canSave, events);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Edits the EventList."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static PanelResult edit(KeyCode keyCode) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (keyCode.equals(KeyCode.ESCAPE)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            eventSelector.unlock();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (eventSelector.isLock()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            fieldSelector.feedKeyCode(keyCode);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            selectEventField();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            eventSelector.feedKeyCode(keyCode);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            selectEvent();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new PanelResult(currentEvent, venues, eventSelector.isLock(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                eventSelector.getIndex(), eventField);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static void selectEventField() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        eventField \u003d fieldSelector.getIndex();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static void selectEvent() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentEvent \u003d events.get(eventSelector.getIndex());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 105
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/ConversationParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.Conversation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.DeleteConversation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.FindConversation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.GetBusStopConversation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.MarkDoneConversation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.RouteAddConversation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.RouteDeleteConversation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.RouteEditConversation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.RouteGenerateConversation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.RouteListConversation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.RouteNodeAddConversation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.RouteNodeDeleteConversation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.SearchConversation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.SetupProfileConversation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Parser for conversations. Selects conversation based on user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ConversationParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the input and returns a Conversation object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input The user input from Ui."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return A conversation object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If input is undefined."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Conversation parse(String input) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new MarkDoneConversation();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new DeleteConversation();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"busStop\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new GetBusStopConversation();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new FindConversation();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"search\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new SearchConversation();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"profile\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new SetupProfileConversation();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeDelete\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteDeleteConversation();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"routeAdd\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new RouteAddConversation();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeEdit\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteEditConversation();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeGenerate\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteGenerateConversation();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeList\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteListConversation();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeAdd\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteNodeAddConversation();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeDelete\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteNodeDeleteConversation();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ParseException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 13,
      "hongchuan97": 2,
      "Jefferson111": 48
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/EditorParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.edits.EditorManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Parser for editing operations."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EditorParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The user input from ui."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return True if the edits can be saved."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static boolean parse(String userInput) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.FINE, \"Editor parsing user input\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (userInput) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"done\": case \"save\": case \"x\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            EditorManager.deactivate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"close\": case \"end\": case \"X\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            EditorManager.deactivate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 32
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.exceptions.NullResultException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.AddSampleItineraryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.logic.commands.DoneItineraryCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.EditorCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.commands.ProfileAddFavCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.commands.ProfileDeleteFavCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.commands.ProfileListFavCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.ProfileShowCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.commands.ProfileShowFavCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RouteListAllCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.ShowItineraryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.ViewScheduleCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.AddEventParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.CreateNewItineraryParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.DeleteParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.DoneParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.FindParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.GetBusRouteParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.GetBusStopParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.ListItineraryParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.LocationSearchParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.ProfileAddParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.ProfileSetParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.PromptParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.QuickEditParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.RecommendationParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.RouteAddParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.RouteDeleteParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.RouteEditParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.RouteGenerateParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.RouteListParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.RouteNodeAddParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.RouteNodeDeleteParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.RouteNodeNeighboursParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.RouteNodeShowParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.RouteShowParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.StaticMapParser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.storageparsers.PlanningStorageParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Parser for commands entered by the user. It reads from standard input and returns Command objects."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the userInput and return a Command object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input Input created by the ConversationManager object or user input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The corresponding Command object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If userInput is undefined."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws NullResultException If the result cannot be found."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static Command parseComplexCommand(String input) throws ParseException, NullResultException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String commandWord \u003d getCommandWord(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"view\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new ViewScheduleCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new EditorCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"e\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new QuickEditParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new DoneParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new DeleteParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new FindParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"search\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new LocationSearchParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"busStop\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new GetBusStopParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"busRoute\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new GetBusRouteParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new AddEventParser(input).parse();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"recommend\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new RecommendationParser(input).parse();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"cancel\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return PromptParser.parseCommand(Messages.PROMPT_CANCEL);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"map\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new StaticMapParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeAdd\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new RouteAddParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeAdd\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new RouteNodeAddParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeEdit\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new RouteEditParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeDelete\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new RouteDeleteParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeDelete\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new RouteNodeDeleteParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeList\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new RouteListParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeListAll\":"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteListAllCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeGenerate\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new RouteGenerateParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeShow\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new RouteShowParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeShow\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new RouteNodeShowParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeNearby\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new RouteNodeNeighboursParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"addThisList\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            return new AddSampleItineraryCommand(PlanningStorageParser.getNewAddListName(input));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"newItinerary\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new CreateNewItineraryParser(input).parse();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"listItinerary\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            return new ListItineraryParser(input).parse();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"showItinerary\":"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            return new ShowItineraryCommand(getWord(input));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"doneItinerary\":"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            return new DoneItineraryCommand(getWord(input));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"profile\":"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new ProfileAddParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"profileShow\":"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new ProfileShowCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"profileSet\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new ProfileSetParser(getWord(input)).parse();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"addToFav\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new ProfileAddFavCommand(getWord(input));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"listFav\":"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new ProfileListFavCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"showFav\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new ProfileShowFavCommand(getWord(input));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"deleteFav\":"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new ProfileDeleteFavCommand(getWord(input));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ParseException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets command word from the userInput."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The command word."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static String getCommandWord(String userInput) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return userInput.strip().split(\" \")[0];"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets word from the userInput."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The word."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static String getWord(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return userInput.strip().split(\" \", 2)[1];"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ParseException(Messages.ERROR_DESCRIPTION_EMPTY);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 12,
      "Inno97": 19,
      "hongchuan97": 27,
      "Jefferson111": 113
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/ParserTimeUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.enumerations.TimePatternType;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Parser for Time related operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ParserTimeUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a String into a LocalDateTime object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param line The input String for Date extraction."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The date and time, missing information wil be padded with current time information."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If the format is invalid."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static LocalDateTime parseStringToDate(String line) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] patterns \u003d {\"[\u0027next \u0027][\u0027this \u0027]E\", \"[\u0027this \u0027][\u0027next \u0027]EEEE\", \"dd/MM/yyyy HHmm\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                             \"dd/MM/yy HHmm\", \"HHmm\", \"dd/MM/yyyy\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                             \"dd/MM/yy\", \"yyyy-MM-dd\u0027T\u0027HH:mm[:ss.n]\"};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        TimePatternType[] types \u003d {TimePatternType.DAY_OF_WEEK, TimePatternType.DAY_OF_WEEK,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            TimePatternType.DATE_TIME, TimePatternType.DATE_TIME, TimePatternType.TIME, TimePatternType.DATE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            TimePatternType.DATE, TimePatternType.DATE_TIME};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c patterns.length;) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                TemporalAccessor accessor \u003d DateTimeFormatter.ofPattern(patterns[i]).parse(line);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                switch (types[i]) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                case DAY_OF_WEEK:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalDateTime localDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    return localDateTime.with(TemporalAdjusters.nextOrSame(DayOfWeek.from(accessor)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                case DATE_TIME:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    return LocalDateTime.from(accessor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                case TIME:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    return localDate.atTime(LocalTime.from(accessor));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                case DATE:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalTime localTime \u003d LocalTime.now();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    return localTime.atDate(LocalDate.from(accessor));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                ++i;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        throw new ParseException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Converts a LocalDateTime object to a pleasant looking string."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param date The LocalDateTime object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return A pleasant looking string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static String stringify(LocalDateTime date) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG, FormatStyle.SHORT).format(date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 47,
      "Jefferson111": 20
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines parsing methods for utility functions."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the field at index in a String list delimited by whitespace."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of field."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param listSize The total size of String list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The field."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static String getFieldInList(int index, int listSize, String userInput) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String[] fields \u003d userInput.split(\" \", listSize);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (index \u003e\u003d 0 \u0026\u0026 index \u003c listSize) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return fields[index].strip();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ParseException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        throw new ParseException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the integer at index in a String list delimited by whitespace."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of field."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param listSize The total size of String list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The integer."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If the String cannot be parsed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static int getIntegerInList(int index, int listSize, String userInput) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String[] fields \u003d userInput.split(\" \", listSize);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (index \u003e\u003d 0 \u0026\u0026 index \u003c listSize) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return Integer.parseInt(fields[index].strip());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ParseException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        throw new ParseException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the integer index at index in a String list delimited by whitespace."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of field."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param listSize The total size of String list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The integer index."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If the String cannot be parsed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static int getIntegerIndexInList(int index, int listSize, String userInput) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return getIntegerInList(index, listSize, userInput) - 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 42,
      "Jefferson111": 24
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/AddEventParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ChronologyBeforePresentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ChronologyInconsistentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for AddCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class AddEventParser extends CommandParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int THREE \u003d 3;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the AddEventParser."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public AddEventParser(String input) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns a new Event constructed from user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return The new Event object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If Event object cannot be created from user input."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ChronologyBeforePresentException If the dates are before now."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ChronologyInconsistentException If the dates are inconsistent."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Event createEvent(String userInput) throws ParseException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            ChronologyBeforePresentException, ChronologyInconsistentException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String[] withinDetails \u003d userInput.substring(\"event\".length()).strip().split(\"between| and\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (withinDetails.length \u003d\u003d ONE) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ParseException(Messages.ERROR_DESCRIPTION_EMPTY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (withinDetails.length !\u003d THREE || withinDetails[ONE] \u003d\u003d null || withinDetails[TWO] \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ParseException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (withinDetails[ZERO].strip().isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ParseException(Messages.ERROR_DESCRIPTION_EMPTY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(withinDetails[ONE].strip());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(withinDetails[TWO].strip());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        checkLogicalDate(start, end);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new Event(withinDetails[ZERO].strip(), start, end);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Checks if the dates provided is logical."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Does nothing if it\u0027s logical."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param end The end date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param start The start date."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ChronologyBeforePresentException If the dates are before now."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ChronologyInconsistentException If the dates are inconsistent."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void checkLogicalDate(LocalDateTime start, LocalDateTime end) throws ChronologyBeforePresentException,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            ChronologyInconsistentException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (start.isBefore(LocalDateTime.now()) || end.isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ChronologyBeforePresentException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (end.isBefore(start)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ChronologyInconsistentException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses user input and constructs an AddCommand object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return AddCommand object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If Event object cannot be created from user input."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command parse() throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d createEvent(input);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new AddCommand(event);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 4,
      "hongchuan97": 30,
      "Jefferson111": 55
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/CommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.ItineraryIncorrectDaysException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.exceptions.NullResultException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Represents a parser that is able to parse input into a Command object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public abstract class CommandParser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    protected static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the data it have into a Command object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return Command object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If data cannot be parsed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ItineraryIncorrectDaysException If the number of days are wrong."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public abstract T parse() throws ParseException, ItineraryIncorrectDaysException, NullResultException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 4,
      "hongchuan97": 9,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/CreateNewItineraryParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.RepeatedDayNumberException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.logic.api.ApiParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.NewItineraryCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.logic.parsers.storageparsers.PlanningStorageParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.model.planning.Agenda;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.model.planning.Todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Parses the user inputs into suitable format for CreateNewItineraryCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class CreateNewItineraryParser extends CommandParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the CreateNewItineraryParser."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CreateNewItineraryParser(String input) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * This returns the list of agendas for a newly entered Itinerary."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param itineraryDetails is the details of the itinerary to make."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws ParseException if the incorrect format is used in entering the itinerary."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cAgenda\u003e getAgendaList(String[] itineraryDetails) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            List\u003cAgenda\u003e agendaList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Set\u003cInteger\u003e numbers \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            return makeAgendaList(itineraryDetails, agendaList, numbers);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new ParseException(Messages.ERROR_ITINERARY_FAIL_CREATION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new ParseException(Messages.ERROR_ITINERARY_INCORRECT_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * This makes the list of agendas for a newly entered Itinerary."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param itineraryDetails is the details of the itinerary to make."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws ParseException if the incorrect format is used in entering the itinerary."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private List\u003cAgenda\u003e makeAgendaList(String[] itineraryDetails, List\u003cAgenda\u003e agendaList, Set\u003cInteger\u003e numbers)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        int i \u003d 3;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        while (i \u003c itineraryDetails.length) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            HashMap\u003cString, Venue\u003e venueMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            List\u003cTodo\u003e todoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            final int number \u003d Integer.parseInt(itineraryDetails[i++]);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            while (itineraryDetails[i].equals(\"/venue\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                venueMap.put(itineraryDetails[i], ApiParser.getLocationSearch(itineraryDetails[i]));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                StringBuilder todos \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                if (i \u003d\u003d itineraryDetails.length - 1 || itineraryDetails[i].matches(\"-?\\\\d+\")) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    throw new ParseException(Messages.ERROR_ITINERARY_EMPTY_TODOLIST);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                todos.append(itineraryDetails[++i]).append(\"|\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                while (itineraryDetails[i].equals(\"/and\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    todos.append(itineraryDetails[i++]).append(\"|\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    if (i \u003e\u003d itineraryDetails.length) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                todoList.addAll(PlanningStorageParser.getTodoListFromStorage(todos.toString()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                if (i \u003e\u003d itineraryDetails.length) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            checkForRepeatedDayNumber(numbers, number);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            numbers.add(number);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            agendaList.add(getAgendaFromMap(venueMap, todoList, number));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        logger.log(Level.FINE, \"No repeated day numbers\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return agendaList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Takes the VenueMap, todoList as well as number and returns an Agenda."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param venueMap is the hash-map containing all the Venues for the day."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param todoList is the list of todo\u0027s for the day"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param number is the day number"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Agenda getAgendaFromMap(HashMap\u003cString, Venue\u003e venueMap, List\u003cTodo\u003e todoList, int number) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cVenue\u003e venueList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (Map.Entry\u003cString, Venue\u003e entry : venueMap.entrySet()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            venueList.add(entry.getValue());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new Agenda(todoList, venueList, number);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Checks if any duplicate day numbers have been entered."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param numbers is the hash-map containing all the day numbers."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param number is the current number to check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws RepeatedDayNumberException if a day number is repeated."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private void checkForRepeatedDayNumber(Set\u003cInteger\u003e numbers, int number) throws RepeatedDayNumberException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (numbers.contains(number)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            logger.log(Level.WARNING, \"Day number entered more than once\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new RepeatedDayNumberException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses user input and constructs an NewItineraryCommand object."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return NewItineraryCommand object."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If NewItineraryCommand object cannot be created from user input."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command parse() throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String[] itineraryDetails \u003d input.substring(\"newItinerary\".length()).strip().split(\" \");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(itineraryDetails[ZERO].strip());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(itineraryDetails[ONE].strip());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String name \u003d itineraryDetails[TWO].strip();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Itinerary itinerary \u003d new Itinerary(start, end, name);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        itinerary.checkValidDate();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        logger.log(Level.FINE, \"Entered Dates are valid!\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cAgenda\u003e agendaList \u003d getAgendaList(itineraryDetails);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        itinerary.setTasks(agendaList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new NewItineraryCommand(itinerary);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 120,
      "Inno97": 6,
      "Jefferson111": 34
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/DeleteParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for DeleteCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class DeleteParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the DeleteParser."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DeleteParser(String input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input and constructs DeleteCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return DeleteCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If DeleteCommand object cannot be created."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command parse() throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int index \u003d ParserUtil.getIntegerIndexInList(ZERO, ONE, input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new DeleteCommand(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 3,
      "hongchuan97": 16,
      "Jefferson111": 16
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/DoneParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.MarkDoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for DoneCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class DoneParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the DoneParser."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DoneParser(String input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input and constructs DoneCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return DoneCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If DoneCommand object cannot be created."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command parse() throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int index \u003d ParserUtil.getIntegerIndexInList(ZERO, ONE, input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new MarkDoneCommand(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 3,
      "hongchuan97": 16,
      "Jefferson111": 16
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/FindParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for FindCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class FindParser extends CommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the FindParser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FindParser(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        keyword \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input and constructs FindCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return FindCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command parse() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new FindCommand(keyword);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 3,
      "hongchuan97": 18,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/GetBusRouteParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.GetBusRouteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for GetBusRouteCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class GetBusRouteParser extends CommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String busServiceNo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the GetBusRouteParser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public GetBusRouteParser(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        busServiceNo \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input and constructs GetBusRouteCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return GetBusRouteCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command parse() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new GetBusRouteCommand(busServiceNo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 3,
      "hongchuan97": 18,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/GetBusStopParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.GetBusStopCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for GetBusStopCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class GetBusStopParser extends CommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String busStopNo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the GetBusStopParser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public GetBusStopParser(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        busStopNo \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input and constructs GetBusStopCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return GetBusStopCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command parse() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new GetBusStopCommand(busStopNo);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 3,
      "hongchuan97": 19,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/ListItineraryParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.logic.commands.ListItineraryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Parses the user inputs into suitable format for ListItineraryCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class ListItineraryParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Constructs the ListItineraryParser."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public ListItineraryParser(String input) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Parses user input and constructs an NewItineraryCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return NewItineraryCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws ParseException If NewItineraryCommand object cannot be created from user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Command parse() throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (input.contains(\" \")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new ParseException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            return new ListItineraryCommand();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 37
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/LocationSearchParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.LocationSearchCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for LocationSearchCommand."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LocationSearchParser extends CommandParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the LocationSearchParser."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public LocationSearchParser(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        location \u003d input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input and constructs LocationSearchCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return LocationSearchCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public LocationSearchCommand parse() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new LocationSearchCommand(location);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 3,
      "hongchuan97": 18,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/ProfileAddParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ChronologyAfterPresentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.ProfileAddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for AddProfileCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ProfileAddParser extends CommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the AddProfileParser."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ProfileAddParser(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses user input and constructs an AddProfileCommand object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return AddProfileCommand object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If AddProfileCommand object cannot be created from user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command parse() throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String[] token \u003d input.split(\" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (int i \u003d ZERO; i \u003c token.length - ONE; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            name +\u003d token[i] + \" \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime birthday \u003d ParserTimeUtil.parseStringToDate(token[token.length - ONE]);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (birthday.isAfter(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            throw new ChronologyAfterPresentException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new ProfileAddCommand(name, birthday);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 3,
      "hongchuan97": 23,
      "Jefferson111": 21
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/ProfileSetParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.commands.ProfileSetPreferenceCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the input in to suitable parts for ProfileSetPreferenceCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ProfileSetParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs the ProfileSetParser."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ProfileSetParser(String input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses the input in to suitable parts for ProfileSetPreferenceCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return The constructed ProfileSetPreferenceCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @throws ParseException If there is a error in input."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String category \u003d ParserUtil.getFieldInList(ZERO, TWO, input);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String setting \u003d ParserUtil.getFieldInList(ONE, TWO, input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new ProfileSetPreferenceCommand(category, setting);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 36
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/PromptParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.PromptCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Parser for a prompt command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class PromptParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the PromptCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param prompt The prompt as a String."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The PromptCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Command parseCommand(String prompt) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new PromptCommand(prompt);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 7,
      "Jefferson111": 13
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/QuickEditParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.QuickEditCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Parses the user inputs into suitable format for QuickEditCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class QuickEditParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int THREE \u003d 3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int FOUR \u003d 4;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the QuickEditParser."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public QuickEditParser(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input and constructs QuickEditCommand object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return QuickEditCommand object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If QuickEditCommand object cannot be created."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command parse() throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int index \u003d ParserUtil.getIntegerIndexInList(ZERO, FOUR, input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String firstField \u003d ParserUtil.getFieldInList(ONE, FOUR, input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String secondField \u003d ParserUtil.getFieldInList(TWO, FOUR, input);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String thirdField \u003d ParserUtil.getFieldInList(THREE, FOUR, input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new QuickEditCommand(index, firstField, secondField, thirdField);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 12,
      "Jefferson111": 30
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/RecommendationParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RecommendationsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RecommendationsCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RecommendationParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int THREE \u003d 3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the RecommendationParser."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public RecommendationParser(String input) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns a String[] containing start and end dates."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The Itinerary object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If Itinerary object cannot be created."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String[] createRecommendation() throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String[] itineraryDetails \u003d input.substring(\"recommend\".length()).strip().split(\"between|and\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (itineraryDetails.length !\u003d THREE || itineraryDetails[ONE] \u003d\u003d null || itineraryDetails[TWO] \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ParseException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (!itineraryDetails[ZERO].equals(\"itinerary \")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new ParseException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return itineraryDetails;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input and constructs RecommendationCommand object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return RecommendationCommand object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If RecommendationCommand object cannot be created."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command parse() throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String[] recommendationDetails \u003d createRecommendation();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new RecommendationsCommand(recommendationDetails);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 8,
      "Inno97": 3,
      "hongchuan97": 24,
      "Jefferson111": 23
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/RouteAddParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RouteAddCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RouteAddCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RouteAddParser extends CommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the RouteAddParser."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public RouteAddParser(String input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input and constructs RouteAddCommand object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The RouteAddCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String[] details \u003d input.split(\"desc\", TWO);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (details.length \u003d\u003d TWO) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new RouteAddCommand(details[ZERO], details[ONE]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new RouteAddCommand(details[ZERO], \"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 4,
      "hongchuan97": 19,
      "Jefferson111": 15
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/RouteDeleteParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RouteDeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RouteDeleteCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RouteDeleteParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the RouteDeleteParser."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public RouteDeleteParser(String input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input and constructs RouteDeleteCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The RouteDeleteCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If RouteDeleteCommand object cannot be created."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command parse() throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int index \u003d ParserUtil.getIntegerIndexInList(ZERO, ONE, input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new RouteDeleteCommand(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 4,
      "hongchuan97": 17,
      "Jefferson111": 15
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/RouteEditParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RouteEditCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RouteEditCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RouteEditParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int THREE \u003d 3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the RouteEditParser."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public RouteEditParser(String input) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input and constructs RouteEditCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The RouteEditCommand object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If RouteEditCommand object cannot be created."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command parse() throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int firstIndex \u003d ParserUtil.getIntegerIndexInList(ZERO, THREE, input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String firstEventIndex \u003d ParserUtil.getFieldInList(ONE, THREE, input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String secondEventIndex \u003d ParserUtil.getFieldInList(TWO, THREE, input);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new RouteEditCommand(firstIndex, firstEventIndex, secondEventIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 4,
      "hongchuan97": 17,
      "Jefferson111": 19
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/RouteGenerateParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RouteGenerateCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Parses the user inputs into suitable format for RouteGenerateCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class RouteGenerateParser extends CommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int THREE \u003d 3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String BUS_CONSTRAINT \u003d \"BUS\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the RouteGenerateParser."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public RouteGenerateParser(String input) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input and constructs RouteGenerateCommand object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The RouteGenerateCommand object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If RouteGenerateCommand object cannot be created."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command parse() throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String[] details \u003d input.split(\" to | by \", THREE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (details.length \u003d\u003d THREE) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (BUS_CONSTRAINT.equals(details[TWO].toUpperCase())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    return new RouteGenerateCommand(details[ZERO], details[ONE],"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                            Constraint.valueOf(details[TWO].toUpperCase()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    throw new ParseException(Messages.ERROR_CONSTRAINT_UNKNOWN);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                throw new ParseException(Messages.ERROR_CONSTRAINT_UNKNOWN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        throw new ParseException(Messages.ERROR_FIELDS_EMPTY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 9,
      "Jefferson111": 43
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/RouteListParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RouteListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RouteListCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RouteListParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the RouteListParser."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public RouteListParser(String input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input and constructs RouteListCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The RouteListCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If RouteListCommand object cannot be created."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command parse() throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int index \u003d ParserUtil.getIntegerIndexInList(ZERO, ONE, input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new RouteListCommand(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 4,
      "hongchuan97": 17,
      "Jefferson111": 15
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/RouteNodeAddParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.exceptions.NullResultException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.logic.api.requests.LocationSearchRequest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.logic.api.requests.LocationSearchUrlRequest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RouteNodeAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.model.locations.CustomNode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.RouteNode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.TrainStation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RouteNodeAddCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RouteNodeAddParser extends CommandParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int FOUR \u003d 4;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the RouteNodeAddParser."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public RouteNodeAddParser(String input) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses user input and constructs a new RouteNode object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The RouteNode object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If RouteNode object cannot be created from user input."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws NullResultException If the result cannot be found."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static RouteNode createRouteNode(String userInput) throws ParseException, NullResultException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String[] withinDetails \u003d userInput.strip().split(\"at\", TWO);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (withinDetails.length !\u003d TWO) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                throw new ParseException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            String type \u003d userInput.substring(withinDetails[ZERO].length()).strip().substring(ZERO, FOUR);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (!\"at\".equals(type.substring(ZERO, TWO))) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                throw new ParseException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (type.substring(ZERO, TWO).equals(\"at\")) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return getRouteNode(withinDetails[ONE]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException | ApiException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new ParseException(Messages.ERROR_OBJECT_NOT_CREATED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new ParseException(Messages.ERROR_OBJECT_NOT_CREATED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the RouteNode from the details."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The parsed input."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The RouteNode created."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ParseException If the parsing fails."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws NullResultException If the result cannot be found."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static RouteNode getRouteNode(String input) throws ParseException, NullResultException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String[] details;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        details \u003d input.strip().split(\"by \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (details[ONE].toUpperCase()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"BUS\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new BusStop(details[ZERO].strip(), null, null, ZERO, ZERO);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"MRT\":"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new TrainStation(new ArrayList\u003c\u003e(), details[ZERO].strip(), null, ZERO, ZERO);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"CUSTOM\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return createCustomNode(details[ZERO].strip());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } catch (ApiException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new NullResultException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ParseException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new CustomNode with either LocationSearchUrlRequest or LocationSearchRequest."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param location The name of the location."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return node The CustomNode object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiException If the CustomNode cannot be created."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static CustomNode createCustomNode(String location) throws ApiException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue venue;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            venue \u003d new LocationSearchUrlRequest(location).execute();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (ApiException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            LocationSearchRequest locationSearchRequest \u003d new LocationSearchRequest();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            venue \u003d locationSearchRequest.search(location);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CustomNode(venue);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input and constructs RouteNodeAddCommand object."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The RouteNodeAddCommand object."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If RouteNodeAddCommand object cannot be created."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws NullResultException If the result cannot be found."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Command parse() throws ParseException, NullResultException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        RouteNode routeNode \u003d createRouteNode(input);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int firstIndex \u003d ParserUtil.getIntegerIndexInList(ZERO, FOUR, input);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new RouteNodeAddCommand(routeNode, firstIndex,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    ParserUtil.getIntegerIndexInList(ONE, FOUR, input), false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new RouteNodeAddCommand(routeNode, firstIndex, ZERO, true);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 63,
      "hongchuan97": 36,
      "Jefferson111": 33
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/RouteNodeDeleteParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RouteNodeDeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RouteNodeDeleteCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RouteNodeDeleteParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the RouteNodeDeleteParser."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public RouteNodeDeleteParser(String input) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input and constructs RouteNodeDeleteCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return RouteNodeDeleteCommand object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If RouteNodeDeleteCommand object cannot be created."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command parse() throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int firstIndex \u003d ParserUtil.getIntegerIndexInList(ZERO, TWO, input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int secondIndex \u003d ParserUtil.getIntegerIndexInList(ONE, TWO, input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new RouteNodeDeleteCommand(firstIndex, secondIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 3,
      "hongchuan97": 17,
      "Jefferson111": 18
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/RouteNodeNeighboursParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.commands.RouteNodeNeighboursCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RouteNodeNeighboursCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RouteNodeNeighboursParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs the RouteNodeNeighboursCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public RouteNodeNeighboursParser(String input) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses the user input and constructs RouteNodeNeighboursCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return RouteNodeNeighboursCommand object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @throws ParseException If RouteNodeNeighboursCommand object cannot be created."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        int firstIndex \u003d ParserUtil.getIntegerIndexInList(ZERO, TWO, input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        int secondIndex \u003d ParserUtil.getIntegerIndexInList(ONE, TWO, input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new RouteNodeNeighboursCommand(firstIndex, secondIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 38
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/RouteNodeShowParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.commands.RouteNodeShowCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RouteNodeShowCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RouteNodeShowParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final int ONE \u003d 1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs the RouteNodeShowCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public RouteNodeShowParser(String input) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses the user input and constructs RouteNodeShowCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return RouteNodeShowCommand object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @throws ParseException If RouteNodeShowCommand object cannot be created."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        int firstIndex \u003d ParserUtil.getIntegerIndexInList(ZERO, TWO, input);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        int secondIndex \u003d ParserUtil.getIntegerIndexInList(ONE, TWO, input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new RouteNodeShowCommand(firstIndex, secondIndex);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 38
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/RouteShowParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.commands.RouteShowCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RouteShowCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RouteShowParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final int ZERO \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final int TWO \u003d 2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs the RouteShowParser."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public RouteShowParser(String input) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses the user input and constructs RouteShowCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return The RouteShowCommand object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @throws ParseException If RouteShowCommand object cannot be created."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        int index \u003d ParserUtil.getIntegerIndexInList(ZERO, TWO, input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new RouteShowCommand(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 36
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/commandparsers/StaticMapParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.commandparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.StaticMapCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for StaticMapCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class StaticMapParser extends CommandParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs the StaticMapParser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public StaticMapParser(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.location \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input and constructs StaticMapCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return StaticMapCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command parse() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new StaticMapCommand(location);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 3,
      "hongchuan97": 19,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/storageparsers/EventStorageParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.storageparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Storage parser for Event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EventStorageParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses a Event from String format back to Event."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param line The String description of an Event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The corresponding Event object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If the data is corrupted."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Event createEventFromStorage(String line) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            String[] eventParts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            String type \u003d eventParts[0].strip();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            String status \u003d eventParts[1].strip();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            String description \u003d eventParts[2].strip();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Event event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            assert (\"E\".equals(type)) : \"There should only be events.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(eventParts[3].strip());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(eventParts[4].strip());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Venue location \u003d getLocationFromStorage(eventParts);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            event \u003d new Event(description, start, end, location);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            event.setDone(\"true\".equals(status));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return event;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ParseException(Messages.ERROR_DATA_CORRUPTED);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses part of an Event back into a Venue object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param taskParts The parts of the Event."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The Venue of the Event."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static Venue getLocationFromStorage(String[] taskParts) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String address \u003d taskParts[5].strip();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double latitude \u003d Double.parseDouble(taskParts[6].strip());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double longitude \u003d Double.parseDouble(taskParts[7].strip());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double distX \u003d Double.parseDouble(taskParts[8].strip());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double distY \u003d Double.parseDouble(taskParts[9].strip());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new Venue(address, latitude, longitude, distX, distY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses an Event from Event to String format."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param event The Event."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The corresponding String format of the task object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static String toStorageString(Event event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return \"E | \" + event.isDone() + \" | \" + event.getDescription() + \" | \" + event.getStartDate()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                + \" | \" + event.getEndDate() + \" | \" + event.getLocation();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 65
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/storageparsers/PlanningStorageParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.storageparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.AddListFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.model.planning.Agenda;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Storage parser for plannings."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class PlanningStorageParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses a String into a Venue object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param line The String input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The Venue object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If the data is corrupted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Venue getVenueFromStorage(String line) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            String[] taskParts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            String address \u003d taskParts[0].strip();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            double latitude \u003d Double.parseDouble(taskParts[1].strip());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            double longitude \u003d Double.parseDouble(taskParts[2].strip());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            double distX \u003d Double.parseDouble(taskParts[3].strip());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            double distY \u003d Double.parseDouble(taskParts[4].strip());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new Venue(address, latitude, longitude, distX, distY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ParseException(Messages.ERROR_DATA_CORRUPTED);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Parses a String into a todo list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param line The string containing the todo list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The List of todo\u0027s."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static List\u003cTodo\u003e getTodoListFromStorage(String line) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        List\u003cTodo\u003e todoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String[] todoParts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (String todoPart : todoParts) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Todo todo \u003d new Todo(todoPart);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            todoList.add(todo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return todoList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns the new name of a recently added recommendation."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param line The string containing the new name."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return result The new name of the recommendation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static String getNewAddListName(String line) throws AddListFailException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String[] todoParts \u003d line.split(\" \");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (int i \u003d 1; i \u003c todoParts.length; i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            if (i \u003d\u003d todoParts.length - 1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                stringBuilder.append(todoParts[i]);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                stringBuilder.append(todoParts[i]).append(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String result \u003d stringBuilder.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Converts the itinerary into a storage friendly string format."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return itineraryString The itinerary object converted to a storage string"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static String toItineraryStorageString(Itinerary value) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        StringBuilder itineraryString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        itineraryString.append(value.getName()).append(\"\\n\").append(value.getStartDate().toString()).append(\"\\n\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                .append(value.getEndDate().toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (Agenda agenda : value.getList()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            itineraryString.append(agenda.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        itineraryString.append(\"\\n\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return itineraryString.toString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 42,
      "Jefferson111": 47
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/storageparsers/ProfileStorageParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.storageparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.NoSuchCategoryException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.profile.ProfileCard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Storage parser for Profile."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ProfileStorageParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Updates the profile with data from the storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param profileCard The profileCard to be updated."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param line The String description of a profile."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If the data is corrupted."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static void createProfileFromStorage(ProfileCard profileCard, String line)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            String[] token \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            switch (token[0].strip()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            case \"person\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                profileCard.setPerson(token[1].strip(), ParserTimeUtil.parseStringToDate(token[2].strip()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            case \"preference\":"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                String[] category \u003d {\"\", \"sports\", \"entertainment\", \"arts\", \"lifestyle\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                for (int i \u003d 1; i \u003c token.length; i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        profileCard.setPreference(category[i], token[i].strip().equals(\"true\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    } catch (NoSuchCategoryException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        throw new ParseException(Messages.ERROR_DATA_CORRUPTED);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ParseException(Messages.ERROR_DATA_CORRUPTED);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses a ProfileCard to String format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param profileCard The profileCard."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return profileString The corresponding String format of the profileCard object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static String toProfileStorageString(ProfileCard profileCard) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String profileString \u003d \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        profileString +\u003d \"person | \" + profileCard.getPersonName() + \" | \" + profileCard.getPersonBirthday() + \"\\n\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        profileString +\u003d \"preference\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Boolean i : profileCard.getPreference()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            profileString +\u003d \" | \" + i;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        profileString +\u003d \"\\n\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return profileString;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 62
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/parsers/storageparsers/TransportStorageParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.storageparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.enumerations.Direction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.RouteNode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.TrainStation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.BusService;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Storage parser for the Transports."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class TransportStorageParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses a train station from String format back to Train."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param line The String description of a train station."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The corresponding Train object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static TrainStation createTrainFromStorage(String line) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String[] trainParts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String address \u003d trainParts[0].strip();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double longitude \u003d Double.parseDouble(trainParts[2].strip());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double latitude \u003d Double.parseDouble(trainParts[1].strip());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ArrayList\u003cString\u003e trainCode \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (int i \u003d 3; i \u003c trainParts.length; i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            trainCode.add(trainParts[i].strip());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new TrainStation(trainCode, null, address, latitude, longitude);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses a bus from String format back to BusService."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param line The String description of a bus."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return The corresponding BusService object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static BusService createBusFromStorage(String line) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String[] busData \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Direction direction \u003d Direction.FORWARD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusService busService \u003d new BusService(busData[0].strip());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (int i \u003d 1; i \u003c busData.length; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            String buffer \u003d busData[i].strip();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (\"change\".equals(buffer)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                direction \u003d Direction.BACKWARD;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            busService.addRoute(buffer, direction);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return busService;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses a bus stop from String format back to BusStop."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param line The String description of a bus stop."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The corresponding BusStop object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static BusStop createBusStopDataFromStorage(String line) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String[] busStopData \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String busCode \u003d busStopData[0].strip();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String address \u003d busStopData[1].strip();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String description \u003d busStopData[2].strip();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double latitude \u003d Double.parseDouble(busStopData[3].strip());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double longitude \u003d Double.parseDouble(busStopData[4].strip());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        BusStop busStop \u003d new BusStop(busCode, address, description, latitude, longitude);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (int i \u003d 5; i \u003c busStopData.length; i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            busStop.addBuses(busStopData[i].strip());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return busStop;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Parses a route node from String format back to a route node."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param line The String description of a route node."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The corresponding RouteNode object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If data is corrupted."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static RouteNode createNodeFromStorage(String line) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String[] details \u003d line.split(\"\\\\|\", 7);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            switch (details[1].strip()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            case \"BUS\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return new BusStop(details[2].strip(), details[3].strip(), details[4].strip(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        Double.parseDouble(details[5].strip()), Double.parseDouble(details[6].strip()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            case \"MRT\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                return new TrainStation(new ArrayList\u003c\u003e(), details[3].strip(), details[4].strip(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        Double.parseDouble(details[5].strip()), Double.parseDouble(details[6].strip()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                throw new ParseException(Messages.ERROR_DATA_CORRUPTED);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ParseException(Messages.ERROR_DATA_CORRUPTED);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses a route from String format back to route."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param line The String description of a route."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The corresponding Route object."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ParseException If data is corrupted."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Route createRouteFromStorage(String line) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            String[] details \u003d line.split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new Route(new ArrayList\u003c\u003e(), details[1].strip(), details[2].strip());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new ParseException(Messages.ERROR_DATA_CORRUPTED);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses a route with its nodes from routes to String format."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param route The route."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return routeString The corresponding String format of the route object."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static String toRouteStorageString(Route route) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String routeString \u003d \"\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        routeString +\u003d \"route | \" + route.getName() + \" | \" + route.getDescription() + \"\\n\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (RouteNode node: route.getNodes()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (node instanceof BusStop) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                routeString +\u003d \"node | BUS | \" + ((BusStop) node).getBusCode() + \" | \" + node.getAddress() + \" | \""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        + node.getDescription() + \" | \" + node.getLatitude() + \" | \" + node.getLongitude() + \"\\n\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            } else if (node instanceof TrainStation) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                routeString +\u003d \"node | MRT | \" + ((TrainStation) node).getTrainCodes() + \" | \" + node.getAddress()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        + \" | \" + node.getDescription() + \" | \" + node.getLatitude() + \" | \" + node.getLongitude()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        + \"\\n\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return routeString;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 10,
      "Inno97": 18,
      "hongchuan97": 30,
      "Jefferson111": 79
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/selectors/EventFieldSelector.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EventFieldSelector implements Selector {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int FIELD_SIZE \u003d 3;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int index \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void feedKeyCode(KeyCode keyCode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (keyCode.equals(KeyCode.DOWN)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (keyCode.equals(KeyCode.UP)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            index--;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            index +\u003d FIELD_SIZE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        index %\u003d FIELD_SIZE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 24
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/selectors/LocationHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Helper class to check the relationship between 2 Venues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LocationHelper {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Checks if the one venue is above/below/left/right of another venue."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param keyCode The keyCode to decide up/down/left/right."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param currentVenue The current venue."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param v The other venue."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return true if v is indeed above/below/left/right of currentVenue."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static boolean checkDirection(KeyCode keyCode, Venue currentVenue, Venue v) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (keyCode.equals(KeyCode.UP)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return isUp(currentVenue, v);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (keyCode.equals(KeyCode.DOWN)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return isDown(currentVenue, v);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (keyCode.equals(KeyCode.LEFT)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return isLeft(currentVenue, v);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return isRight(currentVenue, v);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static boolean isRight(Venue currentVenue, Venue v) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return v.getLongitude() \u003e\u003d currentVenue.getLongitude();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static boolean isLeft(Venue currentVenue, Venue v) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return v.getLongitude() \u003c\u003d currentVenue.getLongitude();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static boolean isDown(Venue currentVenue, Venue v) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return v.getLatitude() \u003c\u003d currentVenue.getLatitude();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Checks if v is above currentVenue."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static boolean isUp(Venue currentVenue, Venue v) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return v.getLatitude() \u003e\u003d currentVenue.getLatitude();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 48
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/selectors/LocationSelector.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.EmptyVenueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.VenueList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Iterates through locations using proximity of Venue via arrow keys."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LocationSelector implements Selector {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private VenueList venues;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isLock;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs a new Location Selector object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param venues The venues to be iterated through."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws EmptyVenueException If there is no venues in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public LocationSelector(VenueList venues) throws EmptyVenueException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (venues.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new EmptyVenueException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venues \u003d venues;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        index \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isLock \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Feeds key event to location selector to determine the next location selected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param keyCode The keyCode of the key pressed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void feedKeyCode(KeyCode keyCode) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isLock) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (keyCode.equals(KeyCode.ENTER)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            lock();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (keyCode.isArrowKey()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            index \u003d find(keyCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Finds the next nearest Venue given the KeyCode."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param keyCode KeyCode indicating up/down/left/right."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The index of the nearest Venue in the given keycode direction."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int find(KeyCode keyCode) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Venue currentVenue \u003d venues.get(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double min \u003d Double.POSITIVE_INFINITY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int nextIndex \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (int i \u003d 0; i \u003c venues.size(); ++i) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (i \u003d\u003d index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Venue v \u003d venues.get(i);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (LocationHelper.checkDirection(keyCode, currentVenue, v)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u0026\u0026 v.getDistance(currentVenue) \u003c min) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                nextIndex \u003d i;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                min \u003d v.getDistance(currentVenue);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return nextIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Locks the Location Selector."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void lock() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isLock \u003d true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Unlocks the Location Selector."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void unlock() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isLock \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isLock() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isLock;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 94
    }
  },
  {
    "path": "src/main/java/sgtravel/logic/selectors/Selector.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * The API of selectors."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public interface Selector {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    int getIndex();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void feedKeyCode(KeyCode keyCode);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 12
    }
  },
  {
    "path": "src/main/java/sgtravel/model/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.api.ApiParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents an event occurring at a particular venue between a certain time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Event extends TaskWithDates implements Serializable {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Initializes a event task with location."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param locationDescription A description of this task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startDate Starting date of task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endDate Ending date of task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Event(String locationDescription, LocalDateTime startDate, LocalDateTime endDate) throws ApiException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(locationDescription, startDate, endDate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venue \u003d ApiParser.getLocationSearch(locationDescription);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Initializes a event task from persistent storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param locationDescription A description of this task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startDate Starting date of task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endDate Ending date of task."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param venue location of the holiday object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Event(String locationDescription, LocalDateTime startDate, LocalDateTime endDate, Venue venue) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(locationDescription, startDate, endDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Converts the Event to a String."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The Event as a String."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return \"[E]\" + super.toString() + \" between \" + ParserTimeUtil.stringify(getStartDate())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                + \" and \" + ParserTimeUtil.stringify(getEndDate());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the Venue of the event."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Venue getLocation() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (venue !\u003d null) : \"Event can only be created with a venue\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setLocation(Venue venue) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns whether this Event is the same as another Event."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param otherTask The other Event."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If the Events are the same."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 ((Event) otherTask).getLocation().equals(getLocation());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 16,
      "hongchuan97": 2,
      "Jefferson111": 59
    }
  },
  {
    "path": "src/main/java/sgtravel/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.AddListFailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.NoRecentItineraryException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.NoSuchItineraryException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.RouteList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.VenueList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Recommendation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.profile.ProfileCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.TransportationMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Interface which grants other components access to information from persistent storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the list of Events."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The list of Events."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    EventList getEvents();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Replaces the events of this model with the new one."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param events The new events."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setEvents(EventList events);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns map object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The Map object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    TransportationMap getMap();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the map of all bus stops."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The HashMap of bus stops."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    HashMap\u003cString, BusStop\u003e getBusStops();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the list of Routes."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The list of Routes."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    RouteList getRoutes();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets a specified Route."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the Route."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The Route at the index."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    Route getRoute(int index) throws OutOfBoundsException;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a route to the list of routes."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The route to add."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void addRoute(Route route) throws DuplicateRouteException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Saves the Model data in storage."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void save() throws FileNotSavedException;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns a list of event venues."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The list of Events."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    VenueList getEventVenues();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets an itinerary with the given name."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param name The serial number of the Itinerary."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The itinerary."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    Itinerary getItinerary(String name);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns the recommendation list object."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The requested recommendations list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    Recommendation getRecommendations();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns the itinerary hash-map keyed by their names."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The list of saved itineraries."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    HashMap\u003cString,Itinerary\u003e getItineraryTable();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Saves the most recent recommendation."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param itinerary The recent recommendation."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void setRecentItinerary(Itinerary itinerary) throws AddListFailException;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns the recently recommended itinerary."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The recent recommendation."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    Itinerary getRecentItinerary() throws NoRecentItineraryException;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Stores a new itinerary to storage."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param itinerary The itinerary to be saved."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void setNewItinerary(Itinerary itinerary) throws ParseException;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Stores recently recommended itinerary."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param newName The new name for the itinerary."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void confirmRecentItinerary(String newName) throws AddListFailException;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Deletes the requested itinerary from storage."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param name The name of the itinerary to be \"done\" (deleted)."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void doneItinerary(String name) throws NoSuchItineraryException;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Returns profile of user."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The profile of user."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    ProfileCard getProfileCard();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Returns name of the user."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The name of the user."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    String getName();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds an Itinerary to the favourites."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param name The name of the Itinerary."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param itinerary The Itinerary."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws NoSuchItineraryException If there Itinerary does not exist."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    void addToFavourite(String name, Itinerary itinerary) throws NoSuchItineraryException;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Deletes a favourite Itinerary."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param name The name of the Itinerary."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws NoSuchItineraryException If the Itinerary cannot be found."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    void deleteFavourite(String name) throws NoSuchItineraryException;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 31,
      "Inno97": 88,
      "hongchuan97": 21,
      "Jefferson111": 37
    }
  },
  {
    "path": "src/main/java/sgtravel/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.AddListFailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.NoRecentItineraryException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.NoSuchItineraryException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.RouteList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.VenueList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Recommendation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.profile.ProfileCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.TransportationMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Implements the methods defined in the Model Interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private RouteList routes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private TransportationMap map;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ProfileCard profileCard;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Recommendation recommendations;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private HashMap\u003cString, Itinerary\u003e itineraryTable;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Itinerary recentItinerary;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs a new ModelManager object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events \u003d storage.getEvents();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        map \u003d storage.getMap();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routes \u003d storage.getRoutes();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        profileCard \u003d storage.getProfileCard();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        recommendations \u003d storage.getRecommendations();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        itineraryTable \u003d storage.getItineraryTable();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns name of the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The name of the user."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return profileCard.getPersonName();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds an Itinerary to the profile card."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param name The name of the Itinerary."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param itinerary The Itinerary."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws NoSuchItineraryException If the Itinerary does not exist."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void addToFavourite(String name, Itinerary itinerary) throws NoSuchItineraryException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (itinerary \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            throw new NoSuchItineraryException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        profileCard.addFavourite(name, itinerary);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Deletes the Itinerary from the profile card."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param name The name of the Itinerary."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws NoSuchItineraryException If the Itinerary does not exist."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void deleteFavourite(String name) throws NoSuchItineraryException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        profileCard.deleteFavourite(name);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the TransportationMap."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The TransportationMap."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public TransportationMap getMap() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the list of Events."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return events The list of Events."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventList getEvents() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Replaces the Events of this model with the new one."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param events The new Events."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setEvents(EventList events) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the list of Routes."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return routes The list of Routes."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteList getRoutes() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return routes;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets a specified Route."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the Route."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The Route at the index."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Route getRoute(int index) throws OutOfBoundsException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return routes.get(index);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new OutOfBoundsException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the map of all bus stops."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The HashMap of all bus stops."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public HashMap\u003cString, BusStop\u003e getBusStops() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return map.getBusStopMap();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns the recommendation list object."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return recommendations The requested recommendations list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Recommendation getRecommendations() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return recommendations;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns the itinerary hash-map keyed by their names."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return itineraryTable The list of saved itineraries."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public HashMap\u003cString, Itinerary\u003e getItineraryTable() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return itineraryTable;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Deletes the requested itinerary from storage."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param name The name of the itinerary to be \"done\" (deleted)."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws NoSuchItineraryException If the Itinerary does not exist."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void doneItinerary(String name) throws NoSuchItineraryException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (itineraryTable.get(name) \u003d\u003d null) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new NoSuchItineraryException();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.itineraryTable.remove(name);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Saves the most recent recommendation."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param recentItinerary The recent recommendation."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setRecentItinerary(Itinerary recentItinerary) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.recentItinerary \u003d recentItinerary;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns the \"recently recommended itinerary\"."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return recentItinerary The recent recommendation."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws NoRecentItineraryException If there is no recently added Itinerary."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Itinerary getRecentItinerary() throws NoRecentItineraryException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (recentItinerary \u003d\u003d null) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new NoRecentItineraryException();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return recentItinerary;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Stores a new itinerary to storage."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param itinerary The itinerary to be saved."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setNewItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.itineraryTable.put(itinerary.getName(), itinerary);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Stores the \"recently recommended itinerary\" into storage."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param name The new name for the itinerary list."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws AddListFailException If the Itinerary fails to be added."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void confirmRecentItinerary(String name) throws AddListFailException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (\"\".equals(name)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new AddListFailException();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        recentItinerary.setName(name);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.itineraryTable.put(name, recentItinerary);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the VenueList of events."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The VenueList of events."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public VenueList getEventVenues() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new VenueList(events);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the ProfileCard."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return profileCard The ProfileCard."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public ProfileCard getProfileCard() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return profileCard;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Shows the Itinerary specified by a give name."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param name The serial number of the Itinerary."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Itinerary getItinerary(String name) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return itineraryTable.get(name);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a route to the list of routes."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The route to add."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void addRoute(Route route) throws DuplicateRouteException {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routes.add(route);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Saves the file to local storage."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void save() throws FileNotSavedException {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        storage.write();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 78,
      "Inno97": 122,
      "hongchuan97": 31,
      "Jefferson111": 50
    }
  },
  {
    "path": "src/main/java/sgtravel/model/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a generic task, which can be marked as done."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Task implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a task not yet done with the given description."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description A description of this task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Sets the description of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param description The new description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the description associated with this task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This task\u0027s description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the status of the task, true/false."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True/false."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets this task as done or undone."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both tasks are the same."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string representation of this task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The desired string representation."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"[✓] \" : \"[✘] \") + description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "-": 63,
      "Jefferson111": 14
    }
  },
  {
    "path": "src/main/java/sgtravel/model/TaskWithDates.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents Tasks with a date field."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class TaskWithDates extends Task implements Serializable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private LocalDateTime startDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private LocalDateTime endDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs a TaskWithDates object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param startDate The start date of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param endDate The end date of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected TaskWithDates(String description, LocalDateTime startDate, LocalDateTime endDate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setStartDate(LocalDateTime startDate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public LocalDateTime getEndDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setEndDate(LocalDateTime endDate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 otherTask instanceof TaskWithDates"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 ((TaskWithDates) otherTask).getStartDate().isEqual(getStartDate())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 ((TaskWithDates) otherTask).getEndDate().isEqual(getEndDate());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Jefferson111": 54
    }
  },
  {
    "path": "src/main/java/sgtravel/model/lists/EventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.TaskWithDates;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a list of Events and contains its related accessor methods."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EventList implements Iterable\u003cEvent\u003e, Listable\u003cEvent\u003e, Serializable {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private List\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the empty EventList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public EventList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor given a List of Events."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param events The List of Events."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds an Event to the VenueList."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param event The Event to add."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void add(Event event) throws DuplicateTaskException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (contains(event)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Removes a Event from the VenueList at a given index."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the Event."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws OutOfBoundsException If the index is out of bounds."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Event remove(int index) throws OutOfBoundsException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return events.remove(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new OutOfBoundsException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sorts the List of Events based on date."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        events.sort(Comparator.comparing(TaskWithDates::getStartDate)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                .thenComparing(TaskWithDates::getEndDate));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the Event at a given index."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index to search for."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The Event at the index."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws IndexOutOfBoundsException If the index is out of bounds."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Event get(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return events.get(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns a shallow copy of the sorted EventList."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The sorted EventList."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventList getSortedList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new EventList(events.stream().sorted("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                Comparator.comparing(TaskWithDates::getStartDate)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        .thenComparing(TaskWithDates::getEndDate)).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the contents of this list with a given list of events."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param events The List of Events to set to."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws DuplicateTaskException If there is a duplicate Event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) throws DuplicateTaskException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns if the EventList is empty."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true if the EventList is empty."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return events.isEmpty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the size of the EventList."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The size of the EventList."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return events.size();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns if a given Event is in the EventList."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param event The given Event to check."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If the Event is already inside."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean contains(Event event) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return events.stream().anyMatch(event::isSameTask);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns true if all Events in list are unique."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param events The Events to check."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If the Events are unique."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (events.get(i).isSameTask(events.get(j))) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns true if all Events are unique."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If all Events are unique."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isUnique() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return eventsAreUnique(events);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns an iterator to the list of events."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The iterator to the list of events."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return events.iterator();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 114,
      "Jefferson111": 58
    }
  },
  {
    "path": "src/main/java/sgtravel/model/lists/Listable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Interface which models a List of planning objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "interface Listable\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds an item to the List."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param item The item to add."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws DukeException if there is an error in adding."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void add(T item) throws DukeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the item at a given index."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index to search for."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The item at the given index."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws IndexOutOfBoundsException If the index is out of bounds."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    T get(int index) throws IndexOutOfBoundsException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns whether the List is empty."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If the List is empty."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    boolean isEmpty();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns whether an item is inside the List."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param item The item to check for."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If the item exists."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    boolean contains(T item);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the size of the List."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The size of the List."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    int size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 2,
      "Inno97": 44,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/sgtravel/model/lists/RouteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Represents a list of Routes and contains its related accessor methods.."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteList implements Iterable\u003cRoute\u003e, Listable\u003cRoute\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private List\u003cRoute\u003e list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs an empty RouteList object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a unique Route to the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param toAdd the Route to add."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @exception DuplicateRouteException If there is a duplicate route."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void add(Route toAdd) throws DuplicateRouteException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DuplicateRouteException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list.add(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the Route at a given index."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index to search for."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The Route at the index."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws IndexOutOfBoundsException If the index is out of bounds."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Route get(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Removes an existing Route from the list and returns it."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the Route."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return route The queried Route."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception IndexOutOfBoundsException If the query is out of bound."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Route remove(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.remove(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public List\u003cRoute\u003e getRoutes() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Replaces the contents of this list with a list of Routes."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param routes The list of Routes to replace."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @exception DuplicateRouteException If there is a duplicate route."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setRoutes(List\u003cRoute\u003e routes) throws DuplicateRouteException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (!isUniqueRoutes(routes)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DuplicateRouteException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list \u003d routes;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the size of the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Size of list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns if a given Route is in the RouteList."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The given Route to check."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If the Route is already inside."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean contains(Route route) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.stream().anyMatch(route::isSameRoute);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns whether the list is empty."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If the list is empty."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.isEmpty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks if an object is equal to this."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param other The other object."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If this object is equal to the other object."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                || (other instanceof RouteList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                \u0026\u0026 list.equals(((RouteList) other).list));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the hash code of the list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The hash code of the list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.hashCode();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns true if all Routes in list are unique."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param routes The routes to check."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If the routes are unique."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private boolean isUniqueRoutes(List\u003cRoute\u003e routes) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (int i \u003d 0; i \u003c routes.size() - 1; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (int j \u003d i + 1; j \u003c routes.size(); j++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (routes.get(i).isSameRoute(routes.get(j))) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns an iterator to the list of Routes."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The iterator to the list of Routes."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Iterator\u003cRoute\u003e iterator() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.iterator();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Inno97": 150,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/sgtravel/model/lists/VenueList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Represents a list of Venues (Locations) and contains its related accessor methods.."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class VenueList implements Iterable\u003cVenue\u003e, Listable\u003cVenue\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private List\u003cVenue\u003e list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a blank VenueList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public VenueList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor given a List of Venues."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param venueList The List of Venues."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public VenueList(List\u003cVenue\u003e venueList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list \u003d venueList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor given a list of events."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param events The EventListt."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public VenueList(EventList events) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event e : events) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            list.add(e.getLocation());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a Venue to the VenueList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param venue The Venue to add."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void add(Venue venue) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list.add(venue);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Removes a Venue from the VenueList at a given index."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the venue."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws IndexOutOfBoundsException If the index is out of bounds."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void remove(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the Venue at a given index."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index to search for."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The Venue at the index."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws IndexOutOfBoundsException If the index is out of bounds."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Venue get(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public List\u003cVenue\u003e getVenueList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setVenue(int index, Venue venue) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list.set(index, venue);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns if the VenueList is empty."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true if the VenueList is empty."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.isEmpty();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the size of the VenueList."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The size of the VenueList."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns if a given Venue is in the VenueList."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param venue The given Venue to check."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If the Venue is already inside."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean contains(Venue venue) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.contains(venue);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns an iterator to the List of Venues."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The iterator to the List of Venues."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Iterator\u003cVenue\u003e iterator() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.iterator();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 4,
      "Inno97": 113,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/java/sgtravel/model/locations/BusStop.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.model.transports.TransportationMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a bus stop."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class BusStop extends RouteNode {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String busCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Set\u003cString\u003e buses;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a BusStop object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busCode The bus code."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param address The address."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The description."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public BusStop(String busCode, String address, String description, double latitude, double longitude) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Constraint.valueOf(\"BUS\"), address, description, latitude, longitude);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.busCode \u003d busCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.buses \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor which automatically uses fetchData()."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busCode The bus code."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public BusStop(String busCode, Model model) throws QueryFailedException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Constraint.valueOf(\"BUS\"), \"\", \"\", 0, 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.busCode \u003d busCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        fetchData(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the Set of bus services of the bus stop in String."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return buses The Set of bus services in String."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Set\u003cString\u003e getBuses() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return buses;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the bus code of the Bus Stop in String."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return busCode The bus code of the bus stop in String."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getBusCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return busCode;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a bus service in the form of a String to buses."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param bus The bus to add."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void addBuses(String bus) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        buses.add(bus);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Fetches data from model and updates the bus stop."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryFailedException If the bus stop is not found."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void fetchData(Model model) throws QueryFailedException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        TransportationMap map \u003d model.getMap();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        HashMap\u003cString, BusStop\u003e allBus \u003d map.getBusStopMap();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (allBus.containsKey(busCode)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            BusStop busStop \u003d allBus.get(busCode);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.setAddress(busStop.getAddress());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.setDescription(busStop.getDescription());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.setLatitude(busStop.getLatitude());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.setLongitude(busStop.getLongitude());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new QueryFailedException(busCode);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 66,
      "Jefferson111": 28
    }
  },
  {
    "path": "src/main/java/sgtravel/model/locations/CustomNode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Represents a RouteNode that is neither a BusStop or TrainStation."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class CustomNode extends RouteNode {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a custom RouteNode that is not a BusStop or TrainStation."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param address The address."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The description."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CustomNode(String address, String description, double latitude, double longitude) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Constraint.valueOf(\"CUSTOM\"), address, description, latitude, longitude);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor using a Venue instead."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param venue The venue representing this CustomNode."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CustomNode(Venue venue) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Constraint.valueOf(\"CUSTOM\"), venue.getAddress(), \"\", venue.getLatitude(), venue.getLongitude());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 28,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/sgtravel/model/locations/RouteNode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents one transportation node - bus stop / train station."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public abstract class RouteNode extends Venue {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Constraint type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a RouteNode object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param type The type of transport of node."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude of node."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude of node."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param address The name of node."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The description of node."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNode(Constraint type, String address, String description, double latitude, double longitude) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(address, latitude, longitude, 0, 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the RouteNode details for display in Route Selector."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The details of the RouteNode."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getDisplayInfo() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return getAddress() + \"\\n\" + getDescription() + \"\\n\" + \"(\" + getLatitude() + \", \" + getLongitude() + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the coordinates of the RouteNode (latitude, longitude)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The Coordinates."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getCoordinate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return getLatitude() + \", \" + getLongitude();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the type of Constraint (bus / train / custom)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return type The type of the RouteNode."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Constraint getType() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the description of the RouteNode."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return description The description of the RouteNode."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (!(description \u003d\u003d null || description.equals(\"null\"))) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return description;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the description of the RouteNode."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The latitude to set."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Converts the RouteNode to a String format."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The RouteNode in String format."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return getAddress() + \" (\" + getLatitude() + \", \" + getLongitude() + \")\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 82,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/sgtravel/model/locations/TrainStation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.model.transports.TransportationMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a train station."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class TrainStation extends RouteNode {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private ArrayList\u003cString\u003e trainCodes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a TrainStation object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainCode The ArrayList of train code Strings."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The description of the train station."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param address The name of train station."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude of train station."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude of train station."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public TrainStation(ArrayList\u003cString\u003e trainCode, String address, String description,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                double latitude, double longitude) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Constraint.valueOf(\"MRT\"), address, description, latitude, longitude);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.trainCodes \u003d trainCode;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor which automatically uses fetchData()."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainStationName The bus code."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public TrainStation(String trainStationName, Model model) throws QueryFailedException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Constraint.valueOf(\"MRT\"), \"\", \"\", 0, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.setAddress(trainStationName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        fetchData(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the trainCodes from an ArrayList of Strings."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainCodes The ArrayList of Strings."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setTrainCodes(ArrayList\u003cString\u003e trainCodes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.trainCodes \u003d trainCodes;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the ArrayList of train code of the train station in String."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return trainCodes The ArrayList of train code of the train station in String."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ArrayList\u003cString\u003e getTrainCodes() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return trainCodes;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Fetches data from model and updates the Train Station."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void fetchData(Model model) throws QueryFailedException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String[] addressDetails \u003d this.getAddress().split(\" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            StringBuilder addressSB \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (String detail : addressDetails) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                addressSB.append(detail.toUpperCase(), 0, 1).append(detail.substring(1)).append(\" \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String address \u003d addressSB.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            address \u003d address.substring(0, address.length() - 1);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            TransportationMap map \u003d model.getMap();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            HashMap\u003cString, TrainStation\u003e allTrainStations \u003d map.getTrainMap();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (allTrainStations.containsKey(address)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                TrainStation node \u003d allTrainStations.get(address);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                this.setAddress(address + \" Station\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                this.setDescription(\"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                this.setLatitude(node.getLatitude());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                this.setLongitude(node.getLongitude());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new QueryFailedException(address);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (NullPointerException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryFailedException(this.getAddress());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 77,
      "hongchuan97": 11,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/main/java/sgtravel/model/locations/Venue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a location of an attraction."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Venue implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private double latitude;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private double longitude;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private double distX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private double distY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final int RADIUS_EARTH \u003d 6371;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a Venue object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param address The address."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param distX The distance in x-axis."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param distY The distance in y-axis."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Venue(String address, double latitude, double longitude, double distX, double distY) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.latitude \u003d latitude;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.longitude \u003d longitude;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.distX \u003d distX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.distY \u003d distY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public double getLatitude() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return latitude;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public double getLongitude() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return longitude;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public double getDistX() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return distX;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public double getDistY() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return distY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Calculates flat earth distance (in metres) between 2 points based on latitude \u0026 longitude."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param otherVenue The other venue."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The absolute flat earth distance between the 2 venues."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public double getDistance(Venue otherVenue) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double latDistance \u003d Math.toRadians(otherVenue.getLatitude() - getLatitude());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double lonDistance \u003d Math.toRadians(otherVenue.getLongitude() - getLongitude());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double a \u003d Math.sin(latDistance / 2) * Math.sin(latDistance / 2)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + Math.cos(Math.toRadians(getLatitude())) * Math.cos(Math.toRadians(otherVenue.getLatitude()))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                * Math.sin(lonDistance / 2) * Math.sin(lonDistance / 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double c \u003d 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return Math.abs(RADIUS_EARTH * c * 1000);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the address of the Venue."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param address The address value to set."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setAddress(String address) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the latitude of the venue."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude value to set."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setLatitude(double latitude) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.latitude \u003d latitude;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the longitude of the venue."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude value to set."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setLongitude(double longitude) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.longitude \u003d longitude;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Converts the venue to a String format."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The venue as a String."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return getAddress() + \" | \" + getLatitude() + \" | \" + getLongitude() + \" | \" + getDistX() + \" | \" + getDistY();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Compares a given venue with this object."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param otherVenue The query venue."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Whether the venues are equal."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean equals(Venue otherVenue) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (otherVenue \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return getLatitude() \u003d\u003d otherVenue.getLatitude() \u0026\u0026 getLongitude() \u003d\u003d otherVenue.getLongitude()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    \u0026\u0026 getDistX() \u003d\u003d otherVenue.getDistX() \u0026\u0026 getDistY() \u003d\u003d otherVenue.getDistY();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 80,
      "Jefferson111": 44
    }
  },
  {
    "path": "src/main/java/sgtravel/model/planning/Agenda.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.planning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.VenueList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents an Agenda - places to go and things to do within a day."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class Agenda extends VenueList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private List\u003cTodo\u003e todoList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private int dayNumber;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Constructor to initialise new Agenda object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param todoList The list of things to do in a day."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param venueList The list of places to go in a ay ."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param dayNumber The agenda\u0027s serial number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Agenda(List\u003cTodo\u003e todoList, List\u003cVenue\u003e venueList, int dayNumber) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(venueList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.dayNumber \u003d dayNumber;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.todoList \u003d todoList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * This makes the list of agendas for a newly entered Itinerary."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return result The Agenda represented as a String"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result.append(\"Agenda |\").append(this.getDay()).append(\"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (Venue venue : this.getVenueList()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(venue.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (Todo todo : this.getTodoList()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(todo.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"|\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        result.append(\"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns the day number of the specific agenda."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return dayNumber The serial number of the agenda."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public int getDay() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return dayNumber;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns the todo list of an agenda."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return todoList The list containing all of the things to do."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cTodo\u003e getTodoList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return this.todoList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Updates the value of day."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param dayNumber The new day number to be set."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setDay(int dayNumber) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.dayNumber \u003d dayNumber;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 66,
      "Inno97": 5,
      "Jefferson111": 5
    }
  },
  {
    "path": "src/main/java/sgtravel/model/planning/Itinerary.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.planning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.ChronologyBeforePresentException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.ChronologyInconsistentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents an Itinerary and its contained information."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class Itinerary {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private LocalDateTime startDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private LocalDateTime endDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private List\u003cAgenda\u003e list;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Constructor to initialise new Itinerary."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param startDate The first day of the trip."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param endDate The last day of the trip ."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param name The name of the itinerary."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Itinerary(LocalDateTime startDate, LocalDateTime endDate, String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Prints the itinerary list in entirety to show on the UI."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return result The String which shows the itinerary in full"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String printItinerary() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int days \u003d getNumberOfDays();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(\"Here are the list of locations for a \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                +  days + \" day trip. This itinerary has the name : \\n\" + this.name + \"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (Agenda list1 : this.getList()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result.append(\"Day \").append(list1.getDay()).append(\":\").append(\"\\n \\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"Venues: \").append(\"\\n\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            for (Venue venue : list1.getVenueList()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                result.append(venue.getAddress()).append(\"\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"\\n\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"Todo List: \").append(\"\\n\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            for (Todo todo : list1.getTodoList()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                result.append(\" - \").append(todo.getDescription()).append(\"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Checks if the dates of the itinerary are valid."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws ChronologyBeforePresentException If start and end date are in the past."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws ChronologyInconsistentException If start ad end date are invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void checkValidDate() throws ChronologyBeforePresentException, ChronologyInconsistentException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (startDate.isBefore(LocalDateTime.now()) || endDate.isBefore(LocalDateTime.now())) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new ChronologyBeforePresentException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } else if (endDate.isBefore(startDate) || startDate.isAfter(endDate)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new ChronologyInconsistentException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns number of days of the trip based on entered start and end dates."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return the number of days of a trip (end - start)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public int getNumberOfDays() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime tempDateTime \u003d LocalDateTime.from(startDate);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        long days \u003d tempDateTime.until(endDate, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return Integer.parseInt(String.valueOf(days)) + 1;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns the list of agendas associated with the itinerary."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return list The agenda list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cAgenda\u003e getList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Replaces the contents of the current list with the updated one."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param agenda The agenda list to replace the current one."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setTasks(List\u003cAgenda\u003e agenda) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        list \u003d agenda;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns the start date of the trip."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return endDate The first date of the trip"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns the end date of the trip."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return endDate The last date of the trip"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public LocalDateTime getEndDate() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns the name of the itinerary."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return name Users name of the itinerary"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 121,
      "Inno97": 7,
      "Jefferson111": 5
    }
  },
  {
    "path": "src/main/java/sgtravel/model/planning/Recommendation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.planning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.RecommendationFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a recommended itinerary list provided by SGTravel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class Recommendation {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private List\u003cAgenda\u003e agendaList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Constructor to initialise new Recommendation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param agendaList The list containing all venues and todos for the itinerary."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Recommendation(List\u003cAgenda\u003e agendaList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.agendaList \u003d agendaList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns an itinerary by combining number of days entered by the user and this recommendation object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param itineraryDetails contains all info to make an itinerary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return itinerary The recommended list based on the number of days of travel."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Itinerary makeItinerary(String[] itineraryDetails) throws ParseException, RecommendationFailException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(itineraryDetails[1].strip());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(itineraryDetails[2].strip());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Itinerary itinerary \u003d new Itinerary(start, end, \"New Recommendation\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        itinerary.checkValidDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        int days \u003d itinerary.getNumberOfDays();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (days \u003e\u003d 9) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            logger.log(Level.INFO, \"Requested for \" + days + \" days itinerary but app can only give up to 8 days\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new RecommendationFailException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        List\u003cAgenda\u003e agendaList1 \u003d new ArrayList\u003c\u003e(agendaList.subList(0, days));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assert (!agendaList1.isEmpty()) : \"list should not be null\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        itinerary.setTasks(agendaList1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return itinerary;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 48,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/java/sgtravel/model/planning/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.planning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a to-do."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a to-do not yet done with the given description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description A description of this to-do."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string representation of this to-do."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The desired string representation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return getDescription();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "-": 22,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/main/java/sgtravel/model/profile/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private LocalDateTime birthday;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Person(String name, LocalDateTime birthday) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public LocalDateTime getBirthday() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return birthday;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void setBirthday(LocalDateTime birthday) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 28,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/sgtravel/model/profile/Preference.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.NoSuchCategoryException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class Preference {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private Boolean sports;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private Boolean entertainment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private Boolean arts;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private Boolean lifestyle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs Preference object. Set all preference to false."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Preference() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        sports \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        entertainment \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        arts \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        lifestyle \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Sets the preference of user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param category category of preference to set"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param setting setting which user wish to set the preference to"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setPreference(String category, Boolean setting) throws NoSuchCategoryException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        switch (category) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"sports\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            sports \u003d setting;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"entertainment\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            entertainment \u003d setting;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"arts\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            arts \u003d setting;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"lifestyle\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            lifestyle \u003d setting;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new NoSuchCategoryException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Returns all the preference of the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return Arraylist of user preference"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ArrayList\u003cBoolean\u003e getAllPreference() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cBoolean\u003e all \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        all.add(sports);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        all.add(entertainment);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        all.add(arts);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        all.add(lifestyle);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return all;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 57,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/sgtravel/model/profile/ProfileCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.NoSuchCategoryException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.commons.exceptions.NoSuchItineraryException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Contains information of user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ProfileCard {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private Preference preference \u003d new Preference();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashMap\u003cString, Itinerary\u003e favourite \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ProfileCard() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        setPerson(\"New User\", LocalDateTime.now());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setPreference(String category, Boolean setting) throws NoSuchCategoryException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        preference.setPreference(category, setting);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void setPerson(String name, LocalDateTime birthday) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.person \u003d new Person(name, birthday);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public String getPersonName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return person.getName();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public LocalDateTime getPersonBirthday() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return person.getBirthday();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ArrayList\u003cBoolean\u003e getPreference() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return preference.getAllPreference();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public HashMap\u003cString, Itinerary\u003e getFavouriteList() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return favourite;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Returns the favourite itinerary of given name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param name Name of favourite itinerary to return."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return Itinerary of given name."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @throws NoSuchItineraryException If there is no itinerary of given name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Itinerary getFavourite(String name) throws NoSuchItineraryException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Itinerary itinerary \u003d favourite.get(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (itinerary \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            throw new NoSuchItineraryException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return itinerary;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Adds the itinerary of given name to favourite."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param name Name of itinerary."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param fav Itinerary object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void addFavourite(String name, Itinerary fav) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        fav.setName(name);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        favourite.put(name, fav);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Returns the age of user."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return Age of user."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return Period.between(person.getBirthday().toLocalDate(), LocalDateTime.now().toLocalDate()).getYears();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void setFavourite(HashMap\u003cString, Itinerary\u003e itinerary) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.favourite \u003d itinerary;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Deletes the itinerary of given name from favourite list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param name Name of favourite itinerary to delete."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @throws NoSuchItineraryException If there is no itinerary of given name."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void deleteFavourite(String name) throws NoSuchItineraryException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Itinerary itinerary \u003d favourite.get(name);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (itinerary \u003d\u003d null) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            throw new NoSuchItineraryException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            favourite.remove(name);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 95,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/java/sgtravel/model/transports/BusService.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.transports;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.enumerations.Direction;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a Bus and its route."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class BusService {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String bus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cString\u003e forward;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cString\u003e backward;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a BusService object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param bus The number for this BusService."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public BusService(String bus) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.bus \u003d bus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.forward \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.backward \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds the bus stop code to the route which the bus would travel to."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busCode Code of bus stop"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param direction Direction of travel to next bus stop"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void addRoute(String busCode, Direction direction) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (direction \u003d\u003d Direction.FORWARD) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.forward.add(busCode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.backward.add(busCode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the route of bus in direction indicated."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param direction Direction of travel."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return All bus stops in direction of travel in an ArrayList."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ArrayList\u003cString\u003e getDirection(Direction direction) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (direction \u003d\u003d Direction.FORWARD) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return forward;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return backward;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the bus service number."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return bus The bus service number."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getBus() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return bus;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 33,
      "hongchuan97": 11,
      "Jefferson111": 18
    }
  },
  {
    "path": "src/main/java/sgtravel/model/transports/Route.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.transports;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.NullResultException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteNodeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.RouteNode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Represents a route between 2 locations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class Route {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private ArrayList\u003cRouteNode\u003e nodes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs an empty route object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param name The name of the route."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The description of the route."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Route(String name, String description) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.nodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor with predefined nodes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param nodes The nodes of the route."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param name The name of the route."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The description of the route."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Route(ArrayList\u003cRouteNode\u003e nodes, String name, String description) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.nodes \u003d nodes;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a new node to the route at a given index."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param newNode The new node to add."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the node to add to."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @exception DuplicateRouteNodeException If the route is a duplicate."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @exception OutOfBoundsException If the index is out of bounds."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void addNode(RouteNode newNode, int index) throws DuplicateRouteNodeException, OutOfBoundsException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (index \u003e\u003d 0 \u0026\u0026 index \u003c\u003d nodes.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (RouteNode node : nodes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (node.equals(newNode)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    throw new DuplicateRouteNodeException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            nodes.add(index, newNode);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        throw new OutOfBoundsException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternate method to add a node at the end of the Route."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param newNode The new node to add."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @exception DuplicateRouteNodeException If the route is a duplicate."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void addNode(RouteNode newNode) throws DuplicateRouteNodeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (RouteNode node: nodes) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (node.equals(newNode)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                throw new DuplicateRouteNodeException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        nodes.add(newNode);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Deletes the node at a given index."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the node to delete."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws IndexOutOfBoundsException If the index is out of bounds."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void remove(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        nodes.remove(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the node at a given index."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the node."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return node The node at the index."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws IndexOutOfBoundsException If the index is out of bounds."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNode getNode(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return nodes.get(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets a node with the given name."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param name The query name."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return node The queried node."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws NullResultException If nothing is found."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNode getNodeByName(String name) throws NullResultException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (RouteNode node: nodes) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String nodeName \u003d node.getAddress().toLowerCase();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (nodeName.equals(name.toLowerCase())) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return node;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new NullResultException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the Arraylist of Route Nodes."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return nodes The ArrayList of Route Nodes."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ArrayList\u003cRouteNode\u003e getNodes() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return nodes;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the size of the Route."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The size of the Route."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return nodes.size();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns true if both routes are the same."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean isSameRoute(Route otherRoute) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (otherRoute \u003d\u003d this) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return otherRoute !\u003d null \u0026\u0026 otherRoute.getName().equals(name)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                \u0026\u0026 otherRoute.getDescription().equals(description) \u0026\u0026 otherRoute.getNodes().equals(nodes);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 157,
      "Jefferson111": 12
    }
  },
  {
    "path": "src/main/java/sgtravel/model/transports/TransportationMap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.transports;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.TrainStation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents the transportation map of the Singapore transport network."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class TransportationMap {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashMap\u003cString, BusService\u003e busMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashMap\u003cString, BusStop\u003e busStopMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashMap\u003cString, TrainStation\u003e trainMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e northEastLine;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e northSouthLine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e circleLine;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e circleLineSub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e downtownLine;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e eastWestLine;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e eastWestLineSub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructor for TransportationMap object with both busStopMap and busMap."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busStopMap Map of BusStop objects."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busMap Map of BusService objects."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public TransportationMap(HashMap\u003cString, BusStop\u003e busStopMap, HashMap\u003cString, BusService\u003e busMap) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.busMap \u003d busMap;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.busStopMap \u003d busStopMap;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sorts all TrainStations by TrainCode."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    static class SortByTrainCode implements Comparator\u003cTrainStation\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        private String trainLine;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        SortByTrainCode(String trainLine) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.trainLine \u003d trainLine;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        public int compare(TrainStation o1, TrainStation o2) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            int trainCodeNumber \u003d getTrainCodeNumber(o1, this.trainLine);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            int trainCodeNumber2 \u003d getTrainCodeNumber(o2, this.trainLine);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            assert trainCodeNumber !\u003d -1 : \"Train Station in wrong line\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            assert trainCodeNumber2 !\u003d -1 : \"Train Station in wrong line\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return trainCodeNumber - trainCodeNumber2;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        private int getTrainCodeNumber(TrainStation o1, String trainLine) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (String trainCode : o1.getTrainCodes()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (trainCode.contains(trainLine)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    return Integer.parseInt(trainCode.substring(2));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public HashMap\u003cString, BusService\u003e getBusMap() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return this.busMap;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public HashMap\u003cString, BusStop\u003e getBusStopMap() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return this.busStopMap;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets an ArrayList of TrainStation with the corresponding TrainLine code."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainLineCode Code of mrt line"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return mrt line"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ArrayList\u003cTrainStation\u003e getTrainLine(String trainLineCode) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (trainLineCode) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"NE\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.northEastLine;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"NS\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.northSouthLine;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"CC\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.circleLine;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"CE\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.circleLineSub;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"EW\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.eastWestLine;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"CG\":"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.eastWestLineSub;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"DT\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.downtownLine;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets a sorted ArrayList of TrainStations of a specific TrainLine."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainStations The ArrayList of TrainStations to get."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainLineCode The TrainLine code."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return trainStations The sorted ArrayList of TrainStations of the line."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e getSortedTrainLine(ArrayList\u003cTrainStation\u003e trainStations, String trainLineCode) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        trainStations.sort(new SortByTrainCode(trainLineCode));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return trainStations;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public HashMap\u003cString, TrainStation\u003e getTrainMap() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return trainMap;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets a TrainStation from the map."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param query The TrainStation name."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The TrainStation."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryFailedException If the TrainStation cannot be found."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public TrainStation getTrainStation(String query) throws QueryFailedException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (trainMap.containsKey(query)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return trainMap.get(query);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new QueryFailedException(query);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the TrainMap according to a HashMap of key String and value TrainStation."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainMap The TrainMap to set."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setTrainMap(HashMap\u003cString, TrainStation\u003e trainMap) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.trainMap \u003d trainMap;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        setTrainLine();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the TrainLines for the TrainMap."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void setTrainLine() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e northEastLine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e northSouthLine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e circleLine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e circleLineSub \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e downtownLine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e eastWestLine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e eastWestLineSub \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (Map.Entry mapElement : this.trainMap.entrySet()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            TrainStation trainStation \u003d (TrainStation)mapElement.getValue();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (String trainCode : trainStation.getTrainCodes()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (trainCode.contains(\"NE\")) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    northEastLine.add(trainStation);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (trainCode.contains(\"NS\")) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    northSouthLine.add(trainStation);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (trainCode.contains(\"EW\")) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    eastWestLine.add(trainStation);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (trainCode.contains(\"CG\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    eastWestLineSub.add(trainStation);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (trainCode.contains(\"CC\")) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    circleLine.add(trainStation);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (trainCode.contains(\"CE\")) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    circleLineSub.add(trainStation);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (trainCode.contains(\"DT\")) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    downtownLine.add(trainStation);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.northEastLine \u003d getSortedTrainLine(northEastLine, \"NE\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.northSouthLine \u003d getSortedTrainLine(northSouthLine, \"NS\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.circleLine \u003d getSortedTrainLine(circleLine, \"CC\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.circleLineSub \u003d getSortedTrainLine(circleLineSub, \"CE\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.downtownLine \u003d getSortedTrainLine(downtownLine, \"DT\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.eastWestLine \u003d getSortedTrainLine(eastWestLine, \"EW\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.eastWestLineSub \u003d getSortedTrainLine(eastWestLineSub, \"CG\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 115,
      "hongchuan97": 68,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/sgtravel/storage/SampleStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteNodeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.storageparsers.EventStorageParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.storageparsers.TransportStorageParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.RouteList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import sgtravel.model.profile.ProfileCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Helper class to generate sample data for first time user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class SampleStorage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private RouteList routes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private HashMap\u003cString, Itinerary\u003e itineraryTable;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ProfileCard profileCard;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String EVENTS_FILE_PATH \u003d \"/sample/events.txt\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String ROUTES_FILE_PATH \u003d \"/sample/routes.txt\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String ITINERARIES_FILE_PATH \u003d \"/sample/itineraries.txt\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final String FAVOURITE_FILE_PATH \u003d \"/sample/favourite.txt\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Reads all storage file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public SampleStorage() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events \u003d new EventList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        routes \u003d new RouteList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        itineraryTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        profileCard \u003d new ProfileCard();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        readFavourite();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        readEvents();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        readRoutes();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        readItineraryTable();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Reads the itinerary hash map from filepath."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void readFavourite() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            Scanner scanner \u003d new Scanner(getClass().getResourceAsStream(FAVOURITE_FILE_PATH));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.profileCard.setFavourite(Storage.makeItineraryTable(scanner));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            logger.log(Level.INFO, \"Sample data not found.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Reads the itinerary hash map from filepath."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void readItineraryTable() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Scanner scanner \u003d new Scanner(getClass().getResourceAsStream(ITINERARIES_FILE_PATH));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.itineraryTable \u003d Storage.makeItineraryTable(scanner);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            logger.log(Level.INFO, \"Sample data not found.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Reads events from filepath."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void readEvents() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        List\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Scanner s \u003d new Scanner(getClass().getResourceAsStream(EVENTS_FILE_PATH));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                events.add(EventStorageParser.createEventFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            this.events.setEvents(events);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (ParseException | DuplicateTaskException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            logger.log(Level.INFO, \"Sample data not found.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Reads routes from filepath."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void readRoutes() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        List\u003cRoute\u003e newRoutes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Scanner s \u003d new Scanner(getClass().getResourceAsStream(ROUTES_FILE_PATH));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Route newRoute \u003d new Route(new ArrayList\u003c\u003e(), \"\", \"\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                String input \u003d s.nextLine();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (input.split(\"\\\\|\", 2)[0].strip().equals(\"route\")) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    if (newRoute.size() !\u003d 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        newRoutes.add(newRoute);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    newRoute \u003d TransportStorageParser.createRouteFromStorage(input);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    newRoute.addNode(TransportStorageParser.createNodeFromStorage(input));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (!newRoute.getName().equals(\"\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                newRoutes.add(newRoute);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            routes.setRoutes(newRoutes);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (DuplicateRouteNodeException | ParseException | DuplicateRouteException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            logger.log(Level.INFO, \"Sample data not found.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventList getEvents() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public RouteList getRoutes() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return routes;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ProfileCard getProfileCard() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return profileCard;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns the itinerary hash-map."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public HashMap\u003cString, Itinerary\u003e getItineraryTable() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return this.itineraryTable;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 1,
      "hongchuan97": 16,
      "Jefferson111": 121
    }
  },
  {
    "path": "src/main/java/sgtravel/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteNodeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.storageparsers.EventStorageParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.storageparsers.PlanningStorageParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.storageparsers.ProfileStorageParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.storageparsers.TransportStorageParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.RouteList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.TrainStation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Agenda;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Recommendation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Todo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.profile.ProfileCard;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.BusService;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.TransportationMap;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Manages storage of Duke data in local storage."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private RouteList routes;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private TransportationMap map;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ProfileCard profileCard;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Recommendation recommendation;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private HashMap\u003cString, Itinerary\u003e itineraryTable;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String BUS_FILE_PATH \u003d \"/data/bus.txt\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String RECOMMENDATIONS_FILE_PATH \u003d \"/data/recommendations.txt\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final String TRAIN_FILE_PATH \u003d \"/data/train.txt\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String EVENTS_FILE_PATH \u003d \"events.txt\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String ROUTES_FILE_PATH \u003d \"routes.txt\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String ITINERARIES_FILE_PATH \u003d \"itineraries.txt\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final String PROFILE_FILE_PATH \u003d \"profile.txt\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final String FAVOURITE_FILE_PATH \u003d \"favourite.txt\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a Storage object that contains information from the model."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        SampleStorage sampleData \u003d new SampleStorage();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        profileCard \u003d sampleData.getProfileCard();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events \u003d sampleData.getEvents();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        routes \u003d sampleData.getRoutes();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        itineraryTable \u003d sampleData.getItineraryTable();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            read();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } catch (FileLoadFailException | ParseException | FileNotSavedException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            logger.log(Level.WARNING, e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Reads all storage file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void read() throws FileLoadFailException, ParseException, FileNotSavedException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        readBus();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        readTrain();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        readRecommendations();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        readEvents();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        readRoutes();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        readProfile();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        readItineraryTable();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Reads train from filepath."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void readTrain() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assert this.map !\u003d null : \"Map must be created first\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, TrainStation\u003e trainMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Scanner s \u003d new Scanner(getClass().getResourceAsStream(TRAIN_FILE_PATH));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            TrainStation newTrain \u003d TransportStorageParser.createTrainFromStorage(s.nextLine());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            trainMap.put(newTrain.getDescription(), newTrain);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.map.setTrainMap(trainMap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Reads bus from filepath."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void readBus() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, BusStop\u003e busStopData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, BusService\u003e busData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Scanner s \u003d new Scanner(getClass().getResourceAsStream(BUS_FILE_PATH));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        boolean isBusData \u003d false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\".equals(line)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                isBusData \u003d true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (isBusData) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                BusService busService \u003d TransportStorageParser.createBusFromStorage(line);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                busData.put(busService.getBus(), busService);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                BusStop busStop \u003d TransportStorageParser.createBusStopDataFromStorage(line);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                busStopData.put(busStop.getBusCode(), busStop);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.map \u003d new TransportationMap(busStopData, busData);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Reads events from filepath. Creates empty events if file cannot be read."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileLoadFailException If events file cannot be loaded."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void readEvents() throws FileLoadFailException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        List\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            File f \u003d new File(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                events.add(EventStorageParser.createEventFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            this.events.setEvents(events);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } catch (FileNotFoundException | ParseException | DuplicateTaskException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new FileLoadFailException(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Reads routes from filepath. Creates empty routes if file cannot be read."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws FileLoadFailException If there is a duplicate route that is read.d."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void readRoutes() throws FileLoadFailException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        List\u003cRoute\u003e newRoutes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            File file \u003d new File(ROUTES_FILE_PATH);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Route newRoute \u003d new Route(new ArrayList\u003c\u003e(), \"\", \"\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                String input \u003d s.nextLine();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (input.split(\"\\\\|\", 2)[0].strip().equals(\"route\")) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    if (newRoute.size() !\u003d 0) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        newRoutes.add(newRoute);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    newRoute \u003d TransportStorageParser.createRouteFromStorage(input);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    newRoute.addNode(TransportStorageParser.createNodeFromStorage(input));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (!newRoute.getName().equals(\"\")) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                newRoutes.add(newRoute);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routes.setRoutes(newRoutes);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (DuplicateRouteNodeException | FileNotFoundException"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                | ParseException | DuplicateRouteException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new FileLoadFailException(ROUTES_FILE_PATH);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Reads the profile from filepath. Creates new empty profile if file doesn\u0027t exist."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileLoadFailException If the profile file is not found."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void readProfile() throws FileLoadFailException, FileNotSavedException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            File f \u003d new File(PROFILE_FILE_PATH);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                String input \u003d s.nextLine();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                ProfileStorageParser.createProfileFromStorage(profileCard, input);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (FileNotFoundException | ParseException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileLoadFailException(PROFILE_FILE_PATH);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        readFavouriteList();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Reads favourite list from favourite.txt."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @throws FileNotSavedException If file does not exist."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void readFavouriteList() throws FileNotSavedException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            File itinerariesFile \u003d new File(FAVOURITE_FILE_PATH);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            Scanner scanner \u003d new Scanner(itinerariesFile);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            HashMap\u003cString, Itinerary\u003e itinerary \u003d makeItineraryTable(scanner);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            profileCard.setFavourite(itinerary);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } catch (FileNotFoundException | ParseException e) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writeFavItinerary();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Reads recommendations from storage and creates a new recommendation object."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws ParseException If the venue cannot be retrieved from storage."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void readRecommendations() throws ParseException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cAgenda\u003e agendaList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Scanner scanner \u003d new Scanner(getClass().getResourceAsStream(RECOMMENDATIONS_FILE_PATH));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            List\u003cVenue\u003e venueList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            venueList.add(PlanningStorageParser.getVenueFromStorage(scanner.nextLine()));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            List\u003cTodo\u003e todoList \u003d PlanningStorageParser.getTodoListFromStorage(scanner.nextLine());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            venueList.add(PlanningStorageParser.getVenueFromStorage(scanner.nextLine()));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            todoList.addAll(PlanningStorageParser.getTodoListFromStorage(scanner.nextLine()));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Agenda agenda \u003d new Agenda(todoList, venueList, i++);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            agendaList.add(agenda);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.recommendation \u003d new Recommendation(agendaList);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Sets the itinerary hash-map in the Storage class."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileLoadFailException If the itneraries file cannot be loaded."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private void readItineraryTable() throws FileLoadFailException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            File itinerariesFile \u003d new File(ITINERARIES_FILE_PATH);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Scanner scanner \u003d new Scanner(itinerariesFile);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.itineraryTable \u003d makeItineraryTable(scanner);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (FileNotFoundException | ParseException e) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileLoadFailException(ITINERARIES_FILE_PATH);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Makes a hash-map containing all of the itineraries in storage."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws ParseException If the file cannot be parsed correctly."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    static HashMap\u003cString, Itinerary\u003e makeItineraryTable(Scanner scanner) throws ParseException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, Itinerary\u003e itineraryTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            String name \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(scanner.nextLine());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(scanner.nextLine());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Itinerary itinerary \u003d new Itinerary(start, end, name);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            List\u003cAgenda\u003e agendaList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            String fileLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            while (fileLine.split(\"\\\\|\")[0].equals(\"Agenda \")) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                Agenda agenda \u003d getAgenda(scanner, fileLine);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                agendaList.add(agenda);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                if (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    fileLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            itinerary.setTasks(agendaList);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            itineraryTable.put(itinerary.getName(), itinerary);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return itineraryTable;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Makes an agenda object which is parsed from storage."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws ParseException If the file cannot be parsed correctly."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static Agenda getAgenda(Scanner scanner, String fileLine) throws ParseException {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cVenue\u003e venueList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cTodo\u003e todoList;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        final int number2 \u003d Integer.parseInt(fileLine.split(\"\\\\|\")[1]);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String newVenue \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        while (newVenue.contains(\" | \")) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            venueList.add(PlanningStorageParser.getVenueFromStorage(newVenue));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            newVenue \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        todoList \u003d PlanningStorageParser.getTodoListFromStorage(newVenue);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new Agenda(todoList, venueList, number2);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Writes the tasks into a file of the given filepath."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If a file cannot be saved."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void write() throws FileNotSavedException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        writeEvents();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        writeRoutes();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        writeProfile();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        writeFavItinerary();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        writeNewItinerary();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Writes the events to local storage."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void writeEvents() throws FileNotSavedException {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            FileWriter writer \u003d new FileWriter(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            for (Event event : events) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                writer.write(EventStorageParser.toStorageString(event) + \"\\n\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new FileNotSavedException(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Writes the events to local storage."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void writeRoutes() throws FileNotSavedException {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            FileWriter writer \u003d new FileWriter(ROUTES_FILE_PATH);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            StringBuilder routesString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (Route route : routes) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                routesString.append(TransportStorageParser.toRouteStorageString(route));"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            writer.write(routesString.toString());"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new FileNotSavedException(ROUTES_FILE_PATH);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Writes the profile to local storage."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private void writeProfile() throws FileNotSavedException {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            FileWriter writer \u003d new FileWriter(PROFILE_FILE_PATH);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writer.write(ProfileStorageParser.toProfileStorageString(profileCard) + \"\\n\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileNotSavedException(PROFILE_FILE_PATH);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Writes favourite itineraries to indicated filepath."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private void writeFavItinerary() throws FileNotSavedException {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            saveEntireItineraryList(FAVOURITE_FILE_PATH, profileCard.getFavouriteList());"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileNotSavedException(FAVOURITE_FILE_PATH);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Writes itineraries to indicated filepath."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void writeNewItinerary() throws FileNotSavedException {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            saveEntireItineraryList(ITINERARIES_FILE_PATH, itineraryTable);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileNotSavedException(ITINERARIES_FILE_PATH);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Performs the writing of an itineraryTable or favoriteList to specified filepath."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private void saveEntireItineraryList(String file, HashMap\u003cString, Itinerary\u003e itineraryTable) throws IOException {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        FileWriter writer \u003d new FileWriter(file, false);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        StringBuilder itineraryString \u003d new StringBuilder();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (Map.Entry\u003cString, Itinerary\u003e entry : itineraryTable.entrySet()) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            itineraryString.append(PlanningStorageParser.toItineraryStorageString(entry.getValue()));"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        writer.write(itineraryString.toString());"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        writer.close();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public EventList getEvents() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public TransportationMap getMap() {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return this.map;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public RouteList getRoutes() {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return routes;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public ProfileCard getProfileCard() {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return profileCard;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns the recommendations object created by the recommendations command."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Recommendation getRecommendations() {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return recommendation;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns the itinerary hash-map."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public HashMap\u003cString, Itinerary\u003e getItineraryTable() {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return this.itineraryTable;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 179,
      "Inno97": 62,
      "hongchuan97": 85,
      "Jefferson111": 115
    }
  },
  {
    "path": "src/main/java/sgtravel/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultCalender;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultExit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultImage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.LogicManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.PanelResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.model.lists.RouteList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ui.calendar.CalendarWindow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ui.dialogbox.DialogBox;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ui.dialogbox.DialogBoxImage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ui.map.MapWindow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private LogicManager logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Main main;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.png\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private AnchorPane sidePanel;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Initialises the MainWindow."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param primaryStage The stage for the MainWindow."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public MainWindow(Stage primaryStage) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        primaryStage.getScene().getStylesheets().addAll("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                this.getClass().getResource(\"/css/mainStyle.css\").toExternalForm());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.INFO, \"Starting user interface up...\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Shows the application."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Initialises the logic and Ui component of Duke."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param main The main object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void initialise(Main main) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.main \u003d main;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logic \u003d new LogicManager();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        sgTravelShowWelcome();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String input \u003d getUserInput();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isEmpty(input)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        echoUserInput(input);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        sgTravelResponse(input);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Handles the event of a key press."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param keyEvent The event of a key press."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        panelResponse(keyEvent);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Handles the event which triggers a PanelResult."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param keyEvent The event which triggers a PanelResult."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void panelResponse(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        PanelResult result \u003d logic.execute(keyEvent.getCode());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        panelShow(result);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Handles the response that SGTravel should do from a user input."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void sgTravelResponse(String input) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                CommandResult result \u003d logic.execute(input);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                sgTravelShow(result);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (result instanceof CommandResultExit) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    tryExitApp();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (result instanceof CommandResultCalender) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    new CalendarWindow((CommandResultCalender) result).show();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (result instanceof CommandResultMap) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    new MapWindow((CommandResultMap) result).show();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                sgTravelShow(e.getMessage());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Shows message(s) to the user."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param commandResult The CommandResult from the user input."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void sgTravelShow(CommandResult commandResult) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (commandResult instanceof CommandResultImage) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            sgTravelShow(commandResult.getMessage(), ((CommandResultImage) commandResult).getImage());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (commandResult !\u003d null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        sgTravelShow(commandResult.getMessage());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative method to show message(s) to the user."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param msg The String message to show."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void sgTravelShow(String msg) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                DialogBox.getDialog(msg, dukeImage)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        );"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Shows an image in dialogBoxImage to the user."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message The message to show."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param image The image to show."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void sgTravelShow(String message, Image image) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                DialogBoxImage.getDialog(message, dukeImage, image)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Shows the PanelResult for the SidePanel."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param result The PanelResult to display."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void panelShow(PanelResult result) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        sidePanel.getChildren().clear();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        sidePanel.getChildren().add(SidePanel.getPanel(result));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Shows the welcome message."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void sgTravelShowWelcome() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d logic.getModel();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        HashMap\u003cString, Itinerary\u003e itineraries \u003d model.getItineraryTable();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteList routes \u003d model.getRoutes();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String message \u003d Messages.STARTUP_WELCOME_MESSAGE + logic.getName() + \"\\n\\n\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        message +\u003d Messages.STARTUP_WELCOME_MESSAGE_ITINERARY_START + itineraries.size()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + Messages.STARTUP_WELCOME_MESSAGE_ITINERARY_END;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        message +\u003d Messages.STARTUP_WELCOME_MESSAGE_ROUTE_START + routes.size()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + Messages.STARTUP_WELCOME_MESSAGE_ROUTE_END;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        message +\u003d Messages.STARTUP_WELCOME_MESSAGE_HELP;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        sgTravelShow(message);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Tries to exit SGTravel."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void tryExitApp() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            main.stop();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            sgTravelShow(\"Exit app failed\" + e.getMessage());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Echos user input and displays it."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void echoUserInput(String input) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                DialogBox.getUserDialog(input, userImage)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        );"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the user input from the TextField."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return input The user input."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String getUserInput() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String input \u003d userInput.getText().strip();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks whether a String is empty."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The String to check."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If the String is empty."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isEmpty(String input) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return \"\".equals(input);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 106,
      "hongchuan97": 12,
      "Jefferson111": 141
    }
  },
  {
    "path": "src/main/java/sgtravel/ui/SidePanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.PanelResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ui.map.PointCard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Represents the side panel of the main window."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class SidePanel extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String FXML \u003d \"SidePanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private StackPane taskContainer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private AnchorPane miniMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label endDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates the SidePanel object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param result The PanelResult for the object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private SidePanel(PanelResult result) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (result.isReady()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            for (int i \u003d 0; i \u003c result.size(); ++i) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                miniMap.getChildren().add("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        PointCard.getCard(result.getVenue(i), result.getVenueColor(i)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            description.setText(result.getDescription());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            description.setVisible(true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            startDate.setText(result.getStartDate());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            startDate.setVisible(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            endDate.setText(result.getEndDate());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            endDate.setVisible(true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            setHighlight(result);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the SidePanel."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param result The PanelResult for the object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The SidePanel created."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static AnchorPane getPanel(PanelResult result) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new SidePanel(result).getRoot();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets a highlight for a label."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param result The PanelResult for the object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void setHighlight(PanelResult result) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            switch (result.getField()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                description.getStyleClass().add(\"highlight\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                startDate.getStyleClass().add(\"highlight\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                endDate.getStyleClass().add(\"highlight\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (OutOfBoundsException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            logger.log(Level.FINE, \"Nothing needs to be highlighted.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 23,
      "Jefferson111": 65
    }
  },
  {
    "path": "src/main/java/sgtravel/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param fxmlFileName The name of the FXML file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The URL for the FXML file."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        URL fxmlFileUrl \u003d Main.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 4,
      "-": 84,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/main/java/sgtravel/ui/calendar/CalendarCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ui.UiPart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a calender card as a part of the UI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class CalendarCard extends UiPart\u003cStackPane\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private final EventList events;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String FXML \u003d \"CalendarCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String CLASSNAME \u003d \"class sgtravel.model.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int currentIndex \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private boolean isCalendarCardClass \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label day;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private StackPane calendarCard;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates the CalenderCard."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param day The number of the day."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param events The EventsList."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private CalendarCard(int day, EventList events) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.day.setText(Integer.toString(day));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        calendarCard.getStyleClass().add(\"calendarCard\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (events !\u003d null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!events.isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            loadInfoOnToCard();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Loads the information onto the CalenderCard."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void loadInfoOnToCard() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setText(events.get(currentIndex).getClass().toString().replace(CLASSNAME, \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        description.setText(events.get(currentIndex).getDescription());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event t : events) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result.append(t.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip tooltip \u003d new Tooltip(result.toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip.install(getRoot(), tooltip);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the CalenderCard for a day."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param day The number of the day."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param events The EventsList."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CalenderCard created."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected static StackPane getCalendarCard(int day, EventList events) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CalendarCard(day, events).getRoot();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * onClick event handler."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void onClick() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!events.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            currentIndex \u003d (currentIndex + 1) % events.size();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            loadInfoOnToCard();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * onHover handler to apply CSS."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void onMouseEnter() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        calendarCard.getStyleClass().add(\"calendarCardHover\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        calendarCard.getStyleClass().remove(\"calendarCard\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isCalendarCardClass \u003d false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * onHover handler to remove CSS."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void onMouseExit() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!isCalendarCardClass) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            calendarCard.getStyleClass().add(\"calendarCard\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            calendarCard.getStyleClass().remove(\"calendarCardHover\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            isCalendarCardClass \u003d true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 30,
      "Jefferson111": 71
    }
  },
  {
    "path": "src/main/java/sgtravel/ui/calendar/CalendarWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultCalender;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a calender window in the UI."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class CalendarWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"CalendarWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private YearMonth currentYearMonth;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int numOfDays;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int dayOfTheFirstDay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String currentMonth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private List\u003cEventList\u003e filteredEvents;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static EventList events;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int MAX_ROW \u003d 6;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int MAX_COL \u003d 7;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private VBox pane;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Text calendarTitle;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private GridPane gridCalendar;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new CalendarWindow."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param root Stage to use as the root of the CalendarWindow."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param events The EventList for the calender."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private CalendarWindow(Stage root, EventList events) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        root.getScene().getStylesheets().addAll(this.getClass().getResource(\"/css/calendarStyle.css\").toExternalForm());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        setCalendarLayout(events);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new CalendarWindow."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CalendarWindow(CommandResultCalender commandResult) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this(new Stage(), commandResult.getEvents());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Shows the Calendar window."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Changes to the previous month."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void previousMonth() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.minusMonths(1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        refreshCalendar();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Changes to the next month."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void nextMonth() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.plusMonths(1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        refreshCalendar();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Refreshes the calendar."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void refreshCalendar() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        updateVariables();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setCalendarTitle(currentYearMonth.getYear(), currentMonth);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        fillCalendarDays();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Sets the title of the calendar according to a specific month and year."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param year The year."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param month The month."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void setCalendarTitle(int year, String month) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        calendarTitle.setText(\" \" + month + \" \" + year + \" \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        pane.setId(currentMonth);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Fills up the calendar with the necessary information."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void fillCalendarDays() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        gridCalendar.getChildren().clear();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        boolean flag \u003d false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int day \u003d 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_ROW \u0026\u0026 day \u003c\u003d numOfDays; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            for (int j \u003d 0; j \u003c MAX_COL \u0026\u0026 day \u003c\u003d numOfDays; j++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (dayOfTheFirstDay \u003d\u003d j) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    flag \u003d true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (flag) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    gridCalendar.add(CalendarCard.getCalendarCard(day, filteredEvents.get(day)), j, i);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    ++day;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Updates the relevant variables to contain information of the particular month."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void updateVariables() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setCalendarTitle(currentYearMonth.getYear(), currentMonth);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentMonth \u003d currentYearMonth.getMonth().toString();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        numOfDays \u003d currentYearMonth.lengthOfMonth();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        findRelevantTasks();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dayOfTheFirstDay \u003d currentYearMonth.atDay(1).getDayOfWeek().getValue() % 7;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Finds the tasks that needs to be displayed."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void findRelevantTasks() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        filteredEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d numOfDays; ++i) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            filteredEvents.add(new EventList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.sort();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            tryAddingTask(event);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to add a task to the current calendar."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param task A task from the Duke\u0027s task list."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void tryAddingTask(Event task) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        LocalDate startDate \u003d task.getStartDate().toLocalDate();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        LocalDate endDate \u003d task.getEndDate().toLocalDate();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        while (!startDate.isAfter(endDate)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (isSameYearMonth(startDate)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    filteredEvents.get(startDate.getDayOfMonth()).add(task);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                } catch (DuplicateTaskException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    logger.log(Level.WARNING, \"Duplicated tasks should not exists.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            startDate \u003d startDate.plusDays(1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Focuses on the Calendar window."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Sets the calendar layout."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param events The EventList from SGTravel containing all the events."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void setCalendarLayout(EventList events) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setCalendarBasics(events);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        refreshCalendar();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Sets the basic information of the calendar; current month, year and tasks."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void setCalendarBasics(EventList events) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ZoneId zoneId \u003d ZoneId.systemDefault(); //GMT +8"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentYearMonth \u003d YearMonth.now(zoneId).minusMonths(0);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        CalendarWindow.events \u003d events;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns true if the Calendar window is currently being shown."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks if it is the same year and month."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param date The date object."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return true If it is the same year and month."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private boolean isSameYearMonth(Object date) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return currentYearMonth.getYear() \u003d\u003d ((LocalDate) date).getYear()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                \u0026\u0026 currentYearMonth.getMonth() \u003d\u003d ((LocalDate) date).getMonth();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 52,
      "Jefferson111": 162
    }
  },
  {
    "path": "src/main/java/sgtravel/ui/dialogbox/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.ui.dialogbox;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ui.UiPart;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Dialog Box containing text only."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DialogBox extends UiPart\u003cHBox\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"DialogBox.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private HBox dialogBox;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private HBox miniBox;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the DialogBox object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param text The text to display."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param user The picture of the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private DialogBox(String text, Image user) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dialog.setMinHeight(Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        roundImageView(user);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Rounds an image."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param image The image to round."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void roundImageView(Image image) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ImagePattern pattern \u003d new ImagePattern(image);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        circle.setFill(pattern);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        miniBox.getStyleClass().remove(\"dialog\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        miniBox.getStyleClass().add(\"dialogFlip\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getRoot().getChildren());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        flipNode(tmp, this.getRoot());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ObservableList\u003cNode\u003e tmp2 \u003d FXCollections.observableArrayList(miniBox.getChildren());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        flipNode(tmp2, miniBox);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Flips the node."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param tmp The ObservableList of Nodes."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param root The HBox to interact with."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void flipNode(ObservableList\u003cNode\u003e tmp, HBox root) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets a User Dialog box for display."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param text The text to display."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param user The picture of the user."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The DialogBox created."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static HBox getUserDialog(String text, Image user) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new DialogBox(text, user).getRoot();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets a DialogBox for display."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param text The text to display."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param user The picture of the user."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The DialogBox created."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static HBox getDialog(String text, Image user) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, user);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return db.getRoot();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 2,
      "Inno97": 67,
      "Jefferson111": 33
    }
  },
  {
    "path": "src/main/java/sgtravel/ui/dialogbox/DialogBoxImage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.ui.dialogbox;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ui.UiPart;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Dialog Box containing image."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class DialogBoxImage extends UiPart\u003cHBox\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String FXML \u003d \"DialogBoxImage.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private HBox dialogBoxImage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private HBox miniBox;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private ImageView imageBox;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the DialogBoxImage object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param text The text to display."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param user The picture of the user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param picture The picture to display."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private DialogBoxImage(String text, Image user, Image picture) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dialog.setMinHeight(Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        roundImageView(user);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        setPictureView(picture);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Rounds an image."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param image The image to round."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void roundImageView(Image image) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ImagePattern pattern \u003d new ImagePattern(image);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        circle.setFill(pattern);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the image to display in the imageBox."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param image The image to display"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void setPictureView(Image image) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (image !\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            imageBox.setImage(image);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }  else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            imageBox.setFitHeight(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            dialogBoxImage.setMaxHeight(80);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        miniBox.getStyleClass().remove(\"dialog\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        miniBox.getStyleClass().add(\"dialogFlip\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getRoot().getChildren());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        flipNode(tmp, this.getRoot());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ObservableList\u003cNode\u003e tmp2 \u003d FXCollections.observableArrayList(miniBox.getChildren());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        flipNode(tmp2, miniBox);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Flips the node."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param tmp The ObservableList of Nodes."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param root The HBox to interact with."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void flipNode(ObservableList\u003cNode\u003e tmp, HBox root) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets a DialogBoxImage for display."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param text The text to display."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param user The picture of the user."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param picture The picture to display."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The DialogBoxImage created."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static HBox getDialog(String text, Image user, Image picture) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        DialogBoxImage db \u003d new DialogBoxImage(text, user, picture);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return db.getRoot();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 2,
      "Inno97": 80,
      "Jefferson111": 29
    }
  },
  {
    "path": "src/main/java/sgtravel/ui/map/LocationCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.ui.map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.geometry.Rectangle2D;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a location card in the UI."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LocationCard extends UiPart\u003cStackPane\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"LocationCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final double MAP_WINDOW_SCALING \u003d 0.667;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final double MAP_IMAGE_ASPECT_RATIO \u003d 1.47154;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final double MAP_IMAGE_X_START \u003d 104.025;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final double MAP_IMAGE_X_END \u003d 103.63;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final double MAP_IMAGE_Y_START \u003d 1.482;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final double MAP_IMAGE_Y_END \u003d 1.2;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates the LocationCard object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param location The location for the LocationCard."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param id The id of the location."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private LocationCard(Venue location, String id) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        setToolTip(location);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (\"RouteNodeStart\".equals(id) || \"RouteNodeEnd\".equals(id) || \"RouteNodeIntermediate\".equals(id)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            getRoot().setId(id);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates the tooltip card."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param location The location for the LocationCard."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param id The id of the location."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The StackPane for the tooltip."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static StackPane getCard(Venue location, String id) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new LocationCard(location, id).getRoot();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the Tooltip of the locationCard."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param location The location for the LocationCard."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void setToolTip(Venue location) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Rectangle2D primaryScreenBounds \u003d Screen.getPrimary().getVisualBounds();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double lengthY \u003d primaryScreenBounds.getHeight() * MAP_WINDOW_SCALING;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double lengthX \u003d primaryScreenBounds.getHeight() * MAP_WINDOW_SCALING * MAP_IMAGE_ASPECT_RATIO;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double offsetY \u003d lengthY"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                - ((location.getLatitude() - MAP_IMAGE_Y_END) * lengthY / (MAP_IMAGE_Y_START - MAP_IMAGE_Y_END));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double offsetX \u003d (location.getLongitude() - MAP_IMAGE_X_END) * lengthX / (MAP_IMAGE_X_START - MAP_IMAGE_X_END);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        AnchorPane.setLeftAnchor(getRoot(), offsetX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        AnchorPane.setTopAnchor(getRoot(), offsetY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Tooltip tooltip \u003d new Tooltip(location.getAddress());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Tooltip.install(getRoot(), tooltip);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        logger.log(Level.FINE, \"Relative location: \" + offsetX + \" \" + offsetY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 50,
      "Jefferson111": 18
    }
  },
  {
    "path": "src/main/java/sgtravel/ui/map/MapWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.ui.map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.geometry.Rectangle2D;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.RouteNode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a generic Map Window in the UI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class MapWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String FXML \u003d \"MapWindow.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final double MAP_WINDOW_SCALING \u003d 0.667;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final double MAP_IMAGE_ASPECT_RATIO \u003d 1.47154;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private List\u003cVenue\u003e locations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private AnchorPane map;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new MapWindow."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param root Stage to use as the root of the CalendarWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param routeNodeList The List of RouteNodes."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private MapWindow(Stage root, List\u003cRouteNode\u003e routeNodeList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        root.getScene().getStylesheets().addAll(this.getClass().getResource(\"/css/mapStyle.css\").toExternalForm());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        generateNodes(routeNodeList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        setSize();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new MapWindow."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param commandResultMap The CommandResult that contains a Route."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public MapWindow(CommandResultMap commandResultMap) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this(new Stage(), commandResultMap.getRoutes());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates the RouteNodes in a Route for the MapWindow."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param routeNodeList The List of RouteNodes."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void generateNodes(List\u003cRouteNode\u003e routeNodeList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        locations.addAll(routeNodeList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        map.getChildren().clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Venue location : locations) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            StackPane locationCard \u003d LocationCard.getCard(location, getLocationCardId(index));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            map.getChildren().add(locationCard);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the ID for a LocationCard, based on the index."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the Location."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The ID to set."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String getLocationCardId(int index) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return \"RouteNodeStart\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else if (index \u003d\u003d locations.size() - 1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return \"RouteNodeEnd\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return \"RouteNodeIntermediate\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Shows the Map window."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns true if the Map window is currently being shown."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Focuses on the Map window."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the size of the MapWindow."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void setSize() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Rectangle2D primaryScreenBounds \u003d Screen.getPrimary().getVisualBounds();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double windowHeight \u003d primaryScreenBounds.getHeight() * MAP_WINDOW_SCALING;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        map.setMaxHeight(windowHeight);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        map.setMaxWidth(windowHeight * MAP_IMAGE_ASPECT_RATIO);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 67,
      "Jefferson111": 44
    }
  },
  {
    "path": "src/main/java/sgtravel/ui/map/PointCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.ui.map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Represents a point on the map."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class PointCard extends UiPart\u003cStackPane\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String FXML \u003d \"PointCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final double LENGTH_Y \u003d 240;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final double LENGTH_Y_START \u003d 230;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final double MAP_IMAGE_Y_LATITUDE_START \u003d 1.486;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final double MAP_IMAGE_Y_LATITUDE_END \u003d 1.218;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final double LENGTH_X \u003d 288;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final double LENGTH_X_START \u003d 30;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final double MAP_IMAGE_X_LONGITUDE_START \u003d 104.028;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final double MAP_IMAGE_X_LONGITUDE_END \u003d 103.630;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates the PointCard object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param venue The Venue for the PointCard."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param color The color for the PointCard."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private PointCard(Venue venue, Paint color) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        circle.setFill(color);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setLocation();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the location of the PointCard."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void setLocation() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double offsetY \u003d LENGTH_Y_START"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                - ((venue.getLatitude() - MAP_IMAGE_Y_LATITUDE_END) * LENGTH_Y"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        / (MAP_IMAGE_Y_LATITUDE_START - MAP_IMAGE_Y_LATITUDE_END));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double offsetX \u003d LENGTH_X_START"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + (venue.getLongitude() - MAP_IMAGE_X_LONGITUDE_END) * LENGTH_X"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                / (MAP_IMAGE_X_LONGITUDE_START - MAP_IMAGE_X_LONGITUDE_END);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AnchorPane.setLeftAnchor(getRoot(), offsetX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AnchorPane.setTopAnchor(getRoot(), offsetY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip tooltip \u003d new Tooltip(venue.getAddress());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip.install(getRoot(), tooltip);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new PointCard."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param venue The Venue for the PointCard."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param color The color for the PointCard."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The PointCard."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static StackPane getCard(Venue venue, Paint color) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new PointCard(venue, color).getRoot();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 34,
      "Jefferson111": 37
    }
  },
  {
    "path": "src/main/resources/css/calendarStyle.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".calendar {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-repeat: stretch;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: 750 600;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-position: center center;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#JANUARY {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Jan.jpg\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#FEBRUARY {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Feb.jpg\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#MARCH {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Mar.jpg\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#APRIL {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Apr.jpg\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#MAY {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/May.jpg\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#JUNE {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Jun.jpg\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#JULY {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Jul.jpg\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#AUGUST {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Aug.jpg\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#SEPTEMBER {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Sep.jpg\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#OCTOBER {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Oct.jpg\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#NOVEMBER {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Nov.png\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#DECEMBER {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Dec.jpg\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".arrow-button {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-shape: \"M 0 50 L 50 0 L 50 100 z\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".calendarCard {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: rgba(100, 100, 100, 0.5);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: grey;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 10, 0.5, 0.0, 0.0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".calendarCardHover {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: rgba(150, 150, 150, 0.5);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.2), 10, 0.5, 0.0, 0.0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#day {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-weight: bolder;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#task {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#description {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dayOfWeek {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-size: 16;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-fill: linear-gradient(to bottom right, red, springgreen);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#calendarTitle {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-size: 24;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-fill: gold;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-stroke: black;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-stroke-width: 1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 108
    }
  },
  {
    "path": "src/main/resources/css/mainStyle.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dialog {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: lightblue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius: 20;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-insets: 5;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: blue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-insets: 5;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dialogFlip {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: lightgreen;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius: 20;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-insets: 5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: green;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-insets: 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#circle {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 5;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#dialogContainer {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/wallpaper.jpg\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: 400 600;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-repeat: repeat-y;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color : black;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar:vertical .track{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color : linear-gradient(to top left, mediumseagreen, midnightblue);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color : black;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar:vertical .increment-button ,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar:vertical .decrement-button {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color :transparent;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius : 0.0em;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-padding :0.0 10.0 0.0 0.0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar .increment-arrow,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar .decrement-arrow{"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-shape : \" \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-padding :0.00em 0.0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar:vertical .thumb {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color : linear-gradient(to bottom right, mediumseagreen, midnightblue);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-insets : 2.0, 0.0, 0.0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius : 2.0em;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color : honeydew;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius : 2.0em;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".mainPane {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: rgba(0, 30, 15, 0.8);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".side {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": ".routeMapPane {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-border-color: blue;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-border-width: 1"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".sidePane {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/sg.png\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: 400 300;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": ".routeSidePane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-size: 400 300;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".info {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color : black;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color : rgba(255, 255, 255, 0.0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius : 5;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius : 5;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-text-fill: turquoise;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".highlight {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: khaki;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#LocationCard {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/two.png\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: contain;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color : linear-gradient(to bottom right, mediumseagreen, midnightblue);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color : linear-gradient(to top left, mediumseagreen, midnightblue);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius : 2.0em;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius : 2.0em;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#userInput {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "  -fx-control-inner-background: rgba(10, 50, 100, 0.75);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "  -fx-text-inner-color: lightseagreen;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dialog .label {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     -fx-text-fill: mediumblue;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dialogFlip .label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-text-fill: seagreen;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 10,
      "Jefferson111": 116
    }
  },
  {
    "path": "src/main/resources/css/mapStyle.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".mainPane {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/SGmap.jpg\");"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-size: contain;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t-fx-background-repeat: no-repeat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#LocationCard {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-image: url(\"../images/location_pointer.png\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-size: contain;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "#RouteNodeStart {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-image: url(\"../images/route_node_start.png\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-size: contain;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "#RouteNodeEnd {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-image: url(\"../images/route_node_end.png\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-size: contain;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "#RouteNodeIntermediate {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-image: url(\"../images/route_node_intermediate.png\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: contain;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 18,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/resources/css/staticMapStyle.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": ".mainPane {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-size: 512 512;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 3
    }
  },
  {
    "path": "src/main/resources/view/CalendarCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cStackPane fx:id\u003d\"calendarCard\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "           onMouseClicked\u003d\"#onClick\" onMouseEntered\u003d\"#onMouseEnter\" onMouseExited\u003d\"#onMouseExit\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cLabel fx:id\u003d\"day\" text\u003d\"1\" StackPane.alignment\u003d\"TOP_RIGHT\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cLabel fx:id\u003d\"task\" StackPane.alignment\u003d\"TOP_LEFT\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cLabel fx:id\u003d\"description\" StackPane.alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 15
    }
  },
  {
    "path": "src/main/resources/view/CalendarWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "         title\u003d\"Calendar\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cVBox fx:id\u003d\"pane\" styleClass\u003d\"calendar\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                  maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003cStackPane alignment\u003d\"BASELINE_CENTER\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                           maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cInsets top\u003d\"10.0\" left\u003d\"10\" right\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cButton styleClass\u003d\"arrow-button\" StackPane.alignment\u003d\"BASELINE_LEFT\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                            onAction\u003d\"#previousMonth\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText fx:id\u003d\"calendarTitle\" text\u003d\"Test\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cButton styleClass\u003d\"arrow-button\" StackPane.alignment\u003d\"BASELINE_RIGHT\" onAction\u003d\"#nextMonth\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                            rotate\u003d\"180\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003cGridPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"30.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Sun\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Mon\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Tues\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Wed\" GridPane.columnIndex\u003d\"3\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Thu\" GridPane.columnIndex\u003d\"4\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Fri\" GridPane.columnIndex\u003d\"5\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Sat\" GridPane.columnIndex\u003d\"6\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003cGridPane fx:id\u003d\"gridCalendar\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"800\" hgap\u003d\"5\" vgap\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" right\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 84
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cHBox fx:id\u003d\"dialogBox\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "      prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "   \u003cRegion styleClass\u003d\"region\" prefWidth\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" visible\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "   \u003cHBox fx:id\u003d\"miniBox\" styleClass\u003d\"dialog\" alignment\u003d\"TOP_RIGHT\" spacing\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "      \u003cCircle fx:id\u003d\"circle\" radius\u003d\"25\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/resources/view/DialogBoxImage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003cHBox fx:id\u003d\"dialogBoxImage\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"400.0\" alignment\u003d\"TOP_RIGHT\" spacing\u003d\"10\" styleClass\u003d\"dialog\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\u003cHBox fx:id\u003d\"miniBox\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\t\u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\t\u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\t\u003cCircle fx:id\u003d\"circle\" radius\u003d\"25\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\u003c/HBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\u003cImageView fx:id\u003d\"imageBox\" fitHeight\u003d\"360.0\" fitWidth\u003d\"360.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Inno97": 21
    }
  },
  {
    "path": "src/main/resources/view/DialogBoxMap.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003cHBox fx:id\u003d\"dialogBoxImage\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t  xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"400.0\" alignment\u003d\"TOP_RIGHT\" spacing\u003d\"10\" styleClass\u003d\"dialog\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\u003cHBox fx:id\u003d\"miniBox\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\t\u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\t\u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\t\u003cCircle fx:id\u003d\"circle\" radius\u003d\"25\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\u003c/HBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\u003cAnchorPane fx:id\u003d\"map\" styleClass\u003d\"routeMapPane\" prefWidth\u003d\"360.0\" prefHeight\u003d\"360.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Inno97": 22
    }
  },
  {
    "path": "src/main/resources/view/LocationCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cStackPane fx:id\u003d\"LocationCard\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" minWidth\u003d\"30\" minHeight\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 6
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "         title\u003d\"SGTravel\" minWidth\u003d\"400\" minHeight\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "         \u003cAnchorPane styleClass\u003d\"mainPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                     minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                     xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" onKeyPressed\u003d\"#handleKeyPress\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                       AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" vbarPolicy\u003d\"ALWAYS\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "               \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"sidePanel\" layoutX\u003d\"400.0\" layoutY\u003d\"0.0\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Inno97": 2,
      "-": 16,
      "Jefferson111": 15
    }
  },
  {
    "path": "src/main/resources/view/MapWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "         title\u003d\"Map\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"map\" styleClass\u003d\"mainPane\" prefWidth\u003d\"1200.0\" prefHeight\u003d\"900.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Inno97": 1,
      "Jefferson111": 15
    }
  },
  {
    "path": "src/main/resources/view/PointCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" minWidth\u003d\"30\" minHeight\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cCircle fx:id\u003d\"circle\" radius\u003d\"10\" StackPane.alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/resources/view/SidePanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cAnchorPane styleClass\u003d\"side\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"miniMap\" styleClass\u003d\"sidePane\" StackPane.alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"300.0\" prefWidth\u003d\"400.0\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cStackPane fx:id\u003d\"taskContainer\" layoutY\u003d\"300.0\" prefHeight\u003d\"300.0\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "               prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cLabel fx:id\u003d\"description\" StackPane.alignment\u003d\"TOP_CENTER\" styleClass\u003d\"info\" visible\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cLabel fx:id\u003d\"startDate\" StackPane.alignment\u003d\"CENTER\" styleClass\u003d\"info\" visible\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cLabel fx:id\u003d\"endDate\" StackPane.alignment\u003d\"BOTTOM_CENTER\" styleClass\u003d\"info\" visible\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cInsets bottom\u003d\"100.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 19
    }
  },
  {
    "path": "src/main/resources/view/StaticMapWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "         title\u003d\"Map\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"map\" styleClass\u003d\"mainPane\" prefWidth\u003d\"512.0\" prefHeight\u003d\"512.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/test/java/sgtravel/ModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.NoSuchItineraryException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.RouteList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.VenueList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Recommendation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.profile.ProfileCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.TransportationMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Implements the methods defined in the Model Interface."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private StorageStub storage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private RouteList routes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private TransportationMap map;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ProfileCard profileCard;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Recommendation recommendations;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private HashMap\u003cString, Itinerary\u003e itineraryTable;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Itinerary recentItinerary;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a new ModelManager object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public ModelStub() throws FileLoadFailException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        events \u003d storage.getEvents();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        map \u003d storage.getMap();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routes \u003d storage.getRoutes();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        profileCard \u003d storage.getProfileCard();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        recommendations \u003d storage.getRecommendations();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        itineraryTable \u003d storage.getItineraryTable();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return profileCard.getPersonName();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void addToFavourite(String name, Itinerary itinerary) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        profileCard.addFavourite(name, itinerary);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void deleteFavourite(String name) throws NoSuchItineraryException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        profileCard.deleteFavourite(name);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void doneItinerary(String name) throws NoSuchItineraryException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (itineraryTable.get(name) \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new NoSuchItineraryException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.itineraryTable.remove(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public TransportationMap getMap() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public EventList getEvents() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setEvents(EventList events) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteList getRoutes() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return routes;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Route getRoute(int index) throws OutOfBoundsException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return routes.get(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new OutOfBoundsException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public HashMap\u003cString, BusStop\u003e getBusStops() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return map.getBusStopMap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Recommendation getRecommendations() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return recommendations;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public HashMap\u003cString, Itinerary\u003e getItineraryTable() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return itineraryTable;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setRecentItinerary(Itinerary recentItinerary) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.recentItinerary \u003d recentItinerary;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Itinerary getRecentItinerary() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return recentItinerary;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setNewItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.itineraryTable.put(itinerary.getName(), itinerary);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void confirmRecentItinerary(String name) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        recentItinerary.setName(name);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.itineraryTable.put(name, recentItinerary);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public VenueList getEventVenues() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new VenueList(events);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public ProfileCard getProfileCard() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return profileCard;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Shows the Itinerary specified by a give name."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param name The serial number of the Itinerary."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Itinerary getItinerary(String name) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return itineraryTable.get(name);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a route to the list of routes."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The route to add."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void addRoute(Route route) throws DuplicateRouteException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routes.add(route);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Saves the file to local storage."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void save() throws FileNotSavedException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        storage.write();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 58,
      "Inno97": 54,
      "hongchuan97": 22,
      "Jefferson111": 40
    }
  },
  {
    "path": "src/test/java/sgtravel/StorageStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.storageparsers.EventStorageParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.storageparsers.PlanningStorageParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.storageparsers.TransportStorageParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.RouteList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.TrainStation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Agenda;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Recommendation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Todo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.profile.ProfileCard;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.BusService;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.TransportationMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Manages storage of Duke data in local storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class StorageStub {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    //    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private RouteList routes;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private TransportationMap map;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private ProfileCard profileCard;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Recommendation recommendation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private HashMap\u003cString, Itinerary\u003e itineraryTable;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String BUS_FILE_PATH \u003d \"/data/bus.txt\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String RECOMMENDATIONS_FILE_PATH \u003d \"/data/recommendations.txt\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String TRAIN_FILE_PATH \u003d \"/data/train.txt\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String EVENTS_FILE_PATH \u003d \"events.txt\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String ROUTES_FILE_PATH \u003d \"routes.txt\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String ITINERARIES_FILE_PATH \u003d \"itineraries.txt\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    // private static final String PROFILE_FILE_PATH \u003d \"profile.txt\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Constructs a Storage object that contains information from the model."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public StorageStub() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        events \u003d new EventList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        routes \u003d new RouteList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        itineraryTable \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        profileCard \u003d new ProfileCard();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        read();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Reads all storage file."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void read() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        readBus();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        readTrain();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        readRecommendations();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Reads the itinerary hash map from storage."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileLoadFailException If the file cannot be loaded."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void readItineraryTable() throws FileLoadFailException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            File itinerariesFile \u003d new File(ITINERARIES_FILE_PATH);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Scanner scanner \u003d new Scanner(itinerariesFile);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            while (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                String name \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(scanner.nextLine());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(scanner.nextLine());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                Itinerary itinerary \u003d new Itinerary(start, end, name);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                List\u003cAgenda\u003e agendaList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                String fileLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                while (fileLine.split(\"\\\\|\")[0].equals(\"Agenda \")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    List\u003cVenue\u003e venueList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    List\u003cTodo\u003e todoList;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    final int number2 \u003d Integer.parseInt(fileLine.split(\"\\\\|\")[1]);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    String newVenue \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    while (newVenue.contains(\" | \")) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        venueList.add(PlanningStorageParser.getVenueFromStorage(newVenue));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        newVenue \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    todoList \u003d PlanningStorageParser.getTodoListFromStorage(newVenue);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    Agenda agenda \u003d new Agenda(todoList, venueList, number2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    agendaList.add(agenda);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    if (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        fileLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                itinerary.setTasks(agendaList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                itineraryTable.put(itinerary.getName(), itinerary);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            scanner.close();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (FileNotFoundException | ParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileLoadFailException(ITINERARIES_FILE_PATH);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Reads train from filepath."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private void readTrain() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assert this.map !\u003d null : \"Map must be created first\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        HashMap\u003cString, TrainStation\u003e trainMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Scanner s \u003d new Scanner(getClass().getResourceAsStream(TRAIN_FILE_PATH));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            TrainStation newTrain \u003d TransportStorageParser.createTrainFromStorage(s.nextLine());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            trainMap.put(newTrain.getDescription(), newTrain);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.map.setTrainMap(trainMap);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Reads bus from filepath."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private void readBus() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        HashMap\u003cString, BusStop\u003e busStopData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        HashMap\u003cString, BusService\u003e busData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Scanner s \u003d new Scanner(getClass().getResourceAsStream(BUS_FILE_PATH));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        boolean isBusData \u003d false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            if (\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\".equals(line)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                isBusData \u003d true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            if (isBusData) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                BusService busService \u003d TransportStorageParser.createBusFromStorage(line);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                busData.put(busService.getBus(), busService);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                BusStop busStop \u003d TransportStorageParser.createBusStopDataFromStorage(line);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                busStopData.put(busStop.getBusCode(), busStop);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.map \u003d new TransportationMap(busStopData, busData);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns Venues fetched from stored memory."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void readRecommendations() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cAgenda\u003e agendaList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Scanner scanner \u003d new Scanner(getClass().getResourceAsStream(RECOMMENDATIONS_FILE_PATH));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            List\u003cVenue\u003e venueList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                venueList.add(PlanningStorageParser.getVenueFromStorage(scanner.nextLine()));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                List\u003cTodo\u003e todoList \u003d PlanningStorageParser.getTodoListFromStorage(scanner.nextLine());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                venueList.add(PlanningStorageParser.getVenueFromStorage(scanner.nextLine()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                todoList.addAll(PlanningStorageParser.getTodoListFromStorage(scanner.nextLine()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                Agenda agenda \u003d new Agenda(todoList, venueList, i++);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                agendaList.add(agenda);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                assert (false);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.recommendation \u003d new Recommendation(agendaList);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Writes the tasks into a file of the given filepath."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileNotSavedException If a file cannot be saved."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void write() throws FileNotSavedException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        writeEvents();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        writeRoutes();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Writes the events to local storage."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private void writeEvents() throws FileNotSavedException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            FileWriter writer \u003d new FileWriter(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            for (Event event : events) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                writer.write(EventStorageParser.toStorageString(event) + \"\\n\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileNotSavedException(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Writes the events to local storage."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private void writeRoutes() throws FileNotSavedException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            FileWriter writer \u003d new FileWriter(ROUTES_FILE_PATH);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            String routesString \u003d \"\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            for (Route route : routes) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                routesString +\u003d TransportStorageParser.toRouteStorageString(route);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writer.write(routesString);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileNotSavedException(ROUTES_FILE_PATH);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public EventList getEvents() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public TransportationMap getMap() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return this.map;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public RouteList getRoutes() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return routes;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public ProfileCard getProfileCard() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return profileCard;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Recommendation getRecommendations() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return recommendation;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public HashMap\u003cString, Itinerary\u003e getItineraryTable() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return this.itineraryTable;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 209,
      "hongchuan97": 1,
      "Jefferson111": 42
    }
  },
  {
    "path": "src/test/java/sgtravel/UiStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class UiStub {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiStub(VBox dialogContainer) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/PathFinderTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.exceptions.RouteGenerateFailException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class PathFinderTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws FileLoadFailException, RouteGenerateFailException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        PathFinder pathFinder \u003d new PathFinder(modelStub.getMap());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Venue buonaVistaMrt \u003d new Venue(\"Buona Vista\",1.3073, 103.8077,0,0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Venue yewTeeMrt \u003d new Venue(\"yewtee\", 1.3973, 103.7475,0,0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertNotNull(pathFinder.execute(buonaVistaMrt, yewTeeMrt, Constraint.MRT));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertNotNull(pathFinder.execute(buonaVistaMrt, yewTeeMrt, Constraint.BUS));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 2,
      "hongchuan97": 19,
      "Jefferson111": 5
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"NUS\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(event);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        addCommand.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(model.getEvents().contains(event));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e addCommand.execute(model));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event2 \u003d new Event(\"NTU\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AddCommand addCommand2 \u003d new AddCommand(event2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        addCommand2.execute(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(model.getEvents().contains(event));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(model.getEvents().contains(event2));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 32
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/AddProfileCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class AddProfileCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Model modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ProfileAddCommand profileCommand \u003d new ProfileAddCommand(\"name\", LocalDateTime.now());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        CommandResultText resultText \u003d profileCommand.execute(modelStub);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(resultText.getMessage(), \"Welcome to SGTravel!\\nname\\n\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 1,
      "hongchuan97": 17,
      "Jefferson111": 5
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/AddSampleItineraryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "class AddSampleItineraryCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime startDate \u003d LocalDateTime.of(2020, 9, 9, 9, 9);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime endDate \u003d LocalDateTime.of(2020, 9, 13, 9, 9);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String [] itineraryDetails \u003d {\"itinerary \", startDate.toString(), endDate.toString()};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        RecommendationsCommand recommendationsCommand \u003d new RecommendationsCommand(itineraryDetails);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        recommendationsCommand.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        AddSampleItineraryCommand addSampleItineraryCommand \u003d new AddSampleItineraryCommand(\"New List\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        addSampleItineraryCommand.execute(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertTrue(model.getItineraryTable().containsKey(\"New List\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 30,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/CommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class CommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new HelpCommand() instanceof Command);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new ListCommand() instanceof Command);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new ExitCommand() instanceof Command);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new EditorCommand() instanceof Command);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new EditCommand(true, new EventList()) instanceof Command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new EditCommand(false, new EventList()) instanceof Command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new PromptCommand(\"hi\") instanceof Command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new ViewScheduleCommand() instanceof Command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 21
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Sentosa\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model.getEvents().add(event);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        deleteCommand.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(model.getEvents().contains(event));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e deleteCommand.execute(model));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        DeleteCommand d2 \u003d new DeleteCommand(99999);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e d2.execute(model));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        DeleteCommand d3 \u003d new DeleteCommand(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e d3.execute(model));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        DeleteCommand d4 \u003d new DeleteCommand(-2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e d4.execute(model));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        DeleteCommand d5 \u003d new DeleteCommand(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e d5.execute(model));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 11,
      "Jefferson111": 24
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class EditCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws FileNotSavedException, FileLoadFailException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(false, new EventList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        CommandResultText resultText \u003d editCommand.execute(modelStub);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(resultText.getMessage(), \"Changes are not saved.\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(resultText.getMessage(), \"Changes are not saved.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditCommand editCommand1 \u003d new EditCommand(true, new EventList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        CommandResultText resultText1 \u003d editCommand1.execute(modelStub);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(resultText1.getMessage(), \"Here are the list of events:\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(resultText1.getMessage(), \"Here are the list of events:\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Jefferson111": 26
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class ExitCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Command c \u003d new ExitCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(c.execute(model) instanceof CommandResultExit);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Jefferson111": 18
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Command c \u003d new FindCommand(\"meow\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(c.execute(modelStub) instanceof CommandResultText);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Command b \u003d new FindCommand(\"moo\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(b.execute(modelStub) instanceof CommandResultText);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Jefferson111": 20
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/GetBusRouteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class GetBusRouteCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getBusRouteTest() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"Here is the bus route:\\n\" + \"45009 BT PANJANG INT\\n\" + \"44259 Blk 183\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"44149 Opp Phoenix Stn\\n\" + \"44271 Bet Blks 13/14\\n\" + \"44281 Blk 8\\n\" + \"44291 Opp Cck Polyclinic\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"44391 Aft Blk 202\\n\" + \"44531 Opp Choa Chu Kang Stn\\n\" + \"44461 Blk 352\\n\" + \"44521 Blk 280\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"44511 Blk 289\\n\" + \"44689 Sunshine Pl\\n\" + \"44079 Opp Blk 464\\n\" + \"30089 Aft Hai Inn See Tp\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"30099 Opp Chengtai Nursery\\n\" + \"30059 Opp Track 14\\n\" + \"30049 Home Team Academy\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"30039 Army Logistics Base\\n\" + \"30029 Keat Hong Camp\\n\" + \"30019 Opp Tengah Air Base\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"31199 B25 Old Choa Chu Kang Rd\\n\" + \"31179 Aft Jln Berseri\\n\" + \"31169 Teen Challenge\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"31159 Bef Lim Chu Kang Rd\\n\" + \"31061 Opp Lim Chu Kang Camp II\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"31071 Aft Chinese Cemy Path 11\\n\" + \"31081 Opp HQ 5th SIB Camp I\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"34101 Aft Old Lim Chu Kang Rd\\n\" + \"32101 Aft Murai Farmway\\n\" + \"32111 Aft LP 93\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"32031 Opp Ama Keng Rd\\n\" + \"32041 Opp LP 160\\n\" + \"32051 Aft Track 11\\n\" + \"32061 Opp LP 173\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"32071 Aft Track 13\\n\" + \"32081 Sg Gedong Camp\\n\" + \"33011 B19 Lim Chu Kang Rd\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"33021 Opp Neo Tiew Rd\\n\" + \"33031 Aft Jln Bahtera\\n\" + \"33041 Opp Lim Chu Kang Lane 3\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"33051 Bef Lim Chu Kang Lane 3A\\n\" + \"34011 Opp Lim Chu Kang Lane 4\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"34021 Opp Lim Chu Kang Lane 5\\n\" + \"34031 Aft Lim Chu Kang Lane 6\\n\" + \"34041 B03 Lim Chu Kang Rd\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"34051 Aft Lim Chu Kang Lane 8\\n\" + \"34009 Police Coast Guard\\n\" + \"34059 Yishun Dairy Farm\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"34049 Aft Lim Chu Kang Lane 8\\n\" + \"34039 Bef Lim Chu Kang Lane 6\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"34029 Bef Lim Chu Kang Lane 5\\n\" + \"34019 Aft Lim Chu Kang Lane 4\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"33059 Aft Lim Chu Kang Lane 3A\\n\" + \"33049 Aft Lim Chu Kang Lane 3\\n\" + \"33039 Opp Jln Bahtera\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"33029 Aft Neo Tiew Rd\\n\" + \"33019 B20 Lim Chu Kang Rd\\n\" + \"32089 Aft Sg Gedong Camp\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"32079 Opp Track 13\\n\" + \"32069 B26 Lim Chu Kang Rd\\n\" + \"32059 Opp Track 11\\n\" + \"32049 Aft LP 161\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"32039 Aft Ama Keng Rd\\n\" + \"32119 Aft LP 96\\n\" + \"32109 Bef Lor Serambi\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"34109 Aft Lim Chu Kang Rd\\n\" + \"31089 HQ 5th SIB Camp I\\n\" + \"31079 Opp Chinese Cemy Path 11\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"31069 Bef Old Choa Chu Kang Rd\\n\" + \"31151 Aft Lim Chu Kang Rd\\n\" + \"31161 Opp Teen Challenge\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"31171 Opp Jln Berseri\\n\" + \"31191 B26 Old Choa Chu Kang Rd\\n\" + \"30011 Tengah Air Base\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"30021 Opp Keat Hong Camp\\n\" + \"30031 Opp Army Logistics Base\\n\" + \"30041 Opp Home Team Academy\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"30051 Aft Track 14\\n\" + \"30091 Chengtai Nursery\\n\" + \"30081 Opp Hai Inn See Tp\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"44071 Blk 464\\n\" + \"44519 Blk 402\\n\" + \"44529 Blk 410\\n\" + \"44469 Blk 414\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"44539 Lot 1/Choa Chu Kang Stn\\n\" + \"44399 Opp Blk 210\\n\" + \"44299 Cck Polyclinic\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"44289 Blk 6\\n\" + \"44279 Blk 157\\n\" + \"44141 Phoenix Stn\\n\" + \"44251 Bt Panjang Stn/Blk 604\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"45009 BT PANJANG INT\\n\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        GetBusRouteCommand command \u003d new GetBusRouteCommand(\"975\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, command.execute(model).getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expectedError \u003d \"I\u0027m sorry, but nothing was found...\\n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //non-existant bus stop"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        GetBusRouteCommand command2 \u003d new GetBusRouteCommand(\"0\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expectedError, command2.execute(model).getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative number bus stop"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        GetBusRouteCommand command3 \u003d new GetBusRouteCommand(\"-1\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expectedError, command3.execute(model).getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        GetBusRouteCommand command4 \u003d new GetBusRouteCommand(\"-2\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expectedError, command4.execute(model).getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for string"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        GetBusRouteCommand command5 \u003d new GetBusRouteCommand(\"test\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command5.execute(model).getMessage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 67,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/GetBusStopCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class GetBusStopCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getBusStopTest() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"This is the information for this Bus Stop:\\n\" + \"Clementi Int\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"99\\n\" + \"14\\n\" + \"96A\\n\" + \"96B\\n\" + \"147e\\n\" + \"7B\\n\" + \"282\\n\" + \"173\\n\" + \"284\\n\" + \"196\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"285\\n\" + \"175\\n\" + \"165\\n\" + \"166\\n\" + \"156\\n\" + \"147\\n\" + \"7\\n\" + \"96\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        GetBusStopCommand command \u003d new GetBusStopCommand(\"17009\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, command.execute(model).getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //non-existant bus stop"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        GetBusStopCommand command2 \u003d new GetBusStopCommand(\"0\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command2.execute(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative number bus stop"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        GetBusStopCommand command3 \u003d new GetBusStopCommand(\"-1\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command3.execute(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        GetBusStopCommand command4 \u003d new GetBusStopCommand(\"-2\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command4.execute(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        GetBusStopCommand command5 \u003d new GetBusStopCommand(\"test\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(DukeException.class, () -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command5.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 43,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Command c \u003d new HelpCommand();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(c instanceof HelpCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 18
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/ListItineraryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.planning.Itinerary;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "class ListItineraryCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime startDate \u003d LocalDateTime.of(2020, 9, 9, 9, 9);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime endDate \u003d LocalDateTime.of(2020, 9, 13, 9, 9);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String [] itineraryDetails \u003d {\"itinerary \", startDate.toString(), endDate.toString()};"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        RecommendationsCommand recommendationsCommand \u003d new RecommendationsCommand(itineraryDetails);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        recommendationsCommand.execute(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        AddSampleItineraryCommand addSampleItineraryCommand \u003d new AddSampleItineraryCommand(\"New List\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        addSampleItineraryCommand.execute(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        ListItineraryCommand listItineraryCommand \u003d new ListItineraryCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        CommandResultText commandResultText \u003d listItineraryCommand.execute(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String result \u003d commandResultText.getMessage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        StringBuilder stringBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        HashMap\u003cString, Itinerary\u003e itineraryHashMap \u003d model.getItineraryTable();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (String name : itineraryHashMap.keySet()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            stringBuilder.append(i++).append(\". \").append(name).append(\"\\n\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertEquals(result, \"Your Saved Itineraries are :\" + \"\\n\" + stringBuilder.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 46,
      "Jefferson111": 5
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/LocationSearchCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class LocationSearchCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String SENTOSA_MESSAGE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \u003d \"These are the coordinates of your search:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"SENTOSA\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"1.2498144130047 103.82948052356899\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String TIMEOUT_MESSAGE \u003d \"Sorry, but the search has timed out due to connection issues.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for a regular search"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        LocationSearchCommand locationSearchCommand1 \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (LocationSearchCommand) Parser.parseComplexCommand(\"search sentosa\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(SENTOSA_MESSAGE, locationSearchCommand1.execute(model).getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //not a valid location, will timeout"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        LocationSearchCommand locationSearchCommand2 \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (LocationSearchCommand) Parser.parseComplexCommand(\"search invalid-location\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(TIMEOUT_MESSAGE, locationSearchCommand2.execute(model).getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //random nonsense query, will timeout"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        LocationSearchCommand locationSearchCommand3 \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (LocationSearchCommand) Parser.parseComplexCommand(\"search #\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(TIMEOUT_MESSAGE, locationSearchCommand3.execute(model).getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 33,
      "Jefferson111": 6
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/MarkDoneCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "class MarkDoneCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"NUS\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(event);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        addCommand.execute(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        MarkDoneCommand markDoneCommand \u003d new MarkDoneCommand(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        markDoneCommand.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(model.getEvents().get(0).isDone());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 12,
      "Jefferson111": 14
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/NewItineraryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "class NewItineraryCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime startDate \u003d LocalDateTime.of(2020, 9, 9, 9, 9);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime endDate \u003d LocalDateTime.of(2020, 9, 13, 9, 9);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String [] itineraryDetails \u003d {\"itinerary \", startDate.toString(), endDate.toString()};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        RecommendationsCommand recommendationsCommand \u003d new RecommendationsCommand(itineraryDetails);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        recommendationsCommand.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        NewItineraryCommand newItineraryCommand \u003d new NewItineraryCommand(model.getRecentItinerary());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        newItineraryCommand.execute(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertTrue(model.getItineraryTable().containsKey(\"New Recommendation\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 30,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/ProfileSetPreferenceTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ProfileSetPreferenceTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Model modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new ProfileSetPreferenceCommand(\"sports\", \"falseee\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e new ProfileSetPreferenceCommand(\"spoorts\", \"true\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ProfileSetPreferenceCommand profileSetPreferenceCommand \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                new ProfileSetPreferenceCommand(\"sports\", \"false\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        CommandResult resultText \u003d profileSetPreferenceCommand.execute(modelStub);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertEquals(resultText.getMessage(), \"Your preference for sports is set to false\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 19,
      "Jefferson111": 6
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/ProfileShowCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ProfileShowCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Model modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ProfileShowCommand profileShowCommand \u003d new ProfileShowCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        CommandResultText resultText \u003d profileShowCommand.execute(modelStub);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertEquals(resultText.getMessage(), \"PROFILE:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                + \"Name: New User\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                + \"Age: 0\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                + \"Likes:\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                + \"Favorite Itinerary:\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 22,
      "Jefferson111": 5
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/RecommendationsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "class RecommendationsCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime startDate \u003d LocalDateTime.of(2020, 9, 9, 9, 9);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime endDate \u003d LocalDateTime.of(2020, 9, 13, 9, 9);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String [] itineraryDetails \u003d {\"itinerary \", startDate.toString(), endDate.toString()};"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        RecommendationsCommand recommendationsCommand \u003d new RecommendationsCommand(itineraryDetails);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        CommandResultText commandResult \u003d recommendationsCommand.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String result1 \u003d commandResult.getMessage();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertEquals(result1, model.getRecentItinerary().printItinerary());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 25,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/RouteAddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteAddCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"2113\", null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteAddCommand) Parser.parseComplexCommand(\"routeAdd 2113\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(route.getName(), model.getRoutes().get(0).getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 20,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/RouteDeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteDeleteCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteAddCommand) Parser.parseComplexCommand(\"routeAdd 2113\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteDeleteCommand routeDeleteCommand1 \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteDeleteCommand) Parser.parseComplexCommand(\"routeDelete 1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeDeleteCommand1.execute(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, model.getRoutes().size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for deleting non-existant route"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteDeleteCommand routeDeleteCommand2 \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteDeleteCommand) Parser.parseComplexCommand(\"routeDelete 1\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeDeleteCommand2.execute(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 29,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/RouteEditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.UnknownFieldException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteEditCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteAddCommand) Parser.parseComplexCommand(\"routeAdd 2113\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteEditCommand routeEditCommand1 \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteEditCommand) Parser.parseComplexCommand(\"routeEdit 1 name 2113T\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeEditCommand1.execute(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"2113T\", model.getRoutes().get(0).getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for editing non-existant route"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteEditCommand routeEditCommand2 \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteEditCommand) Parser.parseComplexCommand(\"routeEdit 2 name 2113T\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeEditCommand2.execute(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteEditCommand routeEditCommand3 \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteEditCommand) Parser.parseComplexCommand(\"routeEdit 1 description 2113T\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeEditCommand3.execute(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"2113T\", model.getRoutes().get(0).getDescription());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for editing non-existant field"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteEditCommand routeDeleteCommand4 \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteEditCommand) Parser.parseComplexCommand(\"routeEdit 1 test 2113T\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(UnknownFieldException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeDeleteCommand4.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 40,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/RouteGenerateCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteNodeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.RouteGenerateFailException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.UnknownConstraintException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RouteGenerateCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    void execute() throws FileLoadFailException, UnknownConstraintException, DuplicateRouteNodeException,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            FileNotSavedException, RouteGenerateFailException, ApiException,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            DuplicateRouteException, QueryFailedException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        RouteGenerateCommand routeGenerateBus \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                new RouteGenerateCommand(\"sentosa\", \"amk\", Constraint.BUS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        CommandResultText resultText \u003d routeGenerateBus.execute(modelStub);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertEquals(resultText.getMessage(), \"Route generated successfully: \\n\" + \"sentosa to amk  (BUS)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 1,
      "hongchuan97": 18,
      "Jefferson111": 12
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/RouteListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteListCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"Here is the information of the Route:\\n2113\\n\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteAddCommand) Parser.parseComplexCommand(\"routeAdd 2113\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteListCommand routeListCommand1 \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteListCommand) Parser.parseComplexCommand(\"routeList 1\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        CommandResultText result \u003d routeListCommand1.execute(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, result.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for non-existing route"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteListCommand routeListCommand2 \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteListCommand) Parser.parseComplexCommand(\"routeList 2\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeListCommand2.execute(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for index 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteListCommand routeListCommand3 \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteListCommand) Parser.parseComplexCommand(\"routeList 0\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeListCommand3.execute(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for negative index"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteListCommand routeListCommand4 \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteListCommand) Parser.parseComplexCommand(\"routeList -1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeListCommand4.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 46,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/RouteNodeAddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteNodeAddCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"2113\", null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRoutes().add(route);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for ExceptionInInitializerError exception, as it is thrown as a result of the image generated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //after the command has been executed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(ExceptionInInitializerError.class, () -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteNodeAddCommand routeNodeAddCommand1 \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    (RouteNodeAddCommand) Parser.parseComplexCommand(\"routeNodeAdd 1 at 66211 by bus\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeAddCommand1.execute(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(model.getRoutes().get(0).getNode(0) instanceof BusStop);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop busStop \u003d new BusStop(\"66211\", null, null, 0.0, 0.0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop newBusStop \u003d (BusStop) model.getRoutes().get(0).getNode(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(busStop.getBusCode(), newBusStop.getBusCode());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        //negative test for adding to non-existent route"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeAddCommand routeNodeAddCommand2 \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeAddCommand) Parser.parseComplexCommand(\"routeNodeAdd 2 at 66211 by bus\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeAddCommand2.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 36,
      "Jefferson111": 12
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/RouteNodeDeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteNodeDeleteCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteAddCommand) Parser.parseComplexCommand(\"routeAdd 2113\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop newNode \u003d new BusStop(\"66211\", \"\", \"\", 0, 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        newNode.fetchData(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRoutes().get(0).addNode(newNode);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(model.getRoutes().get(0).getNode(0) instanceof BusStop);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeDeleteCommand routeNodeDeleteCommand \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeDeleteCommand) Parser.parseComplexCommand(\"routeNodeDelete 1 1\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeNodeDeleteCommand.execute(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(model.getRoutes().get(0).size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for deleting non-existant route node"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeDeleteCommand routeNodeDeleteCommand3 \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeDeleteCommand) Parser.parseComplexCommand(\"routeNodeDelete 1 1\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeDeleteCommand3.execute(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteDeleteCommand routeDeleteCommand \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteDeleteCommand) Parser.parseComplexCommand(\"routeDelete 1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeDeleteCommand.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for deleting non-existant route node in non-existant route"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeDeleteCommand routeNodeDeleteCommand4 \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeDeleteCommand) Parser.parseComplexCommand(\"routeNodeDelete 1 1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeDeleteCommand4.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 44,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/RouteNodeListAllCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteNodeListAllCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws FileLoadFailException, DuplicateRouteException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route1 \u003d new Route(\"Go to NUS\", \"by SGTRavel\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route2 \u003d new Route(\"Go to MBS\", \"take the train\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route3 \u003d new Route(\"Go to Pulau Tekong\", \"I like the ferry\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRoutes().add(route1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRoutes().add(route2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRoutes().add(route3);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"Here is the information of Routes:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"There are 3 Routes.\\n\" + \"\\n\" + \"(1) Go to NUS\\n\" + \"Description:\\n\" + \"by SGTRavel\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"\\n\" + \"(2) Go to MBS\\n\" + \"Description:\\n\" + \"take the train\\n\" + \"\\n\" + \"(3) Go to Pulau Tekong\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"Description:\\n\" + \"I like the ferry\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteListAllCommand command \u003d new RouteListAllCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, command.execute(model).getMessage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 26,
      "Jefferson111": 5
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/RouteNodeNeighboursCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteNodeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.TrainStation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteNodeNeighboursCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws FileLoadFailException, QueryFailedException, DuplicateRouteException,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            DuplicateRouteNodeException, OutOfBoundsException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"To Clementi\", \"by bus!\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop busStop \u003d new BusStop(\"17009\", model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(busStop);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.addRoute(route);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeNeighboursCommand command1 \u003d new RouteNodeNeighboursCommand(0, 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(NoClassDefFoundError.class, () -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command1.execute(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //OOB tests"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expectedError \u003d \"Index requested is out of bounds! :-(\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeNeighboursCommand command2 \u003d new RouteNodeNeighboursCommand(1, 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expectedError, command2.execute(model).getMessage());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeNeighboursCommand command3 \u003d new RouteNodeNeighboursCommand(-1, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expectedError, command3.execute(model).getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeNeighboursCommand command4 \u003d new RouteNodeNeighboursCommand(0, 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expectedError, command4.execute(model).getMessage());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeNeighboursCommand command5 \u003d new RouteNodeNeighboursCommand(0, -1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expectedError, command5.execute(model).getMessage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        TrainStation trainStation \u003d new TrainStation(\"Ang Mo Kio\", model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRoutes().get(0).addNode(trainStation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeNeighboursCommand command6 \u003d new RouteNodeNeighboursCommand(0, 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(NoClassDefFoundError.class, () -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command6.execute(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 45,
      "Jefferson111": 11
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/RouteNodeShowCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteNodeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.TrainStation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteNodeShowCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws FileLoadFailException, DuplicateRouteException, QueryFailedException,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            DuplicateRouteNodeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"To Clementi\", \"by bus!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop busStop \u003d new BusStop(\"17009\", model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(busStop);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.addRoute(route);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //NoClassDefFoundError thrown when image is created"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeShowCommand command \u003d new RouteNodeShowCommand(0, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(NoClassDefFoundError.class, () -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command.execute(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //OOB tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeShowCommand command2 \u003d new RouteNodeShowCommand(1, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command2.execute(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeShowCommand command3 \u003d new RouteNodeShowCommand(-1, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command3.execute(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeShowCommand command4 \u003d new RouteNodeShowCommand(0, -1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command4.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeShowCommand command5 \u003d new RouteNodeShowCommand(0, 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command5.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        TrainStation trainStation \u003d new TrainStation(\"Ang Mo Kio\", model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRoutes().get(0).addNode(trainStation);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //NoClassDefFoundError thrown when image is created"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeShowCommand command6 \u003d new RouteNodeShowCommand(0, 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(NoClassDefFoundError.class, () -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command6.execute(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //edit first node such that is cannot be searched"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRoutes().get(0).getNode(0).setAddress(\"somewhere_not_in_singapore\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(NoClassDefFoundError.class, () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command.execute(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 56,
      "Jefferson111": 14
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/RouteShowCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteNodeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteShowCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws FileLoadFailException, DuplicateRouteException, OutOfBoundsException,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            DuplicateRouteNodeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"Test route\", \"2113\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.addRoute(route);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteShowCommand command \u003d new RouteShowCommand(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop v1 \u003d new BusStop(\"45039\",\"Opp Yew Tee Ind Est\", \"Woodlands Rd\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                1.39585817355572, 103.75427816224409);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRoutes().get(0).addNode(v1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        command \u003d new RouteShowCommand(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        command.execute(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //OOB tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteShowCommand command2 \u003d new RouteShowCommand(-1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command2.execute(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteShowCommand command3 \u003d new RouteShowCommand(-2);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command3.execute(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteShowCommand command4 \u003d new RouteShowCommand(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command4.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteShowCommand command5 \u003d new RouteShowCommand(2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command5.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 42,
      "Jefferson111": 11
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/ShowItineraryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "class ShowItineraryCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime startDate \u003d LocalDateTime.of(2020, 9, 9, 9, 9);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime endDate \u003d LocalDateTime.of(2020, 9, 13, 9, 9);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String [] itineraryDetails \u003d {\"itinerary \", startDate.toString(), endDate.toString()};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        RecommendationsCommand recommendationsCommand \u003d new RecommendationsCommand(itineraryDetails);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        recommendationsCommand.execute(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        AddSampleItineraryCommand addSampleItineraryCommand \u003d new AddSampleItineraryCommand(\"New List\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        addSampleItineraryCommand.execute(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        ShowItineraryCommand showItineraryCommand \u003d new ShowItineraryCommand(\"New List\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        CommandResultText commandResultText \u003d showItineraryCommand.execute(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String result \u003d commandResultText.getMessage();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertEquals(result, model.getItinerary(\"New List\").printItinerary());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 37,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/commands/StaticMapCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class StaticMapCommandTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void command() throws FileLoadFailException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String query \u003d \"Sentosa\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        StaticMapCommand command \u003d new StaticMapCommand(query);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(NoClassDefFoundError.class, () -\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command.execute(model);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 17,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/conversations/ConversationManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.PromptCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class ConversationManagerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void converse() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"delete\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(conversationManager.getCommand() instanceof PromptCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"Travel the Seven seas\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(conversationManager.getCommand() instanceof PromptCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(conversationManager.getCommand() instanceof DeleteCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void clearContext() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"done\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(conversationManager.getCommand() instanceof PromptCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.clearContext();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(NullPointerException.class, conversationManager::getCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getCommand() throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"delete\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(conversationManager.getCommand() instanceof PromptCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 3,
      "Jefferson111": 37
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/conversations/DeleteConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class DeleteConversationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        DeleteConversation deleteConversation \u003d new DeleteConversation();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        deleteConversation.execute(\"one\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(deleteConversation.isFinished());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void buildResult() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        DeleteConversation deleteConversation \u003d new DeleteConversation();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        deleteConversation.execute(\"1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(deleteConversation.isFinished());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        deleteConversation.buildResult();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(\"delete 1\", deleteConversation.getResult());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 26
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/conversations/ProfileConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ProfileConversationTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    void converse() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        conversationManager.converse(\"profile\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        conversationManager.converse(\"name\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        conversationManager.converse(\"not_an_date\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_DATE, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        conversationManager.converse(\"01/01/01\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String expected \u003d \"profile name 01/01/01\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 29,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/conversations/RouteAddConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteAddConversationTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void converse() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeAdd\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"test_route\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeAdd test_route desc test_description\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"test_description\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 24,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/conversations/RouteDeleteConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteDeleteConversationTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void converse() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeDelete\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeDelete 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 26,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/conversations/RouteEditConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteEditConversationTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testForName() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeEdit\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-existant field"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_field\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_ROUTE_FIELD, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"name\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeEdit 1 name test_name\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"test_name\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testForDescription() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeEdit\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-existant field"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_field\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_ROUTE_FIELD, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"description\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeEdit 1 description test_description\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"test_description\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 65,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/conversations/RouteGenerateConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteGenerateConversationTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testForBus() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeGenerate\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"amk hub\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"nus\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-existant field"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_field\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.ERROR_CONSTRAINT_UNKNOWN, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeGenerate amk hub to nus by bus\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"bus\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testForTrain() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeGenerate\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"amk hub\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"nus\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-existant field"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_field\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.ERROR_CONSTRAINT_UNKNOWN, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeGenerate amk hub to nus by mrt\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"mrt\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 55,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/conversations/RouteListConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteListConversationTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void converse() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeList\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeList 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 26,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/conversations/RouteNodeAddConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeAddConversationTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testForBus() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeNodeAdd\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer for first index"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer for second index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-existant constraint"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_constraint\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.ERROR_CONSTRAINT_UNKNOWN, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"bus\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeNodeAdd 1 1 at 17009 by bus\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"17009\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testForTrain() throws DukeException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeNodeAdd\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer for first index"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer for second index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-existant constraint"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_constraint\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.ERROR_CONSTRAINT_UNKNOWN, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"mrt\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeNodeAdd 1 1 at 17009 by mrt\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"17009\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 81,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/conversations/RouteNodeDeleteConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeDeleteConversationTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void converse() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeNodeDelete\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer for first index"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer for first index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeNodeDelete 1 1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 34,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/edits/EditorManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.edits;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.EmptyVenueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.EventNotSelectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.PromptCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.results.PanelResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.EventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.VenueList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class EditorManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void activate() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(EmptyVenueException.class, () -\u003e EditorManager.activate(new EventList(), new VenueList()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event e \u003d new Event(\"Pulau Tekong\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(e.getLocation());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.activate(events, venues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void deactivate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.deactivate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(EditorManager.isActive());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void isActive() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.deactivate();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(EditorManager.isActive());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event e \u003d new Event(\"Pulau Tekong\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(e.getLocation());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.activate(events, venues);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.isActive());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void edit() throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.deactivate();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event e \u003d new Event(\"Pulau Tekong\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(e.getLocation());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event e2 \u003d new Event(\"Tuas\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(e2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(e2.getLocation());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.activate(events, venues);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.isActive());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(EventNotSelectedException.class, () -\u003e EditorManager.edit(\"Yew Tee\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.edit(KeyCode.ENTER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.edit(\"Yew Tee\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.edit(KeyCode.DOWN);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.edit(\"Mon\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.edit(KeyCode.DOWN);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.edit(\"Mon\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.edit(KeyCode.DOWN);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.edit(\"Boon lay\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.edit(\"x\") instanceof EditCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void testEdit() throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.deactivate();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(EditorManager.isActive());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event e \u003d new Event(\"Pulau Tekong\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(e.getLocation());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.activate(events, venues);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        PanelResult result \u003d EditorManager.edit(KeyCode.K);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(result.isReady());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d EditorManager.edit(KeyCode.UP);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(result.isReady());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d EditorManager.edit(KeyCode.ENTER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(result.isReady());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d EditorManager.edit(KeyCode.ENTER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(result.isReady());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d EditorManager.edit(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(result.isReady());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d EditorManager.edit(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(result.isReady());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 103
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/edits/EditorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.edits;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class EditorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int DESCRIPTION \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int START_DATE \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int END_DATE \u003d 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void edit() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getDescription(), \"Pulau Ubin\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Editor.edit(\"Geylang\", event, DESCRIPTION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getDescription(), \"Geylang\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Editor.edit(\"Geylang\", event, DESCRIPTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getDescription(), \"Geylang\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(ApiException.class, () -\u003e Editor.edit(\"gwhore\", event, DESCRIPTION));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getDescription(), \"Geylang\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(event.getDescription(), \"gwhore\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e Editor.edit(\"non\", event, START_DATE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e Editor.edit(\"non\", event, END_DATE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime date \u003d ParserTimeUtil.parseStringToDate(\"01/01/18\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Editor.edit(\"01/01/18\", event, START_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getStartDate().toLocalDate(), date.toLocalDate());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(event.getStartDate(), startDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Editor.edit(\"02/02/18\", event, END_DATE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getEndDate().toLocalDate(), ParserTimeUtil.parseStringToDate(\"02/02/18\").toLocalDate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(event.getEndDate(), endDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e Editor.edit(\"meow\", event, -1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e Editor.edit(\"meow\", event, 3));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 3,
      "Jefferson111": 45
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/parsers/ApiConstraintParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.api.ApiConstraintParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.TrainStation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.TransportationMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class ApiConstraintParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getNearestBusStop() throws QueryFailedException, FileLoadFailException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        HashMap\u003cString, BusStop\u003e busStopMap \u003d model.getBusStops();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop busStop \u003d new BusStop(\"17009\", model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //queried location is a bus stop, so it definitely is the same"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop actual \u003d ApiConstraintParser.getNearestBusStop(busStop, busStopMap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(actual.equals(busStop));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //very close location"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue venue \u003d new Venue(\"Near Clementi Int\", 1.31491572870620, 103.76412225438470,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                0, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop actual2 \u003d ApiConstraintParser.getNearestBusStop(venue, busStopMap);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(actual2.equals(busStop));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getNearestTrainStation() throws FileLoadFailException, QueryFailedException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        HashMap\u003cString, TrainStation\u003e trainStationMap \u003d model.getMap().getTrainMap();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        TrainStation trainStation \u003d new TrainStation(\"Ang Mo Kio\", model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        TrainStation actual \u003d ApiConstraintParser.getNearestTrainStation(trainStation, trainStationMap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(actual.equals(trainStation));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue venue \u003d new Venue(\"Near Ang Mo Kio MRT\", 1.369, 103.8495, 0, 0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        TrainStation actual2 \u003d ApiConstraintParser.getNearestTrainStation(venue, trainStationMap);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(actual2.equals(trainStation));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getNearestTransport() throws QueryFailedException, FileLoadFailException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        TransportationMap map \u003d model.getMap();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop busStop \u003d new BusStop(\"17009\", model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue venue1 \u003d ApiConstraintParser.getNearestTransport(busStop, map);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(venue1.equals(busStop));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue venueBusStop \u003d new Venue(\"Near Clementi Int\", 1.31491572870620, 103.76412225438470,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                0, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue venue2 \u003d ApiConstraintParser.getNearestTransport(venueBusStop, map);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(venue2.equals(busStop));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        TrainStation trainStation \u003d new TrainStation(\"Ang Mo Kio\", model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue venue3 \u003d ApiConstraintParser.getNearestTransport(trainStation, map);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(venue3.equals(trainStation));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue venueTrainStation \u003d new Venue(\"Near Ang Mo Kio MRT\", 1.369, 103.8495, 0, 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue venue4 \u003d ApiConstraintParser.getNearestTransport(venueTrainStation, map);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(venue4.equals(trainStation));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 64,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/parsers/ApiParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteNodeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.api.ApiParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.CustomNode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.RouteNode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.TrainStation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class ApiParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String DIMENSIONS \u003d \"512\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String ZOOM_LEVEL \u003d \"16\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String RED_VALUE_OTHER \u003d \"255\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String GREEN_VALUE_OTHER \u003d \"122\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String BLUE_VALUE_OTHER \u003d \"0\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String LINE_WIDTH \u003d \"2\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void locationSearchTest() throws ApiException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue expected \u003d new Venue(\"40 CLEMENTI AVENUE 1 NUS HIGH RESIDENCE SINGAPORE 129959\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                1.30698270981494, 103.770671662772, 21027.9779569674, 32145.1125975922);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue actual \u003d ApiParser.getLocationSearch(\"NUS\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(expected.equals(actual));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getStaticMap() throws QueryFailedException, OutOfBoundsException, FileLoadFailException,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            DuplicateRouteNodeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"Test route\", \"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"17009\", model));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"18339\", model));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"12209\", model));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"94071\", model));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNode node \u003d route.getNode(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cString\u003e points \u003d ApiParser.generateOtherPoints(route, node, 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e nearbyNodes \u003d ApiParser.getNeighbour(model, node);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String rgb \u003d RED_VALUE_OTHER + \",\" + GREEN_VALUE_OTHER + \",\" + BLUE_VALUE_OTHER;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String param \u003d ApiParser.generateStaticMapParams(DIMENSIONS, DIMENSIONS, ZOOM_LEVEL,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                String.valueOf(node.getLatitude()), String.valueOf(node.getLongitude()), \"\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                ApiParser.generateLineParam(points, rgb), ApiParser.generatePointParam(route, node, nearbyNodes));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //NoClassDefFoundError is thrown when image is generated"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(NoClassDefFoundError.class, () -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Image actual \u003d ApiParser.getStaticMap(param);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            assert (actual !\u003d null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getStaticMapNeighbours() throws QueryFailedException, FileLoadFailException, DuplicateRouteNodeException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"Test route\", \"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"17009\", model));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"18339\", model));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"12209\", model));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"94071\", model));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //ExceptionInInitializerError is thrown when image is generated"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(NoClassDefFoundError.class, () -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Image actual \u003d ApiParser.generateStaticMapNeighbours(model, route, route.getNode(0), 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            assert (actual !\u003d null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void generateStaticMapParams() throws QueryFailedException, OutOfBoundsException, FileLoadFailException,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            DuplicateRouteNodeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"Test route\", \"\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"17009\", model));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"18339\", model));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"12209\", model));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"94071\", model));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNode node \u003d route.getNode(0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cString\u003e points \u003d ApiParser.generateOtherPoints(route, node, 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e nearbyNodes \u003d ApiParser.getNeighbour(model, node);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String rgb \u003d RED_VALUE_OTHER + \",\" + GREEN_VALUE_OTHER + \",\" + BLUE_VALUE_OTHER;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String actual \u003d ApiParser.generateStaticMapParams(DIMENSIONS, DIMENSIONS, ZOOM_LEVEL,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                String.valueOf(node.getLatitude()), String.valueOf(node.getLongitude()), \"\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                ApiParser.generateLineParam(points, rgb), ApiParser.generatePointParam(route, node, nearbyNodes));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"layerchosen\u003ddefault\u0026lat\u003d1.31491572870629\u0026lng\u003d103.76412225438476\u0026zoom\u003d16\u0026height\u003d512\u0026width\u003d512\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"\u0026polygons\u003d\u0026lines\u003d[[1.31491572870629,103.76412225438476],[1.29379302903228,103.78507910002646],\""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"[1.32653202760922,103.76429968220569],[1.31990193658073,103.95514880285305]]:255,122,0:2\u0026points\u003d\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"[1.31497399268611,103.76502698264449,\\\"0,0,0\\\",\\\"1\\\"]|[1.3152,103.7652,\\\"0,0,0\\\",\\\"2\\\"]|\""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"[1.31528191560846,103.76536000516927,\\\"0,0,0\\\",\\\"3\\\"]|[1.31749570803723,103.7638854582427,\\\"\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"0,0,0\\\",\\\"4\\\"]|[1.31726409983754,103.76240145648879,\\\"0,0,0\\\",\\\"5\\\"]|[1.31491572870629,\""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"103.76412225438476,\\\"122,255,0\\\",\\\"C\\\"]|[1.29379302903228,103.78507910002646,\\\"255,122,0\\\",\\\"O\\\"]|\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"[1.32653202760922,103.76429968220569,\\\"255,122,0\\\",\\\"O\\\"]|[1.31990193658073,103.95514880285305,\\\"\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"122,255,0\\\",\\\"O\\\"]\u0026color\u003d\u0026fillColor\u003d\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void generateStaticMapLines() throws QueryFailedException, FileLoadFailException, DuplicateRouteNodeException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"Test route\", \"\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"17009\", model));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"18339\", model));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"12209\", model));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"94071\", model));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cString\u003e points \u003d ApiParser.generateOtherPoints(route, route.getNode(0), 0);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String rgb \u003d RED_VALUE_OTHER + \",\" + GREEN_VALUE_OTHER + \",\" + BLUE_VALUE_OTHER;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String actual \u003d ApiParser.generateStaticMapLines(points, rgb, LINE_WIDTH);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"[[1.31491572870629,103.76412225438476],[1.29379302903228,103.78507910002646],\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"[1.32653202760922,103.76429968220569],[1.31990193658073,103.95514880285305]]:255,122,0:2\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        actual \u003d ApiParser.generateLineParam(points, rgb);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void generateOtherPoints() throws QueryFailedException, FileLoadFailException, DuplicateRouteNodeException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"Test route\", \"\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"17009\", model));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"18339\", model));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"12209\", model));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(new BusStop(\"94071\", model));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(4, ApiParser.generateOtherPoints(route, route.getNode(0), 0).size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getLocationSearchName() throws QueryFailedException, FileLoadFailException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop busStop \u003d new BusStop(\"17009\", model);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        TrainStation trainStation \u003d new TrainStation(\"Ang Mo Kio\", model);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        CustomNode customNode \u003d new CustomNode(\"Somewhere in Com 2\", \"\", 0.71, 1.34);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"17009\", ApiParser.getLocationSearchName(busStop));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"Ang Mo Kio Station\", ApiParser.getLocationSearchName(trainStation));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"Somewhere in Com 2\", ApiParser.getLocationSearchName(customNode));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getNeighbours() throws QueryFailedException, OutOfBoundsException, FileLoadFailException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop newNode \u003d new BusStop(\"17009\", model);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(5, ApiParser.getNeighbour(model, newNode).size());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop newNode2 \u003d new BusStop(\"44859\", model);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(5, ApiParser.getNeighbour(model, newNode2).size());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void isWithinDistance() throws QueryFailedException, FileLoadFailException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //blk 322 amk"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop node1 \u003d new BusStop(\"54009\", model);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //amk interchange"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop node2 \u003d new BusStop(\"54247\", model);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //clementi"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop node3 \u003d new BusStop(\"17229\", model);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(ApiParser.isWithinDistance(node1, node2));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(ApiParser.isWithinDistance(node2, node1));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(ApiParser.isWithinDistance(node1, node3));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(ApiParser.isWithinDistance(node3, node1));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 176,
      "Jefferson111": 14
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/parsers/ConversationParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.DeleteConversation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.FindConversation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.GetBusStopConversation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.MarkDoneConversation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.conversations.SearchConversation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class ConversationParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void parse() throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(ConversationParser.parse(\"done\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                instanceof MarkDoneConversation);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(ConversationParser.parse(\"delete\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                instanceof DeleteConversation);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(ConversationParser.parse(\"find\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                instanceof FindConversation);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(ConversationParser.parse(\"busStop\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                instanceof GetBusStopConversation);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(ConversationParser.parse(\"search\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                instanceof SearchConversation);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            () -\u003e ConversationParser.parse(\"sdasds\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            () -\u003e ConversationParser.parse(\"deleteeee\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            () -\u003e ConversationParser.parse(\"DElete\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16,
      "Jefferson111": 20
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/parsers/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.ProfileAddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.AddSampleItineraryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.EditorCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.GetBusRouteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.GetBusStopCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.ListItineraryCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.LocationSearchCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.MarkDoneCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.NewItineraryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.ProfileSetPreferenceCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.ProfileShowCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.PromptCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RecommendationsCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RouteAddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RouteDeleteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RouteGenerateCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RouteListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RouteNodeAddCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RouteNodeDeleteCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RouteNodeNeighboursCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RouteNodeShowCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.RouteShowCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.ShowItineraryCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.StaticMapCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.ViewScheduleCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void parse() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"bye\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"edit\") instanceof EditorCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"help\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"view\") instanceof ViewScheduleCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"done 1\") instanceof MarkDoneCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"delete 1\") instanceof DeleteCommand);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"find this\") instanceof FindCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"event sentosa between 12/12/20 and 12/12/99\") instanceof AddCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"search sentosa\") instanceof LocationSearchCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"cancel\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"addThisList SundayList\") instanceof AddSampleItineraryCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"listItinerary\") instanceof ListItineraryCommand);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"recommend itinerary between 23/04/20 and 25/04/20\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                instanceof RecommendationsCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"newItinerary 23/04/20 25/04/20 \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                + \"TwoDayHoliday 1 /venue Orchard /do dancing /and singing /and swinging 2 \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                + \"/venue Changi /do running /and jumping /and swinging\") instanceof NewItineraryCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"showItinerary 1\") instanceof ShowItineraryCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"busRoute 900\") instanceof GetBusRouteCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"busStop 66211\") instanceof GetBusStopCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"routeAdd Day trip to Sentosa\") instanceof RouteAddCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"routeNodeAdd 1 1 at 17009 by bus\") instanceof RouteNodeAddCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"routeGenerate amk hub to clementi by bus\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                instanceof RouteGenerateCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"routeShow 1\") instanceof RouteShowCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"routeNodeShow 1 1\") instanceof RouteNodeShowCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"routeNodeNearby 1 1\") instanceof RouteNodeNeighboursCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"routeDelete 1\") instanceof RouteDeleteCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"routeNodeDelete 1 1\") instanceof RouteNodeDeleteCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"map sentosa\") instanceof StaticMapCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"routeList 1\") instanceof RouteListCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"profile name 01/01/01\") instanceof ProfileAddCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"profileShow\") instanceof ProfileShowCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"profileSet sports true\") instanceof ProfileSetPreferenceCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            Parser.parseComplexCommand(\"error\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 4,
      "hongchuan97": 35,
      "Jefferson111": 48
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/parsers/ParserTimeUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "class ParserTimeUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void parseStringToDate() throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.of(2019, 9, 9, 9, 9);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(date, ParserTimeUtil.parseStringToDate(\"09/09/2019 0909\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/parsers/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class ParserUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getFieldInList() throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String inputString \u003d \"done 1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"1\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, ParserUtil.getFieldInList(0, 1, inputString.strip().split(\" \", 2)[1]));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        expected \u003d \"done\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, ParserUtil.getFieldInList(0, 2, inputString));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        expected \u003d \"1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, ParserUtil.getFieldInList(1, 2, inputString));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getIndexInList() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String inputString \u003d \"done 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int expected \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, ParserUtil.getIntegerInList(0, 1, inputString.strip().split(\" \", 2)[1]));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for zero"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        inputString \u003d \"done 0\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        expected \u003d 0;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, ParserUtil.getIntegerInList(0, 1, inputString.strip().split(\" \", 2)[1]));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for negative integers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        inputString \u003d \"done -1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        expected \u003d -1;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, ParserUtil.getIntegerInList(0, 1, inputString.strip().split(\" \", 2)[1]));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for empty input"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserUtil.getIntegerInList(0, 1, \"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, input is not integer"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String inputString3 \u003d \"done NotInt\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserUtil.getIntegerInList(0, 1, inputString3.strip().split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getIntegerIndexInList() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String inputString \u003d \"done 1\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int expected \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, ParserUtil.getIntegerIndexInList(0, 1, inputString.strip().split(\" \", 2)[1]));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for zero"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        inputString \u003d \"done 0\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        expected \u003d -1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, ParserUtil.getIntegerIndexInList(0, 1, inputString.strip().split(\" \", 2)[1]));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for negative integers"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        inputString \u003d \"done -1\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        expected \u003d -2;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, ParserUtil.getIntegerIndexInList(0, 1, inputString.strip().split(\" \", 2)[1]));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for empty input"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserUtil.getIntegerIndexInList(0, 1, \"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, input is not integer"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String inputString3 \u003d \"done NotInt\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserUtil.getIntegerIndexInList(0, 1, inputString3.strip().split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, test for out of bounds"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String finalInputString1 \u003d \"done 1\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserUtil.getIntegerIndexInList(-1, 1, finalInputString1.strip().split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, test for out of bounds"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String finalInputString2 \u003d \"done 1\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserUtil.getIntegerIndexInList(2, 1, finalInputString2.strip().split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 83,
      "Jefferson111": 13
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/parsers/PromptParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.commands.PromptCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.commandparsers.PromptParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class PromptParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void parseCommand() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(PromptParser.parseCommand(\"foo\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(PromptParser.parseCommand(\"Nice! I need more.\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 17
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/parsers/storageparsers/EventStorageParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.parsers.storageparsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ApiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class EventStorageParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void createEventFromStorage() throws ApiException, ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"NTU\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event check \u003d EventStorageParser.createEventFromStorage(EventStorageParser.toStorageString(event));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(check.isDone());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(check.getDescription(), \"NTU\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 12,
      "Jefferson111": 11
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/selectors/EventFieldSelectorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class EventFieldSelectorTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventFieldSelector selector \u003d new EventFieldSelector();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void feedKeyCode() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventFieldSelector selector \u003d new EventFieldSelector();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.UP);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.DOWN);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.DOWN);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.UP);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 29
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/selectors/LocationHelperTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class LocationHelperTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void checkDirection() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401, 0, 0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Venue v2 \u003d new Venue(\"Tuas Checkpoint\", 1.34942405517095, 103.636127935782, 0, 0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(LocationHelper.checkDirection(KeyCode.UP, v2, v1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(LocationHelper.checkDirection(KeyCode.DOWN, v1, v2));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(LocationHelper.checkDirection(KeyCode.RIGHT, v2, v1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(LocationHelper.checkDirection(KeyCode.LEFT, v1, v2));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 22
    }
  },
  {
    "path": "src/test/java/sgtravel/logic/selectors/LocationSelectorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.EmptyVenueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.lists.VenueList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class LocationSelectorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401, 0, 0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue v2 \u003d new Venue(\"Tuas Checkpoint\", 1.34942405517095, 103.636127935782, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getIndex() throws EmptyVenueException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(EmptyVenueException.class, () -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            new LocationSelector(new VenueList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocationSelector selector \u003d new LocationSelector(venues);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void feedKeyCode() throws EmptyVenueException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocationSelector selector \u003d new LocationSelector(venues);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.LEFT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.LEFT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.RIGHT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.RIGHT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.DOWN);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.DOWN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.UP);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.UP);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void unlock() throws EmptyVenueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocationSelector selector \u003d new LocationSelector(venues);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(selector.isLock());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.unlock();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(selector.isLock());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.ENTER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(selector.isLock());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.unlock();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(selector.isLock());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void isLock() throws EmptyVenueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocationSelector selector \u003d new LocationSelector(venues);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(selector.isLock());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.K);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(selector.isLock());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.UP);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(selector.isLock());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.ENTER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(selector.isLock());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.ENTER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(selector.isLock());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.K);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(selector.isLock());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.UP);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(selector.isLock());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 91
    }
  },
  {
    "path": "src/test/java/sgtravel/model/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401, 0, 0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue v2 \u003d new Venue(\"Tuas Checkpoint\", 1.34942405517095, 103.636127935782, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void testToString() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.toString(), \"[E][✘] Pulau Ubin between \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                + ParserTimeUtil.stringify(startDate) + \" and \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                + ParserTimeUtil.stringify(endDate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(event.toString(), \"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getLocation() throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(event.getLocation(), v1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setLocation(v1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getLocation(), v1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setLocation() throws DukeException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setLocation(v1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getLocation(), v1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setLocation(v1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getLocation(), v1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setLocation(v2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getLocation(), v2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void isSameTask() throws DukeException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event1 \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(event.isSameTask(event1));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(event1.isSameTask(event));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setLocation(v1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(event.isSameTask(event1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(event1.isSameTask(event));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event1.setLocation(v1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(event.isSameTask(event1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(event1.isSameTask(event));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 69
    }
  },
  {
    "path": "src/test/java/sgtravel/model/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Task task \u003d new Task(\"Go hotel\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setDescription() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDescription(\"SMU\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(task.getDescription(), \"SMU\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDescription(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(task.getDescription(), \"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDescription(\"\\\\\\\\\\\\\\\\\\\\\\\\\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(task.getDescription(), \"\\\\\\\\\\\\\\\\\\\\\\\\\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(task.getDescription(), \"Go hotel\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(task.getDescription(), \"go hotel\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(task.getDescription(), \"Go Hotel\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(task.getDescription(), \"\\\\\\\\\\\\\\\\\\\\\\\\\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(task.getDescription(), \"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void isDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(task.isDone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(task.isDone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(task.isDone());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(task.isDone());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(task.isDone());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDone(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(task.isDone());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDone(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(task.isDone());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void isSameTask() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(task.isSameTask(task));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(task.isSameTask(new Task(\"Go hotel\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(task.isSameTask(new Task(\"\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(task.isSameTask(new Task(\"\\\\\\\\\\\\\\\\\\\\\\\\\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(task.toString(), \"[✘] Go hotel\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(task.toString(), \"[✓] Go hotel\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(task.toString(), \"[✓] Go hotel\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(task.toString(), \"[✘] Go hotel\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(task.toString(), \"letoh oG ]✘[\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 69
    }
  },
  {
    "path": "src/test/java/sgtravel/model/lists/EventListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class EventListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void add() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e events.add(event));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void isEmpty() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(events.isEmpty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(events.isEmpty());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event1 \u003d new Event(\"Orchard\", startDate, endDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(events.isEmpty());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void contains() throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(events.contains(event));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(events.contains(event));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void size() throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.size(), 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.size(), 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.remove(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.size(), 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void get() throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        final Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e events.get(0));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e events.get(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e events.get(-1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(0), event);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e events.get(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e events.get(-1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void sort() throws DukeException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate.plusDays(5), endDate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event1 \u003d new Event(\"Woodlands\", startDate.minusDays(2), endDate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event2 \u003d new Event(\"Jurong east\", startDate, endDate.plusDays(5));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event3 \u003d new Event(\"Kranji\", startDate, endDate.minusDays(2));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event4 \u003d new Event(\"Tampines mrt\", startDate, endDate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event1);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event2);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event3);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event4);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.sort();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(0), event1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(1), event3);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(2), event4);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(3), event2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(4), event);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.sort();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(0), event1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(1), event3);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(2), event4);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(3), event2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(4), event);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event5 \u003d new Event(\"City Hall mrt\", startDate.minusDays(10), endDate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event5);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.sort();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(0), event5);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(1), event1);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(2), event3);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(3), event4);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(4), event2);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(5), event);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getSortedList() throws DukeException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate.plusDays(5), endDate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event1 \u003d new Event(\"Woodlands\", startDate.minusDays(2), endDate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event2 \u003d new Event(\"Jurong east\", startDate, endDate.plusDays(5));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event3 \u003d new Event(\"Kranji\", startDate, endDate.minusDays(2));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event4 \u003d new Event(\"Tampines mrt\", startDate, endDate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event2);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event3);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event4);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events1 \u003d events.getSortedList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(0), event1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(1), event3);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(2), event4);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(3), event2);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(4), event);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events2 \u003d events.getSortedList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(events2, events1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event5 \u003d new Event(\"City Hall mrt\", startDate.minusDays(10), endDate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event5);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events1 \u003d events.getSortedList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(0), event5);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(1), event1);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(2), event3);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(3), event4);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(4), event2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(5), event);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(0), event);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(1), event1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(2), event2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(3), event3);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(4), event4);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(5), event5);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void iterator() throws DukeException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event e: events) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            assertEquals(e, events.get(i));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate.plusDays(5), endDate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event1 \u003d new Event(\"Woodlands\", startDate.minusDays(2), endDate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event2 \u003d new Event(\"Jurong east\", startDate, endDate.plusDays(5));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event3 \u003d new Event(\"Kranji\", startDate, endDate.minusDays(2));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event4 \u003d new Event(\"Tampines mrt\", startDate, endDate);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event1);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event2);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event3);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event4);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        i \u003d 0;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event e: events) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            assertEquals(e, events.get(i));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setEvents() throws DukeException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        List\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate.plusDays(5), endDate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event1 \u003d new Event(\"Woodlands\", startDate.minusDays(2), endDate);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event2 \u003d new Event(\"Jurong east\", startDate, endDate.plusDays(5));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event3 \u003d new Event(\"Kranji\", startDate, endDate.minusDays(2));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event4 \u003d new Event(\"Tampines mrt\", startDate, endDate);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event1);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event2);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event3);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event4);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList eventList \u003d new EventList();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        eventList.setEvents(events);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event2);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e eventList.setEvents(events));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void remove() throws DukeException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate.plusDays(5), endDate);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event1 \u003d new Event(\"Woodlands\", startDate.minusDays(2), endDate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event2 \u003d new Event(\"Jurong east\", startDate, endDate.plusDays(5));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event3 \u003d new Event(\"Kranji\", startDate, endDate.minusDays(2));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event4 \u003d new Event(\"Tampines mrt\", startDate, endDate);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event1);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event2);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event3);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event4);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(events.contains(event));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.remove(0);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(events.contains(event));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.remove(0);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(events.contains(event1));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.remove(0);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(events.contains(event2));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e events.remove(-1));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e events.remove(2));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 237
    }
  },
  {
    "path": "src/test/java/sgtravel/model/lists/RouteListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteNodeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.NoSuchRouteException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.transports.Route;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteListTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void add() throws DuplicateRouteException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteList routeList \u003d new RouteList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route1 \u003d new Route(\"To NUS\", \"by bus\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeList.add(route1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(routeList.contains(route1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(DuplicateRouteException.class, () -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeList.add(route1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void get() throws DuplicateRouteException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteList routeList \u003d new RouteList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route1 \u003d new Route(\"To NUS\", \"by bus\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeList.add(route1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(route1, routeList.get(0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test OOB"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeList.get(-1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeList.get(-2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeList.get(1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeList.get(2);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void remove() throws DuplicateRouteException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteList routeList \u003d new RouteList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route1 \u003d new Route(\"To NUS\", \"by bus\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeList.add(route1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(route1, routeList.remove(0));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeList.remove(0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeList.add(route1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeList.remove(-1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeList.remove(-2);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeList.remove(1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeList.remove(2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Route newRoute \u003d routeList.remove(-1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            newRoute.getName();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Route newRoute \u003d routeList.remove(-2);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            newRoute.getName();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Route newRoute \u003d routeList.remove(1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            newRoute.getName();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Route newRoute \u003d routeList.remove(2);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            newRoute.getName();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setRoutes() throws DuplicateRouteException, DuplicateRouteNodeException, NoSuchRouteException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteList routeList \u003d new RouteList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route1 \u003d new Route(\"To NUS\", \"by bus\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route2 \u003d new Route(\"To NTU\", \"by bus\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        List\u003cRoute\u003e routeArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeArrayList.add(route1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeArrayList.add(route2);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeList.setRoutes(routeArrayList);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(routeList.contains(route1));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(routeList.contains(route2));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeArrayList.add(route2);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(DuplicateRouteException.class, () -\u003e {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeList.setRoutes(routeArrayList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void size() throws DuplicateRouteException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteList routeList \u003d new RouteList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, routeList.size());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route1 \u003d new Route(\"To NUS\", \"by bus\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeList.add(route1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(1, routeList.size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route2 \u003d new Route(\"To NTU\", \"by bus\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeList.add(route2);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(2, routeList.size());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void contains() throws DuplicateRouteException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteList routeList \u003d new RouteList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route1 \u003d new Route(\"To NUS\", \"by bus\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(routeList.contains(route1));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeList.add(route1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(routeList.contains(route1));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route2 \u003d new Route(\"To NTU\", \"by bus\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(routeList.contains(route2));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeList.add(route2);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(routeList.contains(route2));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void isEmpty() throws DuplicateRouteException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteList routeList \u003d new RouteList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(routeList.isEmpty());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route1 \u003d new Route(\"To NUS\", \"by bus\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeList.add(route1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(routeList.isEmpty());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 154,
      "Jefferson111": 14
    }
  },
  {
    "path": "src/test/java/sgtravel/model/lists/VenueListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.Venue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class VenueListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void add() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        VenueList venueList \u003d new VenueList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                0, 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        venueList.add(v1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(venueList.contains(v1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue v2 \u003d new Venue(\"Tuas Checkpoint\", 1.34942405517095, 103.636127935782, 0, 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        venueList.add(v2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(venueList.contains(v2));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void get() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        VenueList venueList \u003d new VenueList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                0, 0);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        venueList.add(v1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(v1, venueList.get(0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test OOB"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            venueList.get(-1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            venueList.get(-2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            venueList.get(1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            venueList.get(2);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void remove() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        VenueList venueList \u003d new VenueList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                0, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        venueList.add(v1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(venueList.contains(v1));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        venueList.remove(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, venueList.size());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            venueList.remove(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        venueList.add(v1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            venueList.remove(-1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            venueList.remove(-2);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            venueList.remove(1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            venueList.remove(2);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getVenueList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                0, 0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        List\u003cVenue\u003e listVenue \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        listVenue.add(v1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        VenueList venueList \u003d new VenueList(listVenue);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(listVenue, venueList.getVenueList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void setVenue() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        VenueList venueList \u003d new VenueList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                0, 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            venueList.setVenue(1, v1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            venueList.setVenue(2, v1);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            venueList.setVenue(-1, v1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            venueList.setVenue(-2, v1);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue v2 \u003d new Venue(\"Tuas Checkpoint\", 1.34942405517095, 103.636127935782, 0, 0);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        venueList.add(v2);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        venueList.setVenue(0, v1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(venueList.contains(v1));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void size() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        VenueList venueList \u003d new VenueList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, venueList.size());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                0, 0);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        venueList.add(v1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(1, venueList.size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue v2 \u003d new Venue(\"Tuas Checkpoint\", 1.34942405517095, 103.636127935782, 0, 0);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        venueList.add(v2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(2, venueList.size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void contains() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        VenueList venueList \u003d new VenueList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, venueList.size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                0, 0);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(venueList.contains(v1));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        venueList.add(v1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(venueList.contains(v1));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue v2 \u003d new Venue(\"Tuas Checkpoint\", 1.34942405517095, 103.636127935782, 0, 0);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(venueList.contains(v2));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        venueList.add(v2);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(venueList.contains(v2));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void isEmpty() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        VenueList venueList \u003d new VenueList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(venueList.isEmpty());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                0, 0);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        venueList.add(v1);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(venueList.isEmpty());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 169,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/test/java/sgtravel/model/locations/BusStopTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class BusStopTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private BusStop v1 \u003d new BusStop(\"45039\",\"Opp Yew Tee Ind Est\", \"Woodlands Rd\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            1.39585817355572, 103.75427816224409);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private BusStop v2 \u003d new BusStop(\"25269\", \"Tuas Checkpoint\", \"Bus stop 2\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            1.34942405517095, 103.636127935782);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getBusCode() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"45039\", v1.getBusCode());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotEquals(\"45039\", v2.getBusCode());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getAddress() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"Opp Yew Tee Ind Est\", v1.getAddress());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotEquals(\"Opp Yew Tee Ind Est\", v2.getAddress());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"Woodlands Rd\", v1.getDescription());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotEquals(\"Woodlands Rd\", v2.getDescription());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getLatitude() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(1.39585817355572, v1.getLatitude());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotEquals(1.39585817355572, v2.getLatitude());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getLongitude() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(103.75427816224409, v1.getLongitude());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotEquals(103.75427816224409, v2.getLongitude());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getDistX() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, v1.getDistX());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getDistY() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, v2.getDistY());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getDistance() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(v2.getDistance(v1) \u003c 15000);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(v1.getDistance(v2) \u003e 1000);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(v1.getDistance(v2), v2.getDistance(v1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void setLatitude() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        v1.setLatitude(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, v1.getLatitude());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void setLongitude() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        v2.setLongitude(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, v2.getLongitude());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"Opp Yew Tee Ind Est (1.39585817355572, 103.75427816224409)\", v1.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue v \u003d new Venue(\"Opp Yew Tee Ind Est\", 1.39585817355572, 103.75427816224409,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                0, 0);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(v.equals(v1));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(v2.equals(v1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void testFetch() throws QueryFailedException, FileLoadFailException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop v3 \u003d new BusStop(\"45039\", \"\", \"\", 0, 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        v3.fetchData(model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(v1.equals(v3));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(v2.equals(v3));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getDisplayInfo() throws FileLoadFailException, QueryFailedException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop busStop \u003d new BusStop(\"17009\", \"\", \"\", 0, 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        busStop.fetchData(model);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"Clementi Int\\n\" + \"Clementi Ave 3\\n\" + \"(1.31491572870629, 103.76412225438476)\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, busStop.getDisplayInfo());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 105,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/test/java/sgtravel/model/locations/CustomNodeTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class CustomNodeTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private CustomNode v1 \u003d new CustomNode(\"Opp Yew Tee Ind Est\", \"Woodlands Rd\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            1.39585817355572, 103.75427816224409);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private CustomNode v2 \u003d new CustomNode(\"Tuas Checkpoint\", \"Bus stop 2\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            1.34942405517095, 103.636127935782);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getAddress() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"Opp Yew Tee Ind Est\", v1.getAddress());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotEquals(\"Opp Yew Tee Ind Est\", v2.getAddress());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"Woodlands Rd\", v1.getDescription());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotEquals(\"Woodlands Rd\", v2.getDescription());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getLatitude() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(1.39585817355572, v1.getLatitude());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotEquals(1.39585817355572, v2.getLatitude());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getLongitude() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(103.75427816224409, v1.getLongitude());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotEquals(103.75427816224409, v2.getLongitude());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getDistX() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, v1.getDistX());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getDistY() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, v2.getDistY());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getDistance() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(v2.getDistance(v1) \u003c 15000);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(v1.getDistance(v2) \u003e 1000);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(v1.getDistance(v2), v2.getDistance(v1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void setLatitude() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        v1.setLatitude(0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, v1.getLatitude());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void setLongitude() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        v2.setLongitude(0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, v2.getLongitude());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"Opp Yew Tee Ind Est (1.39585817355572, 103.75427816224409)\", v1.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue v \u003d new Venue(\"Opp Yew Tee Ind Est\", 1.39585817355572, 103.75427816224409,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                0, 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(v.equals(v1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(v2.equals(v1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void testFetch() throws QueryFailedException, FileLoadFailException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop v3 \u003d new BusStop(\"45039\", \"\", \"\", 0, 0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        v3.fetchData(model);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(v1.equals(v3));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(v2.equals(v3));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 89,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/test/java/sgtravel/model/locations/TrainStationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import sgtravel.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class TrainStationTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private ArrayList\u003cString\u003e v1Stations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private ArrayList\u003cString\u003e v2Stations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private TrainStation v1 \u003d new TrainStation(v1Stations, \"Woodlands MRT\", \"start here\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            1.437094, 103.786483);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private TrainStation v2 \u003d new TrainStation(v2Stations, \"Sembawang\", \"stop here\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            1.04491, 103.8200);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getTrainCode() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        v1Stations.add(\"NS9\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        v2Stations.add(\"NS11\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        v1.setTrainCodes(v1Stations);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        v2.setTrainCodes(v2Stations);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(v1Stations, v1.getTrainCodes());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotEquals(v1Stations, v2.getTrainCodes());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getAddress() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"Woodlands MRT\", v1.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotEquals(\"Woodlands MRT\", v2.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"start here\", v1.getDescription());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotEquals(\"start here\", v2.getDescription());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getLatitude() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(1.437094, v1.getLatitude());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotEquals(1.437094, v2.getLatitude());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getLongitude() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(103.786483, v1.getLongitude());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotEquals(103.786483, v2.getLongitude());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getDistX() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, v1.getDistX());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getDistY() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, v2.getDistY());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getDistance() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(v2.getDistance(v1) \u003c 15000);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(v1.getDistance(v2) \u003e 1000);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(v1.getDistance(v2), v2.getDistance(v1));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void setLatitude() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        v1.setLatitude(0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, v1.getLatitude());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void setLongitude() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        v2.setLongitude(0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, v2.getLongitude());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"Woodlands MRT (1.437094, 103.786483)\", v1.toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue v \u003d new Venue(\"Woodlands MRT\", 1.437094, 103.786483,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                0, 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(v.equals(v1));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(v2.equals(v1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testFetch() throws FileLoadFailException, QueryFailedException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        TrainStation v3 \u003d new TrainStation(new ArrayList\u003cString\u003e(), \"Woodlands\", \"\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                0, 0);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        v3.fetchData(model);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        v1.setDescription(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(v1.equals(v3));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(v2.equals(v3));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getDisplayInfo() throws FileLoadFailException, QueryFailedException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        TrainStation trainStation \u003d new TrainStation(new ArrayList\u003c\u003e(), \"Woodlands\", \"\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                0, 0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        trainStation.fetchData(model);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"Woodlands Station\\n\\n(1.437094, 103.786483)\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, trainStation.getDisplayInfo());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 2,
      "Inno97": 119,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/test/java/sgtravel/model/locations/VenueTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class VenueTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401, 0, 0);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue v2 \u003d new Venue(\"Tuas Checkpoint\", 1.34942405517095, 103.636127935782, 0, 0);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getAddress() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"YEW TEE INDUSTRIAL ESTATE\", v1.getAddress());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotEquals(\"YEW TEE INDUSTRIAL ESTATE\", v2.getAddress());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getLatitude() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(1.3973210291170202, v1.getLatitude());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotEquals(1.3973210291170202, v2.getLatitude());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getLongitude() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(103.753758637401, v1.getLongitude());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotEquals(103.753758637401, v2.getLongitude());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getDistX() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, v1.getDistX());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getDistY() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, v2.getDistY());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getDistance() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(v2.getDistance(v1) \u003c 15000);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(v1.getDistance(v2) \u003e 1000);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v1.getDistance(v2), v2.getDistance(v1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setLatitude() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        v1.setLatitude(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, v1.getLatitude());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setLongitude() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        v2.setLongitude(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, v2.getLongitude());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"YEW TEE INDUSTRIAL ESTATE | 1.3973210291170202 | 103.753758637401 | 0.0 | 0.0\", v1.toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Venue v \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401, 0, 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(v.equals(v1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(v2.equals(v1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 11,
      "Jefferson111": 61
    }
  },
  {
    "path": "src/test/java/sgtravel/model/planning/ItineraryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package sgtravel.model.planning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.ChronologyBeforePresentException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.ChronologyInconsistentException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "class ItineraryTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void testCheckValidDate() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime startDatePast \u003d LocalDateTime.of(1998, 9, 9, 9, 9);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime endDatePast \u003d LocalDateTime.of(1998, 9, 13, 9, 9);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Itinerary itineraryPastDates \u003d new Itinerary(startDatePast, endDatePast, \"TestItinerary1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertThrows(ChronologyBeforePresentException.class, itineraryPastDates::checkValidDate);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime startDateInvalid \u003d LocalDateTime.of(2020, 9, 13, 9, 9);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime endDateInvalid \u003d LocalDateTime.of(2020, 9, 9, 9, 9);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Itinerary itineraryInvalidDates \u003d new Itinerary(startDateInvalid, endDateInvalid, \"TestItinerary2\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertThrows(ChronologyInconsistentException.class, itineraryInvalidDates::checkValidDate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 27
    }
  },
  {
    "path": "src/test/java/sgtravel/model/planning/RecommendationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package sgtravel.model.planning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.ModelStub;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.commons.exceptions.RecommendationFailException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import sgtravel.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "class RecommendationTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void testMakeItinerary() throws FileLoadFailException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Recommendation recommendation \u003d model.getRecommendations();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String[] itineraryDetails \u003d {\"itinerary \", \"23/04/28\", \"24/05/28\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertThrows(RecommendationFailException.class, () -\u003e recommendation.makeItinerary(itineraryDetails));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 20
    }
  },
  {
    "path": "src/test/java/sgtravel/model/planning/TodoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.planning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Todo todo \u003d new Todo(\"Homework\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertEquals(todo.toString(), \"Homework\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "-": 12,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/test/java/sgtravel/model/profile/ProfileCardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ProfileCardTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ProfileCard profileCard \u003d new ProfileCard();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws ParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        LocalDateTime birthday \u003d ParserTimeUtil.parseStringToDate(\"01/01/01\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        profileCard.setPerson(\"Danny\", birthday);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertEquals(profileCard.getPersonName(), \"Danny\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertEquals(profileCard.getPersonBirthday(), birthday);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 1,
      "hongchuan97": 18,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/test/java/sgtravel/model/transports/BusServiceTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.transports;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.enumerations.Direction;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class BusServiceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void constructor() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusService busService \u003d new BusService(\"48\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"48\", busService.getBus());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotNull(busService.getDirection(Direction.FORWARD));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotNull(busService.getDirection(Direction.BACKWARD));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void addRoute() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusService busService \u003d new BusService(\"48\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, busService.getDirection(Direction.FORWARD).size());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, busService.getDirection(Direction.BACKWARD).size());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String newBusStop \u003d \"4848\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        busService.addRoute(newBusStop, Direction.FORWARD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(1, busService.getDirection(Direction.FORWARD).size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, busService.getDirection(Direction.BACKWARD).size());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        busService.addRoute(newBusStop, Direction.BACKWARD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(1, busService.getDirection(Direction.FORWARD).size());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(1, busService.getDirection(Direction.BACKWARD).size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getDirection() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusService busService \u003d new BusService(\"48\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String newBusStop1 \u003d \"4848\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        busService.addRoute(newBusStop1, Direction.FORWARD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String newBusStop2 \u003d \"484848\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        busService.addRoute(newBusStop2, Direction.BACKWARD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(1, busService.getDirection(Direction.FORWARD).size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(1, busService.getDirection(Direction.BACKWARD).size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"4848\", busService.getDirection(Direction.FORWARD).get(0));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"484848\", busService.getDirection(Direction.BACKWARD).get(0));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 49,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/test/java/sgtravel/model/transports/RouteTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package sgtravel.model.transports;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.NullResultException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.OutOfBoundsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.commons.exceptions.DuplicateRouteNodeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.BusStop;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import sgtravel.model.locations.RouteNode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void constructor() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"To Sentosa\", \"tomorrow\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"To Sentosa\", route.getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"tomorrow\", route.getDescription());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, route.size());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void constructorAlt() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cRouteNode\u003e nodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(nodes, \"To Sentosa\", \"tomorrow\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"To Sentosa\", route.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"tomorrow\", route.getDescription());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, route.size());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void addNode() throws DuplicateRouteNodeException, OutOfBoundsException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"To Sentosa\", \"tomorrow\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop v1 \u003d new BusStop(\"45039\",\"Opp Yew Tee Ind Est\", \"Woodlands Rd\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                1.39585817355572, 103.75427816224409);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(v1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(1, route.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(DuplicateRouteNodeException.class, () -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.addNode(v1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(DuplicateRouteNodeException.class, () -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.addNode(v1, 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop v2 \u003d new BusStop(\"25269\", \"Tuas Checkpoint\", \"Bus stop 2\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                1.34942405517095, 103.636127935782);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(v2, 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(2, route.size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void addNodeByIndex() throws DuplicateRouteNodeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"To Sentosa\", \"tomorrow\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop v1 \u003d new BusStop(\"45039\",\"Opp Yew Tee Ind Est\", \"Woodlands Rd\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                1.39585817355572, 103.75427816224409);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.addNode(v1, 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.addNode(v1, 2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.addNode(v1, -1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(OutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.addNode(v1, -2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(v1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(DuplicateRouteNodeException.class, () -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.addNode(v1, 1);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void remove() throws DuplicateRouteNodeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"To Sentosa\", \"tomorrow\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.remove(0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.remove(-1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.remove(-2);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop v1 \u003d new BusStop(\"45039\",\"Opp Yew Tee Ind Est\", \"Woodlands Rd\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                1.39585817355572, 103.75427816224409);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(v1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.remove(1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.remove(2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(1, route.size());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.remove(0);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, route.size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getNode() throws DuplicateRouteNodeException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"To Sentosa\", \"tomorrow\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop v1 \u003d new BusStop(\"45039\",\"Opp Yew Tee Ind Est\", \"Woodlands Rd\","
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                1.39585817355572, 103.75427816224409);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(v1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(v1, route.getNode(0));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.getNode(-1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.getNode(-2);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.getNode(1);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.getNode(2);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop v2 \u003d new BusStop(\"25269\", \"Tuas Checkpoint\", \"Bus stop 2\","
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                1.34942405517095, 103.636127935782);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertNotEquals(v2, route.getNode(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getNodeByName() throws DuplicateRouteNodeException, NullResultException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"To Sentosa\", \"tomorrow\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop v1 \u003d new BusStop(\"45039\",\"Opp Yew Tee Ind Est\", \"Woodlands Rd\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                1.39585817355572, 103.75427816224409);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(v1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(v1, route.getNodeByName(\"Opp Yew Tee Ind Est\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(NullResultException.class, () -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.getNodeByName(\"Not Yew Tee!\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void isSameRoute() throws DuplicateRouteNodeException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"To Sentosa\", \"tomorrow\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route2 \u003d new Route(\"To Sentosa\", \"tomorrow\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(route.isSameRoute(route2));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop v1 \u003d new BusStop(\"45039\",\"Opp Yew Tee Ind Est\", \"Woodlands Rd\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                1.39585817355572, 103.75427816224409);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(v1);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(route.isSameRoute(route2));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void setName() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"To Sentosa\", \"tomorrow\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"To Sentosa\", route.getName());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.setName(\"To MBS\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"To MBS\", route.getName());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.setName(\"From NUS\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"From NUS\", route.getName());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void setDescription() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"To Sentosa\", \"tomorrow\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"tomorrow\", route.getDescription());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.setDescription(\"the day after\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"the day after\", route.getDescription());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.setDescription(\"ok i don\u0027t wanna\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"ok i don\u0027t wanna\", route.getDescription());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getNodes() throws DuplicateRouteNodeException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"To Sentosa\", \"tomorrow\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop v1 \u003d new BusStop(\"45039\",\"Opp Yew Tee Ind Est\", \"Woodlands Rd\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                1.39585817355572, 103.75427816224409);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(v1);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(1, route.getNodes().size());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop v2 \u003d new BusStop(\"25269\", \"Tuas Checkpoint\", \"Bus stop 2\","
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                1.34942405517095, 103.636127935782);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        route.addNode(v2);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(2, route.getNodes().size());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 200,
      "Jefferson111": 17
    }
  }
]
