[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.4\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.jvm.convert\u0027 version \u00272.3.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "mainClassName \u003d \u0027duke.Launcher\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d ["
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027javafx.controls\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            , \u0027javafx.base\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            , \u0027javafx.graphics\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            , \u0027javafx.fxml\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            , \u0027javafx.web\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.15-alpha\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.5.0\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.google.code.gson\u0027, name: \u0027gson\u0027, version: \u00272.8.5\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.9.9.3\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.9.9\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-11+26\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    archiveVersion \u003d \"1.1\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027duke/**\u0027"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 163,
      "Jefferson111": 5
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Main.main(args);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Class representing a command to add a new task."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_ADDITION \u003d \"Got it. I\u0027ve added this task:\\n  \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new AddCommand with the given task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task The task to add."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing task list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model.getTasks().add(task);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResult(MESSAGE_ADDITION + task);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Abstract class representing individual duke.commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The Model object containing task list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public abstract CommandResult execute(Model model) throws DukeException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "Jefferson111": 5
    }
  },
  {
    "path": "src/main/java/duke/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isCalendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private ArrayList\u003cBusStop\u003e route;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs a basic CommandResult object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param message Message for ui to display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult(String message) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isExit \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isMap \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isCalendar \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Alternative constructor that helps to create text for a list of tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult(TaskList tasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        message \u003d \"Here are the list of tasks:\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            message +\u003d (i + \". \" + t + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ArrayList\u003cBusStop\u003e getRoute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return route;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setRoute(ArrayList\u003cBusStop\u003e route) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.route \u003d route;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setTasks(TaskList tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public TaskList getTasks() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setExit(boolean exit) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isExit \u003d exit;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setMap(boolean map) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isMap \u003d map;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setCalendar(boolean calendar) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isCalendar \u003d calendar;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isExit;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isMap() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isMap;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isCalendar() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isCalendar;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 85
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Class representing a command to delete a task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_DELETE \u003d \"Alright! I\u0027ve removed this task:\\n  \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new DeleteCommand with the given index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Task task \u003d model.getTasks().remove(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE + task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "Jefferson111": 11
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Class representing a command to exit duke.Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_BYE \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(MESSAGE_BYE);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        commandResult.setExit(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Class representing a command to find a task by keyword."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new FindCommand with the given keyword."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyword The keyword to find."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        TaskList tasks \u003d model.getTasks();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        TaskList result \u003d new TaskList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task: tasks) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task.toString().contains(keyword)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                result.add(task);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResult(result);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/duke/commands/FindPathCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.PathFinder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.api.ApiConstraintParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Class representing a command to send the test URL connection."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class FindPathCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Constraint constraint;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private String startPointIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private String endPointIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_FIND_PATH \u003d \"Path is found, map is opening...\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Constructor to initialise FindPathCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param constraint The constraint of the location request."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param startPointIndex Index of starting location of trip."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param endPointIndex Index of ending location of trip."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public FindPathCommand(String constraint, String startPointIndex, String endPointIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        switch (constraint) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"onlyMRT\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            this.constraint \u003d Constraint.MRT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"onlyBus\":"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            this.constraint \u003d Constraint.BUS;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"Hybrid\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            this.constraint \u003d Constraint.MIXED;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            this.constraint \u003d Constraint.CAR;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.endPointIndex \u003d endPointIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.startPointIndex \u003d startPointIndex;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static Event getHoliday(String index, TaskList t) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Task t1 \u003d t.get(Integer.parseInt(index) - 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (t1 instanceof Event) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return (Event) t1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        throw new DukeException(Messages.TASK_NOT_HOLIDAY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event startPoint \u003d getHoliday(this.startPointIndex, model.getTasks());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Venue startLocation \u003d startPoint.getLocation();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event endPoint \u003d getHoliday(this.endPointIndex, model.getTasks());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Venue endLocation \u003d endPoint.getLocation();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        startPoint \u003d ApiConstraintParser.getConstraintLocation(startPoint, this.constraint);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        endPoint \u003d ApiConstraintParser.getConstraintLocation(endPoint, this.constraint);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        // calculate the shortest path using algorithm with 2 locations as parameters"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        PathFinder pathFinder \u003d new PathFinder(model.getMap());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cBusStop\u003e route \u003d pathFinder.execute(startLocation, endLocation);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(MESSAGE_FIND_PATH);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        commandResult.setMap(true);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        commandResult.setRoute(route);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 52,
      "hongchuan97": 6,
      "Jefferson111": 29
    }
  },
  {
    "path": "src/main/java/duke/commands/FreeTimeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.TaskWithDates;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FreeTimeCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int duration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new FreeTimeCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param duration The number of hours of free time."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public FreeTimeCommand(int duration) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.duration \u003d duration + 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskWithDates primalTask \u003d new TaskWithDates(\"earliest\", LocalDateTime.now().plusMinutes(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskWithDates worldEndTask \u003d new TaskWithDates(\"latest\", LocalDateTime.MAX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model.getTasks().add(primalTask);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model.getTasks().add(worldEndTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        SortedList\u003cTask\u003e tasks \u003d model.getTasks().getChronoList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c tasks.size(); ++i) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime prev \u003d ((TaskWithDates) tasks.get(i - 1)).getStartDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime now \u003d ((TaskWithDates) tasks.get(i)).getStartDate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (LocalDateTime.now().compareTo(prev) \u003c 0 \u0026\u0026 prev.plusHours(duration).compareTo(now) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                model.getTasks().remove(primalTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                model.getTasks().remove(worldEndTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                return new CommandResult(prev.toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        //change to time not found later, but this line of code should nvr be executed"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        throw new DukeException(Messages.FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "Jefferson111": 15
    }
  },
  {
    "path": "src/main/java/duke/commands/GetBusRouteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class GetBusRouteCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String bus;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_BUS_ROUTE \u003d \"Here is the bus route:\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public GetBusRouteCommand(String bus) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.bus \u003d bus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, BusService\u003e busMap \u003d model.getMap().getBusMap();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusService bus \u003d busMap.get(this.bus);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (String busCode : bus.getDirection(1)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d result.concat(busCode + \"\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResult(MESSAGE_BUS_ROUTE + result);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 20,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/java/duke/commands/GetBusStopCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class GetBusStopCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String buscode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public GetBusStopCommand(String busCode) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.buscode \u003d busCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, BusStop\u003e allBus \u003d model.getMap().getBusStopMap();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (allBus.containsKey(this.buscode)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new CommandResult(\"This is the information for this Bus Stop:\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    + allBus.get(this.buscode).getAddress() + \"\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    + allBus.get(this.buscode).getLatitude() + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    + allBus.get(this.buscode).getLongitude());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        throw new DukeException(Messages.DATA_NOT_FOUND);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 22,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/java/duke/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Class representing a command to show the help message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_HELP \u003d \"Here is the list of commands:\\n\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"Add Tasks:\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    To Do: todo \u003cdesc\u003e\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Event: event \u003cdesc\u003e /at \u003ctime\u003e\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Deadline: deadline \u003cdesc\u003e /by \u003ctime\u003e\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Recurring Task: repeat \u003cdesc\u003e /by \u003ctime\u003e /every \u003cnum of days\u003e\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Do Within Task: within \u003cdesc\u003e /between \u003ctime\u003e /and \u003ctime\u003e\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"Modifying Tasks:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Snooze: snooze \u003cindex\u003e /to \u003cdate\u003e\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"Task Querying\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Reminder: reminder\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    View by Date: fetch \u003cdate\u003e\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResult(MESSAGE_HELP);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 14,
      "Jefferson111": 19
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Class representing a command to list items in a task list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResult(model.getTasks());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "Jefferson111": 5
    }
  },
  {
    "path": "src/main/java/duke/commands/LocationSearchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.api.ApiParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Class representing a command to send the test URL connection."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class LocationSearchCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue result;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public LocationSearchCommand(String param) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d ApiParser.getLocationSearch(param);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command with given param."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResult(\"These are the coordinates of your search:\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                + result.getAddress() + \"\\n\" + result.getLatitude() + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                + result.getLongitude());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 17,
      "Jefferson111": 12
    }
  },
  {
    "path": "src/main/java/duke/commands/MarkDoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Class representing a command to mark a task as done."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class MarkDoneCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_MARK_DONE \u003d \"Nice! I\u0027ve marked this task as done:\\n  \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new MarkDoneCommand with the given index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public MarkDoneCommand(int index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Task task \u003d model.getTasks().get(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            task.setDone(true);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new CommandResult(MESSAGE_MARK_DONE + task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "Jefferson111": 11
    }
  },
  {
    "path": "src/main/java/duke/commands/PromptCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class PromptCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String prompt;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public PromptCommand(String prompt) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.prompt \u003d prompt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResult(prompt);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 15
    }
  },
  {
    "path": "src/main/java/duke/commands/RecommendationsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Class representing a command to list items in a task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class RecommendationsCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private String days;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public RecommendationsCommand(String days) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.days \u003d days;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public CommandResult execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        // Multiple possibilities with the logic here."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        List\u003cVenue\u003e list \u003d model.getRecommendations();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(\"Here are the list of Recommended Locations in \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                + days + \" days:\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        int numDays \u003d Integer.parseInt(days);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (int i \u003d 0; i \u003c 2 * numDays; i++) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            if (i % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                result.append(\"Day \").append((i / 2) + 1).append(\":\").append(\"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(i).append(\". \").append(list.get(i).getAddress()).append(\"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        // Until more locations are added"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (numDays \u003e 7) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new DukeException(\"Too many days, enter less than 8 \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResult(result.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 39,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/java/duke/commands/ReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.TaskWithDates;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private TaskList expiredTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private TaskList upcomingTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new ReminderCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReminderCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        expiredTask \u003d new TaskList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        upcomingTask \u003d new TaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        SortedList\u003cTask\u003e tasks \u003d model.getTasks().getChronoList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            if (t.isDone()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDate date \u003d ((TaskWithDates) t).getStartDate().toLocalDate();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDate now \u003d LocalDate.now();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            if (date.compareTo(now) \u003c 0) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                expiredTask.add(t);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                upcomingTask.add(t);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(\"Here are the tasks that are expired:\\n\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Task t : expiredTask) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result.append(t.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result.append(\"here are the tasks that are upcoming:\\n\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Task t : upcomingTask) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result.append(t.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResult(result.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "Jefferson111": 22
    }
  },
  {
    "path": "src/main/java/duke/commands/RescheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.TaskWithDates;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class RescheduleCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime newDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_UPDATE \u003d \"No problem! I\u0027ve rescheduled this task:\\n  \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new RescheduleCommand with the given index and newDate of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public RescheduleCommand(int index, LocalDateTime newDate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newDate \u003d newDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Task task \u003d  model.getTasks().get(index);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            if (task instanceof TaskWithDates) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                ((TaskWithDates) task).setStartDate(newDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                throw new DukeException(Messages.TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new CommandResult(MESSAGE_UPDATE + task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 33,
      "Jefferson111": 13
    }
  },
  {
    "path": "src/main/java/duke/commands/ViewScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.TaskWithDates;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ViewScheduleCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_SHOW_CALENDAR \u003d \"Calendar is launching...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new ViewScheduleCommand with the given date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param date The date to find."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public ViewScheduleCommand(LocalDateTime date) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        SortedList\u003cTask\u003e tasks \u003d model.getTasks().getChronoList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        TaskList result \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (((TaskWithDates) task).getStartDate() !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u0026\u0026 ((TaskWithDates) task).getStartDate().toString().substring(0,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                        ((TaskWithDates) task).getStartDate().toString().indexOf(\"T\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                        .equals(date.toString().substring(0, date.toString().indexOf(\"T\")))) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                result.add(task);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(MESSAGE_SHOW_CALENDAR);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        commandResult.setCalendar(true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        commandResult.setTasks(model.getTasks());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "Jefferson111": 18
    }
  },
  {
    "path": "src/main/java/duke/commons/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Messages used by duke.Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String UNKNOWN_COMMAND \u003d \"☹ I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMPTY_DESCRIPTION \u003d \"⛔ The description cannot be empty. :-(\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_FORMAT \u003d \"⚡ Invalid format. Refer to help for command formats. :-(\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String OUT_OF_BOUNDS \u003d \"⚠ Index requested is out of bounds! :-(\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_NOT_FOUND \u003d \"☢ File not found! :-(\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_NOT_SAVE \u003d \"✋ File not saved! :-(\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CORRUPTED_TASK \u003d \"✇ Task cannot be converted to String! :-(\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DUPLICATED_TASK \u003d \"✇ Task already exists! :-(\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TASK_NOT_FOUND \u003d \"☢ Task not found! :-(\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ANOMALY_FOUND \u003d \"⚡ Anomaly detected! Please check your tasks. :-(\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String DATA_NOT_FOUND \u003d \"☹ I\u0027m sorry, something went wrong while fetching data. :-(\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String DATA_NULL \u003d \"☹ I\u0027m sorry, but nothing could be found. :-(\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String TASK_NOT_HOLIDAY \u003d \"Sorry, the numbers you entered are not a holiday destination.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String REQUEST_TIMEOUT \u003d \"☹ I\u0027m sorry, but the request has timed out... :-(\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String PARSE_ERROR \u003d \"Parsing failed.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 2,
      "-": 16,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/duke/commons/MessagesPrompt.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Messages sent via Prompt by Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class MessagesPrompt {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_UNKNOWN \u003d \"Sorry, but I do not understand that.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ERROR \u003d \"Sorry, but something went wrong...\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_TOO_MANY_ATTEMPTS \u003d \"Sorry, but you have exceeded 5 attempts...\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_SPACES \u003d \"Please do not include spaces in your search!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_NOT_INT \u003d \"Please use a number!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_NOT_STRING \u003d \"Please use a string!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_NOT_DATE \u003d \"Please use a proper date!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String SEARCH_PROMPT_STARTER \u003d \"Where would you like to find?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String SEARCH_PROMPT_SUCCESS \u003d \"These are the coordinates of your search:\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ADD_PROMPT_STARTER \u003d \"What would you like to add?\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ADD_PROMPT_SUCCESS \u003d \"Task added!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String DEADLINE_PROMPT_STARTER \u003d \"What deadline would you like to add?\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String DEADLINE_PROMPT_DATE \u003d \"Please key in the date that you want it done by\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String DEADLINE_PROMPT_SUCCESS \u003d \"Deadline added!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String EVENT_PROMPT_STARTER \u003d \"What event would you like to add?\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String EVENT_PROMPT_DATE \u003d \"When is the event?\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String EVENT_PROMPT_SUCCESS \u003d \"Event added!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String FIND_PROMPT_STARTER \u003d \"What task would you like to find?\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String FIND_PROMPT_SUCCESS \u003d \"Here are the tasks:\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String FIXED_PROMPT_STARTER \u003d \"What task would you like it to be done by?\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String FIXED_PROMPT_HOUR \u003d \"How many hours must it be done by?\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String FIXED_PROMPT_MIN \u003d \" How many minutes must it be done by?\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String FIXED_PROMPT_SUCCESS \u003d \"Fixed task added!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String HOLIDAY_PROMPT_STARTER \u003d \"What holiday would you like to add?\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String HOLIDAY_PROMPT_STARTDATE \u003d \"When does it start?\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String HOLIDAY_PROMPT_ENDDATE \u003d \"When does it end?\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String HOLIDAY_PROMPT_SUCCESS \u003d \"Event added!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String TODO_PROMPT_STARTER \u003d \"What would you like to do?\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String TODO_PROMPT_SUCCESS \u003d \"To Do added!\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String WITHIN_PROMPT_STARTER \u003d \"What task with a fixed timing would you like to add?\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String WITHIN_PROMPT_ENDDATE \u003d \"When must it be done by?\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String WITHIN_PROMPT_SUCCESS \u003d \"Within added!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String REPEAT_PROMPT_STARTER \u003d \"What task that repeats every X days would you like to add?\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String REPEAT_PROMPT_DATE \u003d \"When does the task start?\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String REPEAT_PROMPT_REPEAT \u003d \"How many days does it repeat?\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String REPEAT_PROMPT_SUCCESS \u003d \"Repeating task added!\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String DELETE_PROMPT_STARTER \u003d \"What would you like to delete?\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String DELETE_PROMPT_SUCCESS \u003d \"Trying to delete task...\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String FINDPATH_PROMPT_STARTER \u003d \"Where do you want to go?\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String FINDPATH_PROMPT_SUCCESS \u003d \"Here is the path:\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String FREETIME_PROMPT_STARTER \u003d \"How long of free time are you looking for?\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String FREETIME_PROMPT_SUCCESS \u003d \"Here are the results:\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String GETBUSROUTE_PROMPT_STARTER \u003d \"Which bus route do you want to get?\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String GETBUSROUTE_PROMPT_SUCCESS \u003d \"Here is the bus route:\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String GETBUSSTOP_PROMPT_STARTER \u003d \"Which bus stop do you want to find?\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String GETBUSSTOP_PROMPT_SUCCESS \u003d \"Here is the bus stop\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String MARKDONE_PROMPT_STARTER \u003d \"Which task have you completed?\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String MARKDONE_PROMPT_SUCCESS \u003d \"The task has been marked as done!\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String RESCHEDULE_PROMPT_STARTER \u003d \"Which event would you like to reschedule?\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String RESCHEDULE_PROMPT_SUCCESS \u003d \"Rescheduled!\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String VIEWSCHEDULE_PROMPT_STARTER \u003d \"Which date would you like to find?\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String VIEWSCHEDULE_PROMPT_SUCCESS \u003d \"Here are the events happening in this day:\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static final String RECOMMEND_PROMPT_STARTER \u003d \"How many days will you be visiting SG?\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static final String RECOMMEND_PROMPT_SUCCESS \u003d \"Recommended Attractions:\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String CANCEL_PROMPT \u003d \"Current conversation has ended.\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String STARTING_POINT_PROMPT \u003d \"Choose your starting point.\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ENDPOINT_PROMPT \u003d \"Choose your end point.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 79,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/main/java/duke/commons/enumerations/Constraint.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.commons.enumerations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public enum Constraint {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    MRT,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    BUS,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    MIXED,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    CAR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 8
    }
  },
  {
    "path": "src/main/java/duke/commons/enumerations/TimePatternType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.enumerations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Enumerations for different specificity of time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public enum TimePatternType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    DAY_OF_WEEK, DATE_TIME, DATE, TIME"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeDateTimeParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeDateTimeParseException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeDateTimeParseException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeDuplicateTaskException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DukeDuplicateTaskException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DukeDuplicateTaskException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.DUPLICATED_TASK);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during operation of duke.Duke."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeTaskNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DukeTaskNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DukeTaskNotFoundException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/duke/logic/CreateMap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.api.ApiParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class CreateMap {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashMap\u003cString, BusService\u003e busMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashMap\u003cString, BusStop\u003e busStopMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Initialise createMap object with both busStopMap and busMap."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param busStopMap Map of busStop object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param busMap Map of BusService object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CreateMap(HashMap\u003cString, BusStop\u003e busStopMap, HashMap\u003cString, BusService\u003e busMap) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.busMap \u003d busMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.busStopMap \u003d busStopMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Initialise createMap object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CreateMap() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.busMap \u003d ApiParser.getBusRoute();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.busStopMap \u003d ApiParser.getBusStop();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        fillBusStop();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void fillBusStop() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (Map.Entry mapElement : this.busMap.entrySet()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            String bus \u003d (String)mapElement.getKey();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BusService busService \u003d (BusService)mapElement.getValue();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            for (String busCode : busService.getDirection(1)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (busStopMap.containsKey(busCode)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    busStopMap.get(busCode).addBuses(bus);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public HashMap\u003cString, BusService\u003e getBusMap() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return this.busMap;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public HashMap\u003cString, BusStop\u003e getBusStopMap() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return this.busStopMap;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 53
    }
  },
  {
    "path": "src/main/java/duke/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Logic {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/duke/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.ConversationManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LogicManager extends Logic {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private ConversationManager conversationManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates LogicManager instance."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public LogicManager() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets response from LogicManager."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The input string from user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return CommandResult Object containing information for Ui to display."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            c \u003d Parser.parseSingleCommand(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            conversationManager.clearContext();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            c \u003d getCommandFromConversationManager(userInput);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return c.execute(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets a command from ConversationManager."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Command getCommandFromConversationManager(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(userInput);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (conversationManager.isFinished()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            String result \u003d conversationManager.getResult();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return Parser.parseComplexCommand(result);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            String prompt \u003d conversationManager.getPrompt();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return Parser.parsePromptCommand(prompt);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 53
    }
  },
  {
    "path": "src/main/java/duke/logic/PathFinder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.api.ApiConstraintParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class PathFinder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashMap\u003cString, BusService\u003e busMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashMap\u003cString, BusStop\u003e busStopMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashSet\u003cBusStop\u003e visited;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashMap\u003cString, String\u003e path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private boolean found \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Initialise Pathfinder object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public PathFinder(CreateMap map) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.busStopMap \u003d map.getBusStopMap();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.busMap \u003d map.getBusMap();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.visited \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.path \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Find path between start and end."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param start starting location."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param end ending location."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ArrayList\u003cBusStop\u003e execute(Venue start, Venue end) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop startBusStop \u003d ApiConstraintParser.getNearestBusStop(start, this.busStopMap);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop endBusStop \u003d ApiConstraintParser.getNearestBusStop(end, this.busStopMap);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop cur \u003d startBusStop;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        int depthLimit \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        while (!found \u0026\u0026 depthLimit \u003c 3) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.visited.clear();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.path.clear();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            depthFirstSearch(cur, endBusStop, depthLimit);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            depthLimit +\u003d 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (!this.found) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            cur \u003d endBusStop;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ArrayList\u003cBusStop\u003e ans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            while (!cur.getBusCode().equals(startBusStop.getBusCode())) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                ans.add(cur);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                cur \u003d busStopMap.get(path.get(cur.getBusCode()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans.add(cur);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return ans;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void depthFirstSearch(BusStop cur, BusStop endBusStop, int depthLimit) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (depthLimit \u003d\u003d 0 || this.visited.contains(cur)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.visited.add(cur);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (String bus : cur.getBuses()) { //loop through all bus in bus stop"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            for (String busCode : this.busMap.get(bus).getDirection(1)) { // depth search the bus route"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (!this.found) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    if (busCode.equals(cur.getBusCode())) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    path.put(busCode, cur.getBusCode());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    if (haveSameBus(this.busStopMap.get(busCode), endBusStop)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        path.put(endBusStop.getBusCode(), busCode);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        this.found \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        depthFirstSearch(this.busStopMap.get(busCode), endBusStop, depthLimit - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private boolean haveSameBus(BusStop cur, BusStop endBusStop) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (String bus : cur.getBuses()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (endBusStop.getBuses().contains(bus)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 96,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/duke/logic/api/ApiConstraintParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.api;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Class to handle all API constraint parsing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class ApiConstraintParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Parses the userInput and return a new Holiday constructed from it."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param holiday The holiday object which needs to subject to constraint"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param constraint The constraint to be applied"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return The updated Holiday object with constraint"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Event getConstraintLocation(Event holiday, Constraint constraint) throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        switch (constraint) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case BUS:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            return getBus(holiday);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case MRT:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            return getMrt(holiday);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case MIXED:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            return getHybrid(holiday);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            return holiday;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static Event getHybrid(Event holiday) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        // Make calls to the API and get the new coordinates of the longitude and latitude of the nearest constraint;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        double latitude \u003d 1; dummy value"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        double longitude \u003d 0; dummy value"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        holiday.setLocation(holiday.getLocation().setLatitude(latitude));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        holiday.setLocation(holiday.getLocation().setLongitude(longitude));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return holiday;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static Event getBus(Event holiday) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        // Make calls to the API and get the new coordinates of the longitude and latitude of the nearest busstop;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        double latitude \u003d 1; dummy value"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        double longitude \u003d 0; dummy value"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        holiday.setLocation(holiday.getLocation().setLatitude(latitude));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        holiday.setLocation(holiday.getLocation().setLongitude(longitude));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return holiday;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static Event getMrt(Event holiday) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        // Make calls to the API and get the new coordinates of the longitude and latitude of the nearest mrt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        double latitude \u003d 1; dummy value"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        double longitude \u003d 0; dummy value"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        holiday.setLocation(holiday.getLocation().setLatitude(latitude));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        holiday.setLocation(holiday.getLocation().setLongitude(longitude));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return holiday;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Get nearest bus stop to location."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param place Starting location"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param busStopMap Map of all bus stop"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return nearest bus stop"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static BusStop getNearestBusStop(Venue place, HashMap\u003cString, BusStop\u003e busStopMap) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double placeLatitude \u003d place.getLatitude();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double placeLongitude \u003d place.getLongitude();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double minimumDisplacement \u003d 1000;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop nearestBusStop \u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (Map.Entry mapElement : busStopMap.entrySet()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BusStop cur \u003d (BusStop)mapElement.getValue();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            double displacement \u003d Math.pow(Math.abs(placeLatitude - cur.getLatitude()), 2)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    + Math.pow(Math.abs(placeLongitude - cur.getLongitude()), 2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            displacement \u003d Math.sqrt(displacement);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (displacement \u003c minimumDisplacement) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                minimumDisplacement \u003d displacement;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                nearestBusStop \u003d cur;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return nearestBusStop;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 68,
      "hongchuan97": 26,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/java/duke/logic/api/ApiParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.api;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.api.requests.LocationSearchUrlRequest;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.api.requests.DataMallHttpRequest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Class to handle all API requests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class ApiParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Return names and coordinates of location search."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param param The query"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The locations found"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Venue getLocationSearch(String param) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        LocationSearchUrlRequest req \u003d new LocationSearchUrlRequest(param);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        JsonObject jsonRes \u003d req.execute();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        JsonArray arr \u003d jsonRes.getAsJsonArray(\"results\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isFound(jsonRes)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new Venue(arr.get(0).getAsJsonObject().get(\"ADDRESS\").getAsString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    arr.get(0).getAsJsonObject().get(\"LATITUDE\").getAsDouble(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    arr.get(0).getAsJsonObject().get(\"LONGITUDE\").getAsDouble(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    arr.get(0).getAsJsonObject().get(\"X\").getAsDouble(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    arr.get(0).getAsJsonObject().get(\"Y\").getAsDouble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        throw new DukeException(Messages.DATA_NOT_FOUND);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static boolean isFound(JsonObject jsonRes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return Integer.parseInt(String.valueOf(jsonRes.getAsJsonPrimitive(\"found\"))) \u003e 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Return all bus stop in Singapore."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return List of Bus Stop"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static HashMap\u003cString, BusStop\u003e getBusStop() throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String path \u003d \"BusStops\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        int skip \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, BusStop\u003e allBus \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        while (skip \u003c 5500) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            DataMallHttpRequest req \u003d new DataMallHttpRequest(\"BusStops\", path, Integer.toString(skip));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            skip +\u003d 500;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            JsonObject jsonRes \u003d req.execute();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            JsonArray arr \u003d jsonRes.getAsJsonArray(\"value\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            for (int i \u003d 0; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                BusStop busstop \u003d new BusStop("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        arr.get(i).getAsJsonObject().get(\"BusStopCode\").getAsString(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        arr.get(i).getAsJsonObject().get(\"Description\").getAsString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        arr.get(i).getAsJsonObject().get(\"RoadName\").getAsString(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        arr.get(i).getAsJsonObject().get(\"Latitude\").getAsDouble(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        arr.get(i).getAsJsonObject().get(\"Longitude\").getAsDouble());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                allBus.put(arr.get(i).getAsJsonObject().get(\"BusStopCode\").getAsString(), busstop);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return allBus;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Return all bus route in Singapore."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return bus route"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static HashMap\u003cString, BusService\u003e getBusRoute() throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String path \u003d \"BusRoutes\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        int skip \u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, BusService\u003e busMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        while (skip \u003c 26000) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            DataMallHttpRequest req \u003d new DataMallHttpRequest(\"BusRoutes\", path, Integer.toString(skip));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            skip +\u003d 500;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            JsonObject jsonRes \u003d req.execute();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            JsonArray arr \u003d jsonRes.getAsJsonArray(\"value\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            for (int i \u003d 0; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                String serviceNo \u003d arr.get(i).getAsJsonObject().get(\"ServiceNo\").getAsString();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (!busMap.containsKey(serviceNo)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    BusService bus \u003d new BusService(serviceNo);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    busMap.put(serviceNo, bus);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    bus.addRoute(arr.get(i).getAsJsonObject().get(\"BusStopCode\").getAsString(),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                            arr.get(i).getAsJsonObject().get(\"Direction\").getAsInt());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    busMap.get(serviceNo).addRoute(arr.get(i).getAsJsonObject().get(\"BusStopCode\").getAsString(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                            arr.get(i).getAsJsonObject().get(\"Direction\").getAsInt());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return busMap;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 19,
      "hongchuan97": 61,
      "Jefferson111": 22
    }
  },
  {
    "path": "src/main/java/duke/logic/api/requests/DataMallHttpRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.api.requests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class DataMallHttpRequest extends HttpRequest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String URL \u003d \"http://datamall2.mytransport.sg/ltaodataservice/\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public DataMallHttpRequest(String reqType, String path, String param) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(reqType, URL + path, param);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public JsonObject execute() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            URL url \u003d new URL(this.url + \"?$skip\u003d\" + this.param);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            HttpURLConnection con \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            con.setRequestMethod(\"GET\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            con.setRequestProperty(\"accept\", \"application/json\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            con.setRequestProperty(\"AccountKey\", \"LuhGHYG6Tmu5TdcJm1g8nQ\u003d\u003d\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            con.setConnectTimeout(5000);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            con.setReadTimeout(5000);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BufferedReader in \u003d new BufferedReader(new InputStreamReader(con.getInputStream()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            response \u003d in.readLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.DATA_NOT_FOUND);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        JsonObject result;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            assert (response !\u003d null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            JsonParser jp \u003d new JsonParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            JsonElement root \u003d jp.parse(response);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d root.getAsJsonObject();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(Messages.DATA_NULL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 10,
      "hongchuan97": 38,
      "Jefferson111": 5
    }
  },
  {
    "path": "src/main/java/duke/logic/api/requests/HttpRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.api.requests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Abstract class representing individual HTTP requests."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public abstract class HttpRequest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    protected String reqType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    protected String url;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    protected String param;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises HTTP Request parameters."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param reqType The request type"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param url The request URL"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param param The parameters of the request"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public HttpRequest(String reqType, String url, String param) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.reqType \u003d reqType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.param \u003d param;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes the HTTP Request."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public abstract JsonObject execute() throws DukeException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 21,
      "hongchuan97": 8,
      "Jefferson111": 5
    }
  },
  {
    "path": "src/main/java/duke/logic/api/requests/LocationSearchUrlRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.api.requests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * URL request to OneMap API to get coordinates of location."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LocationSearchUrlRequest extends UrlRequest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String paramType \u003d \"searchVal\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String optionalVariables \u003d \"\u0026returnGeom\u003dY\u0026getAddrDetails\u003dY\u0026pageNum\u003d1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String URL \u003d \"https://developers.onemap.sg/commonapi/search?\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Construct the URL Request."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param param The query"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public LocationSearchUrlRequest(String param) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(param.replace(\" \", \"+\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes the URL request to OneMap API."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return JSONObject The response from request"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public JsonObject execute() throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            URL url \u003d new URL(URL + paramType + \"\u003d\" + param + optionalVariables);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            URLConnection connection \u003d url.openConnection();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            connection.setConnectTimeout(5000);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            connection.setReadTimeout(5000);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            BufferedReader in \u003d new BufferedReader(new InputStreamReader(connection.getInputStream()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            response \u003d in.readLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.DATA_NOT_FOUND);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        JsonObject result;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            assert (response !\u003d null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            JsonParser jp \u003d new JsonParser();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            JsonElement root \u003d jp.parse(response);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d root.getAsJsonObject();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(Messages.DATA_NULL);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 51,
      "Jefferson111": 15
    }
  },
  {
    "path": "src/main/java/duke/logic/api/requests/UrlRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.api.requests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Abstract class representing individual URL requests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public abstract class UrlRequest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected String param;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public UrlRequest(String param) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.param \u003d param;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes and sends the given URL request."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public abstract JsonObject execute() throws DukeException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/Conversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.MessagesPrompt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Abstract class representing individual Conversation."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public abstract class Conversation {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected String result;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected String prompt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected int state;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isFinished;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected int attempts;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected static final int ATTEMPTS_LIMIT \u003d 3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Initialises the Prompt object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Conversation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isFinished \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        attempts \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        state \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public abstract void execute(String input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Builds the result of the conversation string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected abstract void buildResult();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getPrompt() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return prompt;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return result The result"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getResult() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (result !\u003d null) : \"result should not be null\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks and sets input if is int."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return String The input if is int"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected Boolean isIntInput(String input) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserUtil.getIndex(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d MessagesPrompt.PROMPT_NOT_INT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks and sets input if is dateTime."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return String The input if is dateTime"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected Boolean isDateInput(String input) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserTimeUtil.parseStringToDate(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (DukeDateTimeParseException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d MessagesPrompt.PROMPT_NOT_DATE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to cancel the conversation."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The userInput from UI object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void tryCancelConversation(String userInput) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (attempts \u003e ATTEMPTS_LIMIT || \"cancel\".equals(userInput)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d \"cancel\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            isFinished \u003d true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isFinished() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isFinished;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void setFinished(boolean finished) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isFinished \u003d finished;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 36,
      "Jefferson111": 69
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/ConversationManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Conversation manager for Duke to handle two-way communications."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ConversationManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isFinished;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Conversation conversation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ConversationManager() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isFinished \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Starts or continues a conversation with Duke."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void converse(String input) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (tryStartConversation(input)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversation.execute(input);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryEndConversation();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to end a conversation. If the conversation is still ongoing, nothing happens."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void tryEndConversation() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (conversation.isFinished()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            isFinished \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to start a conversation. If the conversation is still ongoing, nothing happens."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input The user input from ui."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return true if a conversation is started, false otherwise."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeException If no conversation could be started."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean tryStartConversation(String input) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isFinished) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            startConversation(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            isFinished \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a Conversation object based on input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input The words from user input."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void startConversation(String input) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            conversation \u003d new MarkDoneConversation();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            conversation \u003d new DeleteConversation();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"findtime\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            conversation \u003d new FreeTimeConversation();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"busStop\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            conversation \u003d new GetBusStopConversation();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"findPath\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            conversation \u003d new FindPathConversation();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            conversation \u003d new ToDoConversation();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            conversation \u003d new DeadlineConversation();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            conversation \u003d new FindConversation();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"search\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            conversation \u003d new SearchConversation();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the result of the conversation."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return result The String result made from Conversation."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getResult() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String result \u003d conversation.getResult();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        clearContext();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the prompt from Conversation object if applicable."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The prompt."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getPrompt() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (conversation !\u003d null) : \"Conversation should not be null\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return conversation.getPrompt();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Clears the current context of the conversation."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void clearContext() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isFinished \u003d true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversation \u003d null;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isFinished() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isFinished;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 3,
      "Jefferson111": 123
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/DeadlineConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.MessagesPrompt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DeadlineConversation extends Conversation {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"deadline\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DeadlineConversation() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        prompt \u003d MessagesPrompt.DEADLINE_PROMPT_STARTER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            prompt \u003d MessagesPrompt.DEADLINE_PROMPT_DATE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            description \u003d input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            state++;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isDateInput(input)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                date \u003d input;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                buildResult();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            prompt \u003d MessagesPrompt.PROMPT_ERROR;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (description !\u003d null \u0026\u0026 date !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + description + \" by \" + date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 6,
      "Jefferson111": 39
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/DeleteConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.MessagesPrompt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DeleteConversation extends Conversation {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"delete\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DeleteConversation() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        prompt \u003d MessagesPrompt.DELETE_PROMPT_STARTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index \u003d input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (index !\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 8,
      "Jefferson111": 25
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/FindConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.MessagesPrompt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class FindConversation extends Conversation {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"find\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FindConversation() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        prompt \u003d MessagesPrompt.FIND_PROMPT_STARTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        keyword \u003d input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        buildResult();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (keyword !\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + keyword;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 5,
      "Jefferson111": 24
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/FindPathConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.MessagesPrompt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class FindPathConversation extends Conversation {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"findPath\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String constraint;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String startPointIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String endPointIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FindPathConversation() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        prompt \u003d MessagesPrompt.FINDPATH_PROMPT_STARTER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            prompt \u003d MessagesPrompt.STARTING_POINT_PROMPT;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            constraint \u003d input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            state++;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                startPointIndex \u003d input;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d MessagesPrompt.ENDPOINT_PROMPT;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                attempts \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                endPointIndex \u003d input;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                buildResult();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                setFinished(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            prompt \u003d MessagesPrompt.PROMPT_ERROR;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (constraint !\u003d null \u0026\u0026 startPointIndex !\u003d null \u0026\u0026 endPointIndex !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + constraint + \" \" + startPointIndex + \" \" + endPointIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 7,
      "Jefferson111": 47
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/FreeTimeConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.MessagesPrompt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class FreeTimeConversation extends Conversation {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"findtime\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FreeTimeConversation() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        prompt \u003d MessagesPrompt.FREETIME_PROMPT_STARTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            duration \u003d input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (duration !\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + duration;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 6,
      "Jefferson111": 26
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/GetBusStopConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.MessagesPrompt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class GetBusStopConversation extends Conversation {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"busStop\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String busCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public GetBusStopConversation() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        prompt \u003d MessagesPrompt.GETBUSROUTE_PROMPT_STARTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            busCode \u003d input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (busCode !\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + busCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 6,
      "Jefferson111": 26
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/MarkDoneConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.MessagesPrompt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class MarkDoneConversation extends Conversation {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"done\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public MarkDoneConversation() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        prompt \u003d MessagesPrompt.MARKDONE_PROMPT_STARTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            index \u003d input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (index !\u003d null) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 7,
      "Jefferson111": 26
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/SearchConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.MessagesPrompt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class SearchConversation extends Conversation {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String command \u003d \"search\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public SearchConversation() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d MessagesPrompt.SEARCH_PROMPT_STARTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d MessagesPrompt.SEARCH_PROMPT_SUCCESS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        location \u003d input.replace(\" \", \"+\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        buildResult();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        setFinished(true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (location !\u003d null) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d command + \" \" + location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 31
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/ToDoConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.MessagesPrompt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ToDoConversation extends Conversation {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"todo\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ToDoConversation() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        prompt \u003d MessagesPrompt.TODO_PROMPT_STARTER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        description \u003d input;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        buildResult();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (description !\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 5,
      "Jefferson111": 24
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.FindPathCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.FreeTimeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.GetBusRouteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.GetBusStopCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.LocationSearchCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.MarkDoneCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.PromptCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.RecommendationsCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.ReminderCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.RescheduleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.ViewScheduleCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.MessagesPrompt;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Parser for commands entered by the user. It reads from standard input and"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * returns Command objects."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the userInput and return a Command object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input Input created by the ConversationManager object or user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The corresponding Command object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeException If userInput is undefined."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Command parseComplexCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String commandWord \u003d getCommandWord(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new AddCommand(ParserUtil.createTodo(input));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new AddCommand(ParserUtil.createDeadline(input));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new MarkDoneCommand(ParserUtil.getIndex(input));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new DeleteCommand(ParserUtil.getIndex(input));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new FindCommand(getWord(input));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"findtime\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new FreeTimeCommand(ParserUtil.getIndex(input));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"fetch\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new ViewScheduleCommand(ParserTimeUtil.parseStringToDate(getWord(input)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"within\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new AddCommand(ParserUtil.createWithin(input));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"reschedule\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new RescheduleCommand(ParserUtil.getSafeIndex(input), ParserUtil.getScheduleDate(input));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"search\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new LocationSearchCommand(getWord(input));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"busStop\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new GetBusStopCommand(getWord(input));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"busRoute\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new GetBusRouteCommand(getWord(input));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new AddCommand(ParserUtil.createEvent(input));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"findPath\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new FindPathCommand(getWord(input),  getHolidayIndexInList(1, input),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    getHolidayIndexInList(2, input));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"recommend\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new RecommendationsCommand(getWord(input));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"cancel\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new PromptCommand(MessagesPrompt.CANCEL_PROMPT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the userInput and return a Command object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput Input created by the ConversationManager object or user input."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The corresponding Command object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeException If userInput is undefined."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Command parseSingleCommand(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (userInput) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"reminder\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new ReminderCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return parseComplexCommand(userInput);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Command parsePromptCommand(String prompt) throws DukeException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new PromptCommand(prompt);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets command word from the userInput."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The command word."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static String getCommandWord(String userInput) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return userInput.strip().split(\" \")[0];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets word from the userInput."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The word."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static String getWord(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return userInput.strip().split(\" \", 2)[1];"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static String getHolidayIndexInList(int index, String userInput) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return userInput.strip().split(\" \", 4)[2];"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return userInput.strip().split(\" \", 4)[3];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 136
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/ParserStorageUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.DoWithin;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Parser for Storage related operations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ParserStorageUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses a task from String format back to task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param line The String description of a task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The corresponding task object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Task createTaskFromStorage(String line) throws DukeDateTimeParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String[] taskParts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String type \u003d taskParts[0].strip();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String status \u003d taskParts[1].strip();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String description \u003d taskParts[2].strip();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (\"D\".equals(type)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                task \u003d new Deadline(description, ParserTimeUtil.parseStringToDate(taskParts[3].strip()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            } catch (DukeDateTimeParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                task \u003d new Deadline(description, taskParts[3].strip());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (\"W\".equals(type)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(taskParts[3].strip());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(taskParts[4].strip());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            task \u003d new DoWithin(description, start, end);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (\"E\".equals(type)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(taskParts[3].strip());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(taskParts[4].strip());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Venue location \u003d getLocationFromStorage(taskParts);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            task \u003d new Event(description, start, end, location);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            task \u003d new Todo(description);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDone(\"true\".equals(status));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses part of a task back to a Location."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static Venue getLocationFromStorage(String[] taskParts) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String address \u003d taskParts[5].strip();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double longitude \u003d Double.parseDouble(taskParts[7].strip());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double latitude \u003d Double.parseDouble(taskParts[6].strip());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double distX \u003d Double.parseDouble(taskParts[7].strip());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double distY \u003d Double.parseDouble(taskParts[8].strip());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new Venue(address, latitude, longitude, distX, distY);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses a task from task to String format."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param task The task."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The corresponding String format of the task object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static String toStorageString(Task task) throws DukeException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (task instanceof Deadline) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return \"D | \" + task.isDone() + \" | \" + task.getDescription() + \" | \" + ((Deadline) task).getDeadline();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (task instanceof Todo) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return \"T | \" + task.isDone() + \" | \" + task.getDescription();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (task instanceof Event) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return \"E | \" + task.isDone() + \" | \" + task.getDescription() + \" | \" + ((Event) task).getHoliday();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (task instanceof DoWithin) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return \"W | \" + task.isDone() + \" | \" + task.getDescription() + \" | \" + ((DoWithin) task).getWithin();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        throw new DukeException(Messages.CORRUPTED_TASK);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses a bus stop from String format back to BusStop."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param line The String description of a bus stop."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return The corresponding BusStop object."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static BusStop createBusStopDataFromStorage(String line) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String[] busStopData \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String busCode \u003d busStopData[0].strip();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String description \u003d busStopData[1].strip();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String address \u003d busStopData[2].strip();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double latitude \u003d Double.parseDouble(busStopData[3].strip());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double longitude \u003d Double.parseDouble(busStopData[4].strip());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop busStop \u003d new BusStop(busCode,description, address, latitude, longitude);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (int i \u003d 5; i \u003c busStopData.length; i++) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            busStop.addBuses(busStopData[i].strip());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return busStop;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses a bus stop from BusStop to String format."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param busStop The bus stop."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return The corresponding String format of the BusStop object."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static String busStopToStorageString(BusStop busStop) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String buses \u003d \"\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (String bus : busStop.getBuses()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            buses +\u003d \" | \" + bus;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return busStop.getBusCode() + \" | \" + busStop.getDescription() + \" | \" + busStop.getAddress()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                + \" | \" + busStop.getLatitude() + \" | \" + busStop.getLongitude() + buses;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses a bus service from BusService to String format."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param busService The bus."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return The corresponding String format of the BusService object."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static String busToStorageString(BusService busService) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String busRoute1 \u003d \"\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String busRoute2 \u003d \"\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (String busCode : busService.getDirection(1)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            busRoute1 +\u003d busCode + \" | \";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (String busCode : busService.getDirection(2)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            busRoute2 +\u003d \" | \" + busCode;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return  busService.getBus() + \" | \" + busRoute1 + \"change\" + busRoute2;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses a bus from String format back to BusService."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param line The String description of a bus."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return The corresponding BusService object."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static BusService createBusFromStorage(String line) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String[] busData \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        boolean changedDirection \u003d false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusService busService \u003d new BusService(busData[0].strip());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (int i \u003d 1; i \u003c busData.length; i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            String buffer \u003d busData[i].strip();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (\"change\".equals(buffer)) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                changedDirection \u003d true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (changedDirection) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                busService.addRoute(buffer, 2);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                busService.addRoute(buffer, 1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return busService;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Parses part of a task back to a Location."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static Venue getVenueFromStorage(String line) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String[] taskParts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String address \u003d taskParts[0].strip();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        double longitude \u003d Double.parseDouble(taskParts[1].strip());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        double latitude \u003d Double.parseDouble(taskParts[2].strip());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        double distX \u003d Double.parseDouble(taskParts[3].strip());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        double distY \u003d Double.parseDouble(taskParts[4].strip());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new Venue(address, latitude, longitude, distX, distY);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 16,
      "hongchuan97": 82,
      "Jefferson111": 79
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/ParserTimeUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.enumerations.TimePatternType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parser for Time related operations."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ParserTimeUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a String into a LocalDateTime object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param line The input String for Date extraction."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The date and time, missing information wil be padded with current time information."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeDateTimeParseException If the format is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static LocalDateTime parseStringToDate(String line) throws DukeDateTimeParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] patterns \u003d {\"[\u0027next \u0027][\u0027this \u0027]E\", \"[\u0027this \u0027][\u0027next \u0027]EEEE\", \"dd/MM/yyyy HHmm\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                             \"dd/MM/yy HHmm\", \"HHmm\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                             \"dd/MM/yy\", \"yyyy-MM-dd\u0027T\u0027HH:mm[:ss.n]\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        TimePatternType[] types \u003d {TimePatternType.DAY_OF_WEEK, TimePatternType.DAY_OF_WEEK,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TimePatternType.DATE_TIME, TimePatternType.DATE_TIME, TimePatternType.TIME, TimePatternType.DATE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            TimePatternType.DATE_TIME};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c patterns.length;) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                TemporalAccessor accessor \u003d DateTimeFormatter.ofPattern(patterns[i]).parse(line);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                switch (types[i]) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                case DAY_OF_WEEK:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalDateTime localDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    return localDateTime.with(TemporalAdjusters.nextOrSame(DayOfWeek.from(accessor)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                case DATE_TIME:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    return LocalDateTime.from(accessor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                case TIME:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    return localDate.atTime(LocalTime.from(accessor));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                case DATE:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalTime localTime \u003d LocalTime.now();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    return localTime.atDate(LocalDate.from(accessor));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                ++i;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new DukeDateTimeParseException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 1,
      "-": 51,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.DoWithin;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Parser for utility functions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the userInput and return a new to-do constructed from it."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The new to-do object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static Todo createTodo(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String description \u003d userInput.substring(\"todo\".length()).strip();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Todo(description);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the userInput and return a new deadline constructed from it."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The new deadline object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static Deadline createDeadline(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String[] deadlineDetails \u003d userInput.substring(\"deadline\".length()).strip().split(\"by\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (deadlineDetails.length !\u003d 2 || deadlineDetails[1] \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (deadlineDetails[0].strip().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Deadline(deadlineDetails[0].strip(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    ParserTimeUtil.parseStringToDate(deadlineDetails[1].strip()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeDateTimeParseException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Deadline(deadlineDetails[0].strip(), deadlineDetails[1].strip());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the userInput and return a new DoWithin constructed from it."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The new DoWithin object."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected static DoWithin createWithin(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String[] withinDetails \u003d userInput.substring(\"within\".length()).strip().split(\"between|and\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (withinDetails.length !\u003d 3 || withinDetails[1] \u003d\u003d null || withinDetails[2] \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (withinDetails[0].strip().isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(withinDetails[1].strip());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(withinDetails[2].strip());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new DoWithin(withinDetails[0].strip(), start, end);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the userInput and return a new Event constructed from it."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The new Event object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Event createEvent(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String[] withinDetails \u003d userInput.substring(\"event\".length()).strip().split(\"between|and\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (withinDetails.length !\u003d 3 || withinDetails[1] \u003d\u003d null || withinDetails[2] \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (withinDetails[0].strip().isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(withinDetails[1].strip());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(withinDetails[2].strip());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new Event(withinDetails[0].strip(), start, end);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the userInput and return an index extracted from it."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The index."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static int getIndex(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            int index \u003d Integer.parseInt(userInput.replaceAll(\"\\\\D+\", \"\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return index - 1;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the userInput and return an index extracted from it safely."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The index."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static int getSafeIndex(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            String index \u003d userInput.split(\" \")[1].strip();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return Integer.parseInt(index) - 1;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the userInput and return an date to reschedule to."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The date."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static LocalDateTime getScheduleDate(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return ParserTimeUtil.parseStringToDate("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    userInput.substring(\"reschedule\".length()).strip().split(\"to\")[1].strip());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DukeDateTimeParseException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.INVALID_FORMAT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.EMPTY_DESCRIPTION);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 102,
      "Jefferson111": 37
    }
  },
  {
    "path": "src/main/java/duke/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.CreateMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the list of tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    TaskList getTasks();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Return map object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    CreateMap getMap();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the list of tasks that contains a date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    FilteredList\u003cTask\u003e getFilteredList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the list of tasks that is sorted chronologically."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    SortedList\u003cTask\u003e getChronoSortedList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns all the list of locations."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    List\u003cVenue\u003e getLocationList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the list of tasks that is an Event."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    FilteredList\u003cTask\u003e getEventList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the list of all bus stops."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    List\u003cBusStop\u003e getBusStops();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the list of all bus routes."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    List\u003cBusService\u003e getBusService();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the list of all attractions."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    List\u003cVenue\u003e getRecommendations() throws DukeException;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Saves the Model data in storage."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void save() throws DukeException;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 2,
      "hongchuan97": 6,
      "Jefferson111": 56
    }
  },
  {
    "path": "src/main/java/duke/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.CreateMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private CreateMap map;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    //private List\u003cBusStop\u003e allBusStops;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    //private List\u003cTrainStation\u003e allTrainStations;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    //private List\u003cRoute\u003e userRoutes;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs a new ModelManager object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tasks \u003d storage.getTasks();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        map \u003d storage.getMap();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        //allBusStops \u003d storage.getBusStops();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        //allTrainStations \u003d storage.getTrainStations();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        //userRoutes \u003d storage.getRoutes();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CreateMap getMap() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public TaskList getTasks() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FilteredList\u003cTask\u003e getFilteredList() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return tasks.getFilteredList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public SortedList\u003cTask\u003e getChronoSortedList() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return tasks.getChronoList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cVenue\u003e getLocationList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        //move this to UniqueTaskList"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cVenue\u003e locations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Task t : tasks.getEventList()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            locations.add(((Event) t).getLocation());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return locations;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FilteredList\u003cTask\u003e getEventList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return tasks.getEventList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public List\u003cBusStop\u003e getBusStops() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public List\u003cBusService\u003e getBusService() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cVenue\u003e getRecommendations() throws DukeException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return storage.readVenues();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void save() throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        storage.write();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 5,
      "hongchuan97": 8,
      "Jefferson111": 78
    }
  },
  {
    "path": "src/main/java/duke/model/TaskList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDuplicateTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeTaskNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.TaskWithDates;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class TaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObservableList\u003cTask\u003e internalList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task get(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.get(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent Task as the given argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a Task to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * The Task must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Task toAdd) throws DukeException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeDuplicateTaskException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (hasAnomaly(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.ANOMALY_FOUND);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks if task clashes with other tasks."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean hasAnomaly(Task toAdd) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (toAdd instanceof TaskWithDates) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime dateTime \u003d ((TaskWithDates) toAdd).getStartDate();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (dateTime !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                for (Task t : getChronoList()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (((TaskWithDates) t).getStartDate().isEqual(dateTime)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the Task {@code target} in the list with {@code editedTask}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The Task identity of {@code editedTask} must not be the same as another existing Task in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTask(Task target, Task editedTask) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeTaskNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeDuplicateTaskException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent Task from the list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * The Task must exist in the list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Task toRemove) throws DukeException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeTaskNotFoundException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task remove(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.remove(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setTasks(TaskList replacement) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code Tasks}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Tasks} must not contain duplicate Tasks."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeDuplicateTaskException();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                || (other instanceof TaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 internalList.equals(((TaskList) other).internalList));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code Tasks} contains only unique Tasks."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public FilteredList\u003cTask\u003e getFilteredList() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FilteredList\u003c\u003e(internalList, (Task t) -\u003e (t instanceof TaskWithDates)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (((TaskWithDates) t).getStartDate() !\u003d null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FilteredList\u003cTask\u003e getEventList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new FilteredList\u003c\u003e(internalList, (Task t) -\u003e (t instanceof Event));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public SortedList\u003cTask\u003e getChronoList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return new SortedList\u003cTask\u003e(getFilteredList(),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                Comparator.comparing((Task t) -\u003e ((TaskWithDates) t).getStartDate()));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 136,
      "Jefferson111": 29
    }
  },
  {
    "path": "src/main/java/duke/model/events/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Class representing a deadline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Deadline extends TaskWithDates {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private String deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a deadline not yet done with the given description and a date."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description A description of this deadline."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline(String description, LocalDateTime startDate) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description, startDate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a deadline not yet done with the given description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description A description of this deadline."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Deadline(String description, String deadline) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string representation of this deadline."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The desired string representation."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + (getStartDate() \u003d\u003d null ? deadline : getStartDate()) + \")\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return getStartDate() \u003d\u003d null ? deadline : getStartDate().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/model/events/DoWithin.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "public class DoWithin extends TaskWithDates {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime endDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a task to be done within two date the given description."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description A description of this task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param startDate Starting date of task"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param endDate Ending date of task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public DoWithin(String description, LocalDateTime startDate, LocalDateTime endDate) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description, startDate);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return (\"[W]\" + super.toString() + \" within \" + super.getStartDate() + \" to \" + this.endDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getWithin() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.getStartDate().toString() + \" | \" + this.endDate.toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected String getEndDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return this.endDate.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/java/duke/model/events/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.api.ApiParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Event extends DoWithin {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Initializes a event task with location."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param locationDescription A description of this task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param startDate Starting date of task"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param endDate Ending date of task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Event(String locationDescription, LocalDateTime startDate, LocalDateTime endDate) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(locationDescription, startDate, endDate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        // This can be removed once we implement the map ?"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venue \u003d ApiParser.getLocationSearch(locationDescription);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Initializes a event task from persistent storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param locationDescription A description of this task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param startDate Starting date of task"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param endDate Ending date of task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param venue location of the holiday object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Event(String locationDescription, LocalDateTime startDate, LocalDateTime endDate, Venue venue) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(locationDescription, startDate, endDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return \"[E]\" + super.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the Venue of the event."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Venue getLocation() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (venue !\u003d null) : \"Event can only be created with a venue\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setLocation(Venue venue) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the string to store the Event object in persistent storage."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getHoliday() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return super.getWithin() + \" | \" + venue.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 2,
      "Jefferson111": 59
    }
  },
  {
    "path": "src/main/java/duke/model/events/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A generic task, which can be marked as done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a task not yet done with the given description."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description A description of this task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the description associated with this task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This task\u0027s description."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the status of the task, true/false."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True/false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets this task as done or undone."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both tasks are the same."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string representation of this task."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The desired string representation."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"[✓] \" : \"[✘] \") + description;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/duke/model/events/TaskWithDates.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Class for Tasks with a date field."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TaskWithDates extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private LocalDateTime startDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskWithDates(String description, LocalDateTime startDate) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructor to work around Tasks that should contain dates but does not."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public TaskWithDates(String... description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description[0]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setStartDate(LocalDateTime startDate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 29,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/duke/model/events/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Class representing a to-do."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a to-do not yet done with the given description."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description A description of this to-do."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string representation of this to-do."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The desired string representation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/duke/model/locations/BusStop.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class BusStop extends Venue {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String busCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Set\u003cString\u003e buses;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a BusStop object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public BusStop(String busCode, String description, String address, double latitude, double longitude) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(address, latitude, longitude, 0, 0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.busCode \u003d busCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.buses \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void addBuses(String bus) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        buses.add(bus);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Set\u003cString\u003e getBuses() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return buses;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getBusCode() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return busCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 38
    }
  },
  {
    "path": "src/main/java/duke/model/locations/Venue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Venue {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private double latitude;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private double longitude;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private double distX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private double distY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a location object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Venue(String address, double latitude, double longitude, double distX, double distY) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.latitude \u003d latitude;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.longitude \u003d longitude;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.distX \u003d distX;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.distY \u003d distY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public double getLatitude() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return latitude;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public double getLongitude() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return longitude;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setLatitude(double latitude) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.latitude \u003d latitude;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setLongitude(double longitude) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.longitude \u003d longitude;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public double getDistX() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return distX;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public double getDistY() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return distY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return getAddress() + \" | \" + getLatitude() + \" | \" + getLongitude() + \" | \" + getDistX() + \" | \" + getDistY();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 54
    }
  },
  {
    "path": "src/main/java/duke/model/transports/BusService.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.transports;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class BusService {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String bus;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private ArrayList\u003cString\u003e direction1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private ArrayList\u003cString\u003e direction2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Create bus object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public BusService(String bus) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.bus \u003d bus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.direction1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.direction2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Add the bus stop code to the route which the bus would travel to."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param busCode Code of bus stop"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param direction Direction of travel to next bus stop"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void addRoute(String busCode, int direction) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (direction \u003d\u003d 1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            this.direction1.add(busCode);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            this.direction2.add(busCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * get the route of bus in direction indicated."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param direction direction of travel"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return All bus stop in direction of travel"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ArrayList\u003cString\u003e getDirection(int direction) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (direction \u003d\u003d 1) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return direction1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return direction2;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public String getBus() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return bus;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 7,
      "Jefferson111": 43
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.ParserStorageUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.CreateMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Manages storage of Duke data in local storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private CreateMap map;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String BUS_FILE_PATH \u003d \"data/bus.txt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String TRAIN_FILE_PATH \u003d \"data/train.txt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String EVENTS_FILE_PATH \u003d \"data/events.txt\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String RECOMMENDATIONS_FILE_PATH \u003d \"memory/recommendations.txt\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String ROUTES_FILE_PATH \u003d \"data/routes.txt\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    //private List\u003cBusStop\u003e allBusStops;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    //private List\u003cTrainStation\u003e allTrainStations;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    //private List\u003cRoute\u003e userRoutes;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs a Storage object that contains information fro the model."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            read();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            logger.log(Level.WARNING, \"File path does not exists.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Reads all storage file."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void read() throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        readEvent();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        readMap();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Reads duke.data.map from filepath. Creates empty duke.data.tasks if file cannot be read."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void readMap() throws DukeException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, BusStop\u003e busStopData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, BusService\u003e busData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            File f \u003d new File(BUS_FILE_PATH);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            boolean isBusData \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\".equals(line)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    isBusData \u003d true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (isBusData) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    BusService busService \u003d ParserStorageUtil.createBusFromStorage(line);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    busData.put(busService.getBus(), busService);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    BusStop busStop \u003d ParserStorageUtil.createBusStopDataFromStorage(line);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    busStopData.put(busStop.getBusCode(), busStop);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.map \u003d new CreateMap(busStopData, busData);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                this.map \u003d new CreateMap();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                writeMap();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            } catch (DukeException err) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                throw new DukeException(err.getMessage());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            throw new DukeException(Messages.FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Reads tasks from filepath. Creates empty tasks if file cannot be read."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    protected void readEvent() throws DukeException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            File f \u003d new File(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                newTasks.add(ParserStorageUtil.createTaskFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tasks.setTasks(newTasks);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns Venues fetched from stored memory."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return The List of all Venues in Recommendations list"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cVenue\u003e readVenues() throws DukeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cVenue\u003e recommendations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            File f \u003d new File(RECOMMENDATIONS_FILE_PATH);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                recommendations.add(ParserStorageUtil.getVenueFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new DukeException(Messages.FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return recommendations;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Writes the tasks into a file of the given filepath."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void write() throws DukeException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        writeEvents();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void writeEvents() throws DukeException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            FileWriter writer \u003d new FileWriter(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Task task : tasks) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                writer.write(ParserStorageUtil.toStorageString(task) + \"\\n\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeException(Messages.FILE_NOT_SAVE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void writeMap() throws DukeException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            FileWriter writer \u003d new FileWriter(BUS_FILE_PATH);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            for (String busCode : this.map.getBusStopMap().keySet()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                writer.write(ParserStorageUtil.busStopToStorageString(this.map.getBusStopMap().get(busCode)) + \"\\n\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            writer.write(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            for (String bus : this.map.getBusMap().keySet()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                writer.write(ParserStorageUtil.busToStorageString(this.map.getBusMap().get(bus)) + \"\\n\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            throw new DukeException(Messages.FILE_NOT_SAVE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public TaskList getTasks() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CreateMap getMap() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return this.map;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 21,
      "hongchuan97": 61,
      "-": 47,
      "Jefferson111": 48
    }
  },
  {
    "path": "src/main/java/duke/ui/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends UiPart\u003cHBox\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"DialogBox.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private HBox dialogBox;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private HBox miniBox;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dialog.setMinHeight(Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        roundImageView(img);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Rounds an image."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void roundImageView(Image img) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ImagePattern pattern \u003d new ImagePattern(img);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        circle.setFill(pattern);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        miniBox.getStyleClass().remove(\"dialog\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        miniBox.getStyleClass().add(\"dialogFlip\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getRoot().getChildren());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        flipNode(tmp, this.getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ObservableList\u003cNode\u003e tmp2 \u003d FXCollections.observableArrayList(miniBox.getChildren());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        flipNode(tmp2, miniBox);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void flipNode(ObservableList\u003cNode\u003e tmp, HBox root) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets a User Dialog box for display."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img).getRoot();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets a Duke Dialog box for display."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return db.getRoot();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 1,
      "-": 47,
      "Jefferson111": 32
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.LogicManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.calendar.CalendarWindow;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.map.MapWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private LogicManager logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Main main;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.png\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Initialises the MainWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        primaryStage.getScene().getStylesheets().addAll("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                this.getClass().getResource(\"/css/mainStyle.css\").toExternalForm());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the application."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialises the logic and Ui component of Duke."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialise(Main main) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.main \u003d main;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            logic \u003d new LogicManager();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            dukeShow(e.getMessage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        dukeShow(\"Hi, welcome to SGTravel.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String input \u003d getUserInput();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isEmpty(input)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        echoUserInput(input);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dukeResponse(input);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void dukeResponse(String input) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                CommandResult result \u003d logic.execute(input);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                dukeShow(result);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (result.isExit()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    tryExitApp();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                } else if (result.isCalendar()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    new CalendarWindow(result).show();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                } else if (result.isMap()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    new MapWindow(result).show();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                dukeShow(e.getMessage());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void echoUserInput(String input) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isEmpty(String input) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return \"\".equals(input);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String getUserInput() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String input \u003d userInput.getText().strip();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /** Shows message(s) to the user."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void dukeShow(String msg) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                DialogBox.getDukeDialog(msg, dukeImage)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        );"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void dukeShow(CommandResult commandResult) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dukeShow(commandResult.toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void tryExitApp() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            main.stop();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            dukeShow(\"Exit app failed\" + e.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 12,
      "-": 58,
      "Jefferson111": 68
    }
  },
  {
    "path": "src/main/java/duke/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        URL fxmlFileUrl \u003d Main.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/duke/ui/calendar/CalendarCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class CalendarCard extends UiPart\u003cStackPane\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private StackPane calendarCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private final TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"CalendarCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String CLASSNAME \u003d \"class duke.model.events.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static int currentIndex \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isCalendarCardClass \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private CalendarCard(int day, TaskList tasks) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.day.setText(Integer.toString(day));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        calendarCard.getStyleClass().add(\"calendarCard\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (tasks !\u003d null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            loadInfoOnToCard();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void loadInfoOnToCard() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setText(tasks.get(currentIndex).getClass().toString().replace(CLASSNAME, \"\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        description.setText(tasks.get(currentIndex).getDescription());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result.append(t.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip tooltip \u003d new Tooltip(result.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip.install(getRoot(), tooltip);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected static StackPane getCalendarCard(int day, TaskList taskListWithDates) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CalendarCard(day, taskListWithDates).getRoot();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void onClick() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (tasks.size() \u003e 0) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            currentIndex \u003d (currentIndex + 1) % tasks.size();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            loadInfoOnToCard();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void onMouseEnter() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        calendarCard.getStyleClass().add(\"calendarCardHover\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        calendarCard.getStyleClass().remove(\"calendarCard\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isCalendarCardClass \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void onMouseExit() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!isCalendarCardClass) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            calendarCard.getStyleClass().add(\"calendarCard\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            calendarCard.getStyleClass().remove(\"calendarCardHover\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            isCalendarCardClass \u003d true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 76
    }
  },
  {
    "path": "src/main/java/duke/ui/calendar/CalendarWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.DoWithin;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.TaskWithDates;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class CalendarWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"CalendarWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private YearMonth currentYearMonth;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int numOfDays;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int dayOfTheFirstDay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String currentMonth;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private List\u003cTaskList\u003e filteredTasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static TaskList tasks;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int MAX_ROW \u003d 6;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int MAX_COL \u003d 7;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private VBox pane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Text calendarTitle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private GridPane gridCalendar;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void previousMonth() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.minusMonths(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        refreshCalendar();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void nextMonth() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.plusMonths(1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        refreshCalendar();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Refreshes the calendar."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void refreshCalendar() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        updateVariables();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setCalendarTitle(currentYearMonth.getYear(), currentMonth);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        fillCalendarDays();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Sets the title of the calendar according to a specific month and year."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void setCalendarTitle(int year, String month) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        calendarTitle.setText(\"♒\" + month + \" \" + year + \"♒\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        pane.setId(currentMonth);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Fills up the calendar with the necessary information."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void fillCalendarDays() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        gridCalendar.getChildren().clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        boolean flag \u003d false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int day \u003d 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_ROW \u0026\u0026 day \u003c\u003d numOfDays; i++) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            for (int j \u003d 0; j \u003c MAX_COL \u0026\u0026 day \u003c\u003d numOfDays; j++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (dayOfTheFirstDay \u003d\u003d j) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    flag \u003d true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (flag) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    gridCalendar.add(CalendarCard.getCalendarCard(day, filteredTasks.get(day)), j, i);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    ++day;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Updates the relevant variables to contain information of the particular month."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void updateVariables() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setCalendarTitle(currentYearMonth.getYear(), currentMonth);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentMonth \u003d currentYearMonth.getMonth().toString();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        numOfDays \u003d currentYearMonth.lengthOfMonth();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        findRelevantTasks();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dayOfTheFirstDay \u003d currentYearMonth.atDay(1).getDayOfWeek().getValue() % 7;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Finds the tasks that needs to be displayed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void findRelevantTasks() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        filteredTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        SortedList\u003cTask\u003e sortedTask \u003d tasks.getChronoList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d numOfDays; ++i) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            filteredTasks.add(new TaskList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Task t : sortedTask) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                tryAddingTask(t);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                //remove this later"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to add a task to the current calendar."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param t A task from the Duke\u0027s task list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeException If the task cannot be added."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void tryAddingTask(Task t) throws DukeException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDate startDate \u003d ((TaskWithDates) t).getStartDate().toLocalDate();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isSameYearMonth(startDate)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            filteredTasks.get(startDate.getDayOfMonth()).add(t);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (t instanceof DoWithin) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                //do something"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isSameYearMonth(Object date) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return currentYearMonth.getYear() \u003d\u003d ((LocalDate) date).getYear()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 currentYearMonth.getMonth() \u003d\u003d ((LocalDate) date).getMonth();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Sets the calendar layout."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param tasks The task list from Duke containing all the tasks."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void setCalendarLayout(TaskList tasks) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setCalendarBasics(tasks);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        refreshCalendar();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Sets the basic information of the calendar; current month, year and tasks."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void setCalendarBasics(TaskList tasks) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ZoneId zoneId \u003d ZoneId.systemDefault(); //GMT +8"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentYearMonth \u003d YearMonth.now(zoneId).minusMonths(0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        CalendarWindow.tasks \u003d tasks;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new CalendarWindow."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param root Stage to use as the root of the CalendarWindow."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private CalendarWindow(Stage root, TaskList tasks) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.getScene().getStylesheets().addAll(this.getClass().getResource(\"/css/calendarStyle.css\").toExternalForm());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setCalendarLayout(tasks);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new CalendarWindow."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CalendarWindow(CommandResult commandResult) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this(new Stage(), commandResult.getTasks());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Shows the Calendar window."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns true if the Calendar window is currently being shown."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Focuses on the Calendar window."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 213
    }
  },
  {
    "path": "src/main/java/duke/ui/map/LocationCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.ui.map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LocationCard extends UiPart\u003cStackPane\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"LocationCard.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private LocationCard(Venue location) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double offsetY \u003d 600 - ((location.getLatitude() - 1.218) * 600 / (1.486 - 1.218));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double offsetX \u003d (location.getLongitude() - 103.622) * 800  / (104.021 - 103.622);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AnchorPane.setLeftAnchor(getRoot(), offsetX);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AnchorPane.setTopAnchor(getRoot(), offsetY);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip tooltip \u003d new Tooltip(location.getAddress());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip.install(getRoot(), tooltip);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static StackPane getCard(Venue location) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new LocationCard(location).getRoot();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 25
    }
  },
  {
    "path": "src/main/java/duke/ui/map/MapWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.ui.map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class MapWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private AnchorPane map;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"MapWindow.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private ObservableList\u003cVenue\u003e locations \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void generateNodes(List\u003cBusStop\u003e routes) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        locations.addAll(routes);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void attachListener() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        locations.addListener((ListChangeListener\u003cVenue\u003e) c -\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            map.getChildren().clear();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            for (Venue location : locations) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                map.getChildren().add(LocationCard.getCard(location));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new MapWindow."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param root Stage to use as the root of the CalendarWindow."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private MapWindow(Stage root, List\u003cBusStop\u003e routes) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.getScene().getStylesheets().addAll(this.getClass().getResource(\"/css/mapStyle.css\").toExternalForm());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        attachListener();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        generateNodes(routes);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new MapWindow."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public MapWindow(CommandResult commandResult) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this(new Stage(), commandResult.getRoute());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Shows the Map window."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns true if the Map window is currently being shown."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Focuses on the Map window."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 90
    }
  },
  {
    "path": "src/main/resources/css/calendarStyle.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".calendar {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-repeat: stretch;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: 750 600;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-position: center center;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#JANUARY {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Jan.jpg\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#FEBRUARY {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Feb.jpg\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#MARCH {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Mar.jpg\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#APRIL {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Apr.jpg\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#MAY {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/May.jpg\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#JUNE {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Jun.jpg\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#JULY {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Jul.jpg\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#AUGUST {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Aug.jpg\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#SEPTEMBER {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Sep.jpg\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#OCTOBER {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Oct.jpg\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#NOVEMBER {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Nov.png\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#DECEMBER {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Dec.jpg\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".arrow-button {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-shape: \"M 0 50 L 50 0 L 50 100 z\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".calendarCard {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: rgba(100, 100, 100, 0.5);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: grey;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 10, 0.5, 0.0, 0.0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".calendarCardHover {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: rgba(150, 150, 150, 0.5);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.2), 10, 0.5, 0.0, 0.0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#day {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-weight: bolder;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#task {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#description {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dayOfWeek {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-size: 16;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-fill: linear-gradient(to bottom right, red, springgreen);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#calendarTitle {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-size: 24;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-fill: gold;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-stroke: black;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-stroke-width: 1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 108
    }
  },
  {
    "path": "src/main/resources/css/mainStyle.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dialog {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: lightblue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius: 20;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-insets: 5;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: blue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-insets: 5;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dialogFlip {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: lightgreen;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius: 20;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-insets: 5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: green;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-insets: 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#circle {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 5;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#dialogContainer {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/wallpaper.jpg\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: 400 600;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-repeat: repeat-y;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color : black;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar:vertical .track{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color : linear-gradient(to top left, mediumseagreen, midnightblue);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color : black;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar:vertical .increment-button ,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar:vertical .decrement-button {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color :transparent;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius : 0.0em;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-padding :0.0 10.0 0.0 0.0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar .increment-arrow,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar .decrement-arrow{"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-shape : \" \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-padding :0.00em 0.0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar:vertical .thumb {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color : linear-gradient(to bottom right, mediumseagreen, midnightblue);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-insets : 2.0, 0.0, 0.0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius : 2.0em;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color : honeydew;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius : 2.0em;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".mainPane {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: rgba(0, 30, 15, 0.8);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color : linear-gradient(to bottom right, mediumseagreen, midnightblue);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color : linear-gradient(to top left, mediumseagreen, midnightblue);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius : 2.0em;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius : 2.0em;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#userInput {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "  -fx-control-inner-background: rgba(10, 50, 100, 0.75);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "  -fx-text-inner-color: lightseagreen;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dialog .label {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     -fx-text-fill: mediumblue;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dialogFlip .label {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-text-fill: seagreen;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 88
    }
  },
  {
    "path": "src/main/resources/css/mapStyle.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".mainPane {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/SGmap.jpg\");"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: 800 600;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#LocationCard {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/two.png\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: contain;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/resources/view/CalendarCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cStackPane fx:id\u003d\"calendarCard\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "           onMouseClicked\u003d\"#onClick\" onMouseEntered\u003d\"#onMouseEnter\" onMouseExited\u003d\"#onMouseExit\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cLabel fx:id\u003d\"day\" text\u003d\"1\" StackPane.alignment\u003d\"TOP_RIGHT\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cLabel fx:id\u003d\"task\" StackPane.alignment\u003d\"TOP_LEFT\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cLabel fx:id\u003d\"description\" StackPane.alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 15
    }
  },
  {
    "path": "src/main/resources/view/CalendarWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "         title\u003d\"Calendar\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cVBox fx:id\u003d\"pane\" styleClass\u003d\"calendar\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                  maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003cStackPane alignment\u003d\"BASELINE_CENTER\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                           maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cInsets top\u003d\"10.0\" left\u003d\"10\" right\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cButton styleClass\u003d\"arrow-button\" StackPane.alignment\u003d\"BASELINE_LEFT\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                            onAction\u003d\"#previousMonth\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText fx:id\u003d\"calendarTitle\" text\u003d\"Test\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cButton styleClass\u003d\"arrow-button\" StackPane.alignment\u003d\"BASELINE_RIGHT\" onAction\u003d\"#nextMonth\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                            rotate\u003d\"180\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003cGridPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"30.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Sun\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Mon\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Tues\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Wed\" GridPane.columnIndex\u003d\"3\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Thu\" GridPane.columnIndex\u003d\"4\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Fri\" GridPane.columnIndex\u003d\"5\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Sat\" GridPane.columnIndex\u003d\"6\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003cGridPane fx:id\u003d\"gridCalendar\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"800\" hgap\u003d\"5\" vgap\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" right\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 84
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cHBox fx:id\u003d\"dialogBox\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "      prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "   \u003cRegion styleClass\u003d\"region\" prefWidth\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" visible\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "   \u003cHBox fx:id\u003d\"miniBox\" styleClass\u003d\"dialog\" alignment\u003d\"TOP_RIGHT\" spacing\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "      \u003cCircle fx:id\u003d\"circle\" radius\u003d\"25\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/resources/view/LocationCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cStackPane fx:id\u003d\"LocationCard\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" minWidth\u003d\"30\" minHeight\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Duke\" minWidth\u003d\"400\" minHeight\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "         \u003cAnchorPane styleClass\u003d\"mainPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                     minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                     xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                       AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" vbarPolicy\u003d\"ALWAYS\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "               \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Inno97": 2,
      "-": 17,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/resources/view/MapWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "         title\u003d\"Map\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"map\" styleClass\u003d\"mainPane\" prefWidth\u003d\"800.0\" prefHeight\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 20
    }
  },
  {
    "path": "src/test/java/duke/ModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.CreateMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private CreateMap map;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ModelStub() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public TaskList getTasks() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CreateMap getMap() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FilteredList\u003cTask\u003e getFilteredList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return tasks.getFilteredList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public SortedList\u003cTask\u003e getChronoSortedList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return tasks.getChronoList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public List\u003cVenue\u003e getLocationList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        //move this to UniqueTaskList"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        List\u003cVenue\u003e locations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Task t : tasks.getEventList()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            locations.add(((Event) t).getLocation());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return locations;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FilteredList\u003cTask\u003e getEventList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return tasks.getEventList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public List\u003cBusStop\u003e getBusStops() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public List\u003cBusService\u003e getBusService() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cVenue\u003e getRecommendations() throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return storage.readVenues();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void save() throws DukeException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 5,
      "hongchuan97": 7,
      "Jefferson111": 70
    }
  },
  {
    "path": "src/test/java/duke/UiStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class UiStub {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiStub(VBox dialogContainer) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/test/java/duke/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Task task \u003d new Todo(\"homework\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        addCommand.execute(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(model.getTasks().contains(task));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/test/java/duke/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Task task \u003d new Todo(\"homework\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model.getTasks().add(task);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        deleteCommand.execute(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(model.getTasks().contains(task));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 13,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/test/java/duke/commands/FreeTimeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "class FreeTimeCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        FreeTimeCommand freeTimeCommand \u003d new FreeTimeCommand(1);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        freeTimeCommand.execute(model);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/test/java/duke/commands/MarkDoneCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "class MarkDoneCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Task task \u003d new Todo(\"homework1\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(task);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        addCommand.execute(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        MarkDoneCommand markDoneCommand \u003d new MarkDoneCommand(0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        markDoneCommand.execute(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(model.getTasks().get(0).isDone());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        deleteCommand.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 16,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/test/java/duke/commands/RecommendationsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "class RecommendationsCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        RecommendationsCommand recommendationsCommand \u003d new RecommendationsCommand(\"5\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        CommandResult commandResult \u003d recommendationsCommand.execute(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String result1 \u003d commandResult.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cVenue\u003e list \u003d model.getRecommendations();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(\"Here are the list of Recommended Locations in 5 days:\\n\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (int i \u003d 0; i \u003c 10; i++) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            if (i % 2 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                result.append(\"Day \").append((i / 2) + 1).append(\":\").append(\"\\n\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(i).append(\". \").append(list.get(i).getAddress()).append(\"\\n\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertEquals(result1, result.toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 33
    }
  },
  {
    "path": "src/test/java/duke/commands/ReminderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "class ReminderCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        ReminderCommand reminderCommand \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        reminderCommand.execute(model);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/test/java/duke/commands/RescheduleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.TaskWithDates;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "class RescheduleCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.of(2019, 9, 9, 9, 9);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        TaskWithDates t \u003d new Deadline(\"Visit Rome\", dateTime);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model.getTasks().add(t);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime newDateTime \u003d LocalDateTime.of(2018, 8, 8, 8, 8);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        RescheduleCommand rescheduleCommand \u003d new RescheduleCommand(0, newDateTime);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        rescheduleCommand.execute(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(t.getStartDate(), newDateTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/test/java/duke/logic/conversations/ConversationManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.MessagesPrompt;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class ConversationManagerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void converse() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"todo\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"Travel the Seven seas\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(conversationManager.getResult(), \"todo Travel the Seven seas\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getResult() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"deadline\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"Go Sentosa\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"ooh ahh ooh iee\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"19/10/19\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(conversationManager.getResult(), \"deadline Go Sentosa by 19/10/19\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getPrompt() throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"delete\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(conversationManager.getPrompt(), MessagesPrompt.DELETE_PROMPT_STARTER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"ooh aah ooh aah\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(conversationManager.getPrompt(), MessagesPrompt.PROMPT_NOT_INT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void clearContext() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"done\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.clearContext();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 54
    }
  },
  {
    "path": "src/test/java/duke/logic/parsers/ParserStorageUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "class ParserStorageUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void createTaskFromDate() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime startDate \u003d LocalDateTime.of(2018, 8, 8, 8, 8);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Deadline d \u003d new Deadline(\"Visit Rome\", startDate);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Deadline t \u003d (Deadline) ParserStorageUtil.createTaskFromStorage(ParserStorageUtil.toStorageString(d));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertFalse(t.isDone());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertEquals(t.getDescription(), \"Visit Rome\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertEquals(t.getDeadline(), startDate.toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 20,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/test/java/duke/logic/parsers/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.ExitCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commands.MarkDoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void parse() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(Parser.parseSingleCommand(\"bye\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(Parser.parseSingleCommand(\"todo homework\") instanceof AddCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(Parser.parseSingleCommand(\"deadline homework by tomorrow\") instanceof AddCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(Parser.parseSingleCommand(\"within jogging between 1200 and 1300\") instanceof AddCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(Parser.parseSingleCommand(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(Parser.parseSingleCommand(\"done 1\") instanceof MarkDoneCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 22
    }
  },
  {
    "path": "src/test/java/duke/logic/parsers/ParserTimeUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "class ParserTimeUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void parseStringToDate() throws DukeDateTimeParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.of(2019, 9, 9, 9, 9);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(date, ParserTimeUtil.parseStringToDate(\"09/09/2019 0909\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/test/java/duke/logic/parsers/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.events.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class ParserUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void createTodo() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(ParserUtil.createTodo(\"todo Homework\") instanceof Todo);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getIndex() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(ParserUtil.getIndex(\"done 1\"), 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void createDeadline() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(ParserUtil.createDeadline(\"deadline Go China by Wed\") instanceof Deadline);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getSafeIndex() throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(ParserUtil.getSafeIndex(\"done 5 10 10 10\"), 4);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 32
    }
  },
  {
    "path": "src/test/java/duke/model/events/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"Homework\", \"tomorrow\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(deadline.toString(), \"[D][✘] Homework (by: tomorrow)\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/test/java/duke/model/events/DoWithinTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class DoWithinTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d LocalDateTime.of(2018, 8, 8, 8, 8);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d LocalDateTime.of(2019, 9, 9, 9, 9);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        DoWithin doWithin \u003d new DoWithin(\"Homework\", startDate, endDate);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(doWithin.toString(), \"[W][✘] Homework within \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                            + startDate.toString() + \" to \" + endDate.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 19
    }
  },
  {
    "path": "src/test/java/duke/model/events/TodoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Todo todo \u003d new Todo(\"Homework\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(todo.toString(), \"[T][✘] Homework\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "Jefferson111": 1
    }
  }
]
