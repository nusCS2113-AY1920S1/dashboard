[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.4\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.jvm.convert\u0027 version \u00272.3.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "mainClassName \u003d \u0027duke.Launcher\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d ["
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027javafx.controls\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            , \u0027javafx.base\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            , \u0027javafx.graphics\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            , \u0027javafx.fxml\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            , \u0027javafx.web\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        })"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.15-alpha\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.5.0\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.google.code.gson\u0027, name: \u0027gson\u0027, version: \u00272.8.5\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    compile group: \u0027org.apache.commons\u0027, name: \u0027commons-lang3\u0027, version: \u00273.9\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.9.9.3\u0027"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.9.9\u0027"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-11+26\u0027"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    archiveVersion \u003d \"1.1\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027duke/**\u0027"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027coveralls\u0027"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "run {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 4,
      "-": 155,
      "Jefferson111": 33
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Launches the SGTravel Application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Main.main(args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * An app called SGTravel."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Starts SGTravel GUI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param stage the stage for GUI."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.INFO, \"SGTravel starting up...\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            MainWindow mainWindow \u003d new MainWindow(stage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.initialise(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stops the GUI."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception The exception thrown."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super.stop();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        launch();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 2,
      "-": 38,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/duke/commons/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines messages used by SGTravel."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Route Manager."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ROUTEMANAGER_WELCOME_MESSAGE \u003d \"Route Manager is now turned on...\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ROUTEMANAGER_STATUS_ROUTELIST_STARTER \u003d \"Here is the information of your routes:\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ROUTEMANAGER_STATUS_ROUTELIST_EMPTY \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \"There\u0027s no Routes at the moment, try creating one!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ROUTEMANAGER_STATUS_ROUTELIST_END \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \"Select a Route by typing select, or type help to get some assistance!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ROUTEMANAGER_CONVERSATION_PREFIX_ROUTE \u003d \"routeManager\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ROUTEMANAGER_CONVERSATION_PREFIX_ROUTENODE \u003d \"routeManagerNode\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ROUTEMANAGER_HELP_GENERAL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \"Here are the following things you can do without selecting anything:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"add - Add a Route\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"select - Selects a Route\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"info - Lists all available Routes\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"generate - Generates a Route based on 2 given locations\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"help - Returns this message\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ROUTEMANAGER_HELP_ROUTE \u003d \"Here are the following things you can do at a Route:\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"node - Choose a Node\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"add - Adds a Node\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"info - Lists all information about this Route\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"return - Goes back to selecting a Route\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"help - Returns this message\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ROUTEMANAGER_HELP_ROUTENODE \u003d \"Here are the following things you can do at a Node:\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"add - Add a nearby Node\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"nearby - Lists all nearby Nodes\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"info - Lists all information about this Route\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"return - Goes back to the Route\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"help - Returns this message\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Error messages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Format is ERROR_TYPE_DESCRIPTION"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_COMMAND_UNKNOWN \u003d \"☹ I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_CONSTRAINT_UNKNOWN \u003d \"☹ I\u0027m sorry, but I don\u0027t know what constraint this is :-(\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_DESCRIPTION_EMPTY \u003d \"⛔ The description cannot be empty. :-(\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_FIELD_UNKNOWN \u003d \"☹ I\u0027m sorry, but I don\u0027t know what you want to edit :-(\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_FIELDS_EMPTY \u003d \"☹ I\u0027m sorry, but one of the fields for this command is empty :-(\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_INPUT_INVALID_FORMAT \u003d \"⚡ Invalid format. Refer to help for command formats. :-(\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_INDEX_OUT_OF_BOUNDS \u003d \"⚠ Index requested is out of bounds! :-(\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_DATA_CORRUPTED \u003d \"☢ Data cannot be converted! :-( \";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_FILE_NOT_FOUND \u003d \"☢ File not found! \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_FILE_NOT_SAVED \u003d \"✋ File not saved! :-(\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_RESOURCE_NOT_FOUND \u003d \"☢ Resource not found! :-( Missing: \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_OBJECT_NOT_CREATED \u003d \"✇ Item could not be created! :-(\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_TASK_CORRUPTED \u003d \"✇ Task cannot be converted to String! :-(\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_TASK_DUPLICATED \u003d \"✇ Task already exists! :-(\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_TASK_NOT_FOUND \u003d \"☢ Task not found! :-(\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_ROUTE_CORRUPTED \u003d \"✇ Route cannot be converted to String! :-(\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_ROUTE_DUPLICATE \u003d \"✇ Route already exists! :-(\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_ROUTE_NOT_FOUND \u003d \"☢ Route not found! :-(\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_ROUTE_NODE_CORRUPTED \u003d \"✇ Route Node cannot be converted to String! :-(\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_ROUTE_NODE_DUPLICATE \u003d \"✇ Node already exists! :-(\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_ROUTE_NODE_NOT_FOUND \u003d \"☢ Route not found! :-(\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static final String ERROR_CATEGORY_NOT_FOUND \u003d \"✇ Category does not exists! :-(\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ANOMALY_FOUND \u003d \"⚡ Anomaly detected! Please check your tasks. :-(\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_API_REQUEST_FAILED \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \"☹ I\u0027m sorry, something went wrong while fetching data. :-(\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_API_DATA_NULL \u003d \"☹ I\u0027m sorry, but nothing could be found. :-(\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_API_TIMEOUT \u003d \"☹ I\u0027m sorry, but the request has timed out... :-(\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_TASK_NOT_HOLIDAY \u003d \"Sorry, the numbers you entered are not a holiday destination.\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_RECOMMENDATION_FAIL \u003d \"☹ I\u0027m sorry, our recommendation services are down\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_PARSER_FAIL \u003d \"Parsing failed.\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_FORMAT_INVALID \u003d \"☹ I\u0027m sorry, numbers or words cannot be formatted.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_LOCATION_SELECTOR_NULL \u003d \"There is no locations to be selected!\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_VENUE_EMPTY \u003d \"There are no Venues. VenueList is empty.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_EVENT_OUT_OF_BOUND \u003d \"The index is out of bounds for the EventList.\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_EVENT_NOT_SELECTED \u003d \"There are no events selected.\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Messages sent via Prompt by Duke."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Format is PROMPT_TYPE_DESCRIPTION"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_UNKNOWN \u003d \"Sorry, but I do not understand that.\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ERROR \u003d \"Sorry, but something went wrong...\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_TOO_MANY_ATTEMPTS \u003d \"Sorry, but you have exceeded 5 attempts...\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_SPACES \u003d \"Please do not include spaces in your search!\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_NOT_INT \u003d \"Please use a number!\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_NOT_DOUBLE \u003d \"Please use a number!\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_NOT_STRING \u003d \"Please use a string!\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_NOT_DATE \u003d \"Please use a proper date!\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_NOT_ROUTE_FIELD \u003d \"Please choose either name or description!\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_NOT_ROUTENODE_FIELD \u003d \"Please use a proper field!\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_SEARCH_STARTER \u003d \"Where would you like to find?\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_SEARCH_SUCCESS \u003d \"These are the coordinates of your search:\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ADD_STARTER \u003d \"What would you like to add?\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ADD_SUCCESS \u003d \"Task added!\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_DEADLINE_STARTER \u003d \"What deadline would you like to add?\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_DEADLINE_DATE \u003d \"Please key in the date that you want it done by\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_DEADLINE_SUCCESS \u003d \"Deadline added!\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_EVENT_STARTER \u003d \"What event would you like to add?\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_EVENT_DATE \u003d \"When is the event?\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_EVENT_SUCCESS \u003d \"Event added!\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FIND_STARTER \u003d \"What task would you like to find?\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FIND_SUCCESS \u003d \"Here are the tasks:\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FIXED_STARTER \u003d \"What task would you like it to be done by?\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FIXED_HOUR \u003d \"How many hours must it be done by?\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FIXED_MIN \u003d \" How many minutes must it be done by?\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FIXED_SUCCESS \u003d \"Fixed task added!\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_HOLIDAY_STARTER \u003d \"What holiday would you like to add?\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_HOLIDAY_STARTDATE \u003d \"When does it start?\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_HOLIDAY_ENDDATE \u003d \"When does it end?\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_HOLIDAY_SUCCESS \u003d \"Event added!\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_TODO_STARTER \u003d \"What would you like to do?\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_TODO_SUCCESS \u003d \"To Do added!\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_WITHIN_STARTER \u003d \"What task with a fixed timing would you like to add?\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_WITHIN_ENDDATE \u003d \"When must it be done by?\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_WITHIN_SUCCESS \u003d \"Within added!\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_REPEAT_STARTER \u003d \"What task that repeats every X days would you like to add?\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_REPEAT_DATE \u003d \"When does the task start?\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_REPEAT_REPEAT \u003d \"How many days does it repeat?\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_REPEAT_SUCCESS \u003d \"Repeating task added!\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_DELETE_STARTER \u003d \"What would you like to delete?\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_DELETE_SUCCESS \u003d \"Trying to delete task...\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FINDPATH_STARER \u003d \"Where do you want to go?\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FINDPATH_SUCCESS \u003d \"Here is the path:\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FREETIME_STARTER \u003d \"How long of free time are you looking for?\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FREETIME_SUCCESS \u003d \"Here are the results:\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_GETBUSROUTE_STARTER \u003d \"Which bus route do you want to get?\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_GETBUSROUTE_SUCCESS \u003d \"Here is the bus route:\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_GETBUSSTOP_STARTER \u003d \"Which bus stop do you want to find?\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_GETBUSSTOP_SUCCESS \u003d \"Here is the bus stop\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_MARKDONE_STARTER \u003d \"Which task have you completed?\";"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_MARKDONE_SUCCESS \u003d \"The task has been marked as done!\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_RESCHEDULE_STARTER \u003d \"Which event would you like to reschedule?\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_RESCHEDULE_SUCCESS \u003d \"Rescheduled!\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_VIEWSCHEDULE_STARTER \u003d \"Which date would you like to find?\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_VIEWSCHEDULE_SUCCESS \u003d \"Here are the events happening in this day:\";"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_RECOMMEND_STARTER \u003d \"How many days will you be visiting SG?\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_RECOMMEND_SUCCESS \u003d \"Recommended Attractions:\";"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static final String PROMPT_SETUP_PROFILE \u003d \"Welcome to SGTravel.\\n Please enter your name.\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static final String PROMPT_BIRTHDAY \u003d \"Enter your birthday.\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_ADD_STARTER \u003d \"Please enter the name of the route!\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_ADD_DESCRIPTION \u003d \"Please enter the description of the route!\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_ADD_SUCCESS \u003d \"Route generated successfully: \";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_DELETE_STARTER \u003d \"Which route will you like to delete?\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_DELETE_SUCCESS \u003d \"Route deleted successfully!\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_EDIT_STARTER \u003d \"Which route will you like to edit?\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_EDIT_FIELD \u003d \"What is the field that you want to edit?\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_EDIT_SUCCESS \u003d \"Route edited successfully!\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_GENERATE_STARTER \u003d \"Where do you want to start from?\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_GENERATE_ENDLOCATION \u003d \"Where is your destination?\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_GENERATE_CONSTRAINT \u003d \"How do you want to travel by?\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_GENERATE_SUCCESS \u003d \"Route generated successfully!\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_ADD_STARTER \u003d \"Which route do you want to add the node to?\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_ADD_NODEINDEX \u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \"What is the index of the node? (Enter 0 to add to the end of the route)\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_ADD_TYPE \u003d \"Is it a bus stop or a train station?\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_ADD_INPUT \u003d \"What is the bus stop number or train station name?\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_ADD_SUCCESS \u003d \"Route node added successfully!\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_DELETE_STARTER \u003d \"Which route does the node belong to?\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_DELETE_NODEINDEX \u003d \"What is the index of the node?\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_DELETE_SUCCESS \u003d \"Route node deleted successfully!\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_EDIT_STARTER \u003d \"Which route does the edited node belong to?\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_EDIT_NODEINDEX \u003d \"What is the index of the node?\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_EDIT_FIELD \u003d \"What is the field that you want to edit?\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_EDIT_VALUE \u003d \"What would you want to change it to?\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_EDIT_SUCCESS \u003d \"Route node edited successfully!\";"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_SHOW_STARTER \u003d \"Which route does the node belong to?\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_SHOW_NODEINDEX \u003d \"What is the index of the node?\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTENODE_SHOW_SUCCESS \u003d \"Here is the route node\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_LIST_STARTER \u003d \"Which route would you like to see?\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_LIST_SUCCESS \u003d \"Here is the route:\";"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_SELECTOR_DISPLAY \u003d \"Showing node:\\n\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_SELECTOR_NODE \u003d \"Currently at:\\n\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_SELECTOR_SELECT_STARTER \u003d \"Please select a route!\\n\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_SELECTOR_SELECT_SUCCESS \u003d \"The route has been selected:\\n\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_SELECTOR_NODESELECT_STARTER \u003d \"Please select a node!\\n\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_SELECTOR_NODESELECT_SUCCESS \u003d \"The node has been selected\\n\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_STARTING_POINT \u003d \"Choose your starting point.\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_ENDING_POINT \u003d \"Choose your end point.\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static final String STARTUP_WELCOME_MESSAGE \u003d \"Welcome to SGTravel\\n\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_CANCEL \u003d \"Current conversation has ended.\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static final String ITINERARY_INSUFFICIENT_AGENDAS \u003d \"☹ I\u0027m sorry, but you have entered wrong number of\""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            + \" days :-(\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static final String ITINERARY_EMPTY_TODOLIST \u003d \"☹ I\u0027m sorry, but entering todos for a day is compulsory\";"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static final String ITINERARY_FAIL_CREATION \u003d \"☹ I\u0027m sorry, but you have not entered your \""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            + \"itinerary properly\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static final String ITINERARY_INCORRECT_COMMAND \u003d \"☹ I\u0027m sorry, but your command syntax is wrong \";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static final String RECOMMENDATION_DAY_EXCEEDED \u003d \"☹ I\u0027m sorry, but your stay is too long \";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 10,
      "Inno97": 211,
      "hongchuan97": 7,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/java/duke/commons/enumerations/Constraint.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.commons.enumerations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Enumerates different findPath constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public enum Constraint {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    MRT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    BUS,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    MIXED,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    CAR,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    CUSTOM"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 9,
      "Inno97": 3
    }
  },
  {
    "path": "src/main/java/duke/commons/enumerations/Direction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.commons.enumerations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Enumerates the direction of bus travel."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public enum Direction {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    FORWARD,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    BACKWARD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 9
    }
  },
  {
    "path": "src/main/java/duke/commons/enumerations/TimePatternType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.enumerations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Enumerates specificity of time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public enum TimePatternType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    DAY_OF_WEEK,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    DATE_TIME,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    DATE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    TIME"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/ApiFailedRequestException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when API request fails."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class ApiFailedRequestException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ApiFailedRequestException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_API_REQUEST_FAILED);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/ApiNullRequestException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when API request returns no data."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class ApiNullRequestException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ApiNullRequestException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_API_DATA_NULL);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/ApiTimeoutException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when API request timeouts."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class ApiTimeoutException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ApiTimeoutException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_API_TIMEOUT);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/CategoryNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class CategoryNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CategoryNotFoundException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        super(Messages.ERROR_CATEGORY_NOT_FOUND);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 9
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/CorruptedFileException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when file cannot be read."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class CorruptedFileException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String fileType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param fileType The file being loaded."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CorruptedFileException(String fileType) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_DATA_CORRUPTED);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.fileType \u003d fileType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getFileType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return fileType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the error message depending on the file specified in constructor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (fileType) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"ROUTE\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return Messages.ERROR_ROUTE_CORRUPTED;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"ROUTE_NODE\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return Messages.ERROR_ROUTE_NODE_CORRUPTED;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"TASK\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return Messages.ERROR_TASK_CORRUPTED;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return Messages.ERROR_DATA_CORRUPTED;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 42
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeApiException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when an API call fails."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class DukeApiException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public DukeApiException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 7
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeDateTimeParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when date / time parsing fails."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DukeDateTimeParseException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DukeDateTimeParseException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 1,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeDuplicateRouteException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when a duplicate route is found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class DukeDuplicateRouteException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public DukeDuplicateRouteException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_ROUTE_DUPLICATE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 9
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeDuplicateTaskException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when a duplicate task is detected."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DukeDuplicateTaskException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DukeDuplicateTaskException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_TASK_DUPLICATED);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 1,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeEmptyFieldException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when a field is left empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class DukeEmptyFieldException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public DukeEmptyFieldException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 7
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when an operation fails in SGTravel."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "-": 9,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeRouteNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when a route is not found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class DukeRouteNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public DukeRouteNotFoundException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_ROUTE_NOT_FOUND);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 9
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeTaskNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when a task is not found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DukeTaskNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DukeTaskNotFoundException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 1,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeUnknownCommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when an unknown command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DukeUnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DukeUnknownCommandException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_COMMAND_UNKNOWN);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 7,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/EmptyVenueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EmptyVenueException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EmptyVenueException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.ERROR_VENUE_EMPTY);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/EventNotSelectedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EventNotSelectedException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventNotSelectedException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.ERROR_EVENT_NOT_SELECTED);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/EventSelectionOutOfBoundsException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EventSelectionOutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventSelectionOutOfBoundsException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.ERROR_EVENT_OUT_OF_BOUND);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/FileLoadFailException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when file cannot be loaded."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class FileLoadFailException extends DukeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private File file;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param file The file being loaded."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public FileLoadFailException(File file) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public File getFile() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 5,
      "Inno97": 21
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/FileNotSavedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when file is not saved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class FileNotSavedException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public FileNotSavedException(String fileName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_FILE_NOT_SAVED + \"(\" + fileName + \")\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return fileName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 22
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/InputNotDoubleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when file is not saved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class InputNotDoubleException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public InputNotDoubleException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.PROMPT_NOT_DOUBLE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/InputNotIntException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when file is not saved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class InputNotIntException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public InputNotIntException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.PROMPT_NOT_INT);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/ItineraryEmptyTodoException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class ItineraryEmptyTodoException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public ItineraryEmptyTodoException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        super(Messages.ITINERARY_EMPTY_TODOLIST);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 9
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/ItineraryFailCreationException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class ItineraryFailCreationException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public ItineraryFailCreationException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        super(Messages.ITINERARY_FAIL_CREATION);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 9
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/ItineraryIncorrectCommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class ItineraryIncorrectCommandException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public ItineraryIncorrectCommandException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        super(Messages.ITINERARY_INCORRECT_COMMAND);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 9
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/ItineraryInsufficientAgendasException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class ItineraryInsufficientAgendasException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public ItineraryInsufficientAgendasException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        super(Messages.ITINERARY_INSUFFICIENT_AGENDAS);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 9
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/NullResultException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Displays an error when nothing is found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class NullResultException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public NullResultException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_ROUTE_NODE_DUPLICATE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 15,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/ObjectCreationFailedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when index query is out of bounds."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class ObjectCreationFailedException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String objectName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ObjectCreationFailedException(String queriedItem) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_OBJECT_NOT_CREATED + \" (\" + queriedItem + \")\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.objectName \u003d objectName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getObjectName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return objectName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 22
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/QueryFailedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when index query is out of bounds."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class QueryFailedException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String queriedItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public QueryFailedException(String queriedItem) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_RESOURCE_NOT_FOUND);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.queriedItem \u003d queriedItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getQueriedItem() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return queriedItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 22
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/QueryOutOfBoundsException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when index query is out of bounds."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class QueryOutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String queriedItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public QueryOutOfBoundsException(String queriedItem) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.queriedItem \u003d queriedItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getQueriedItem() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return queriedItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 22
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/RecommendationDayExceededException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class RecommendationDayExceededException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public RecommendationDayExceededException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        super(Messages.RECOMMENDATION_DAY_EXCEEDED);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 9
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/RouteDuplicateException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when duplicate route is found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteDuplicateException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteDuplicateException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_ROUTE_DUPLICATE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/RouteNodeDuplicateException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when duplicate route is found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeDuplicateException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeDuplicateException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_ROUTE_NODE_DUPLICATE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/StorageFileNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when file is not found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class StorageFileNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public StorageFileNotFoundException(String fileName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_FILE_NOT_FOUND + \"(\" + fileName + \")\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return fileName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 22
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/UnknownConstraintException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when file is not saved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class UnknownConstraintException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public UnknownConstraintException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_CONSTRAINT_UNKNOWN);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/UnknownFieldException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when an invalid field is queried."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class UnknownFieldException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public UnknownFieldException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_FIELD_UNKNOWN);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/main/java/duke/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Class which contains the main logic of SGTravel."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Logic {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/duke/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeApiException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeUnknownCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.PanelResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.ConversationManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.edits.EditorManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * The main logic of the application."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LogicManager extends Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private ConversationManager conversationManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public boolean isNewUser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates LogicManager instance."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public LogicManager() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager \u003d new ConversationManager(model.getRouteManager());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.isNewUser \u003d model.isNewUser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Gets response from LogicManager during setup."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param userInput The input string from user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return CommandResult Object containing information for Ui to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public CommandResult setup(String userInput) throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        conversationManager.converse(userInput);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        c \u003d conversationManager.getCommand();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        CommandResult result \u003d (CommandResult) c.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        isNewUser \u003d model.isNewUser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets response from LogicManager."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The input string from user."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return CommandResult Object containing information for Ui to display."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public CommandResult execute(String userInput) throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String input \u003d userInput;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (EditorManager.isActive()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            logger.log(Level.INFO, \"editing...\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            c \u003d EditorManager.edit(input);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else  {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (model.getRouteManager().isActivated() \u0026\u0026 !conversationManager.isInConversation()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                input \u003d model.getRouteManager().getConversationPrefix() + input;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                c \u003d Parser.parseComplexCommand(input);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                conversationManager.clearContext();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } catch (DukeApiException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new DukeException((e.getMessage()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            } catch (DukeUnknownCommandException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                c \u003d getCommandFromConversationManager(input);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return (CommandResult) c.execute(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets response from LogicManager."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public PanelResult execute(KeyCode keyCode) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (EditorManager.isActive()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return EditorManager.edit(keyCode);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new PanelResult();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets a command from ConversationManager."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Command getCommandFromConversationManager(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(userInput);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return conversationManager.getCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return model.getName();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 13,
      "hongchuan97": 20,
      "Jefferson111": 67
    }
  },
  {
    "path": "src/main/java/duke/logic/PathFinder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.enumerations.Direction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.api.ApiConstraintParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.CustomNode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines an algorithm to find a path between 2 Venues."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class PathFinder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private TransportationMap map;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashSet\u003cBusStop\u003e visited;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashMap\u003cString, String\u003e path;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private boolean found \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Initialise Pathfinder object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public PathFinder(TransportationMap map) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.map \u003d map;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.visited \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.path \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Find path between start and end."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param start starting location."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param end ending location."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ArrayList\u003cVenue\u003e execute(Venue start, Venue end, Constraint constraint) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        found \u003d false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        switch (constraint) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case BUS:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return findBusRoute(start, end);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case MRT:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return findTrainRoute(start, end);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return findMixedRoute(start, end);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cVenue\u003e findMixedRoute(Venue start, Venue end) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Venue startTransport \u003d ApiConstraintParser.getNearestTransport(start, this.map);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Venue endTransport \u003d ApiConstraintParser.getNearestTransport(end, this.map);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cVenue\u003e ans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (startTransport instanceof TrainStation \u0026\u0026 endTransport instanceof TrainStation) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return findTrainRoute(start, end);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (startTransport instanceof BusStop \u0026\u0026 endTransport instanceof TrainStation) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            TrainStation middleTrain \u003d ApiConstraintParser.getNearestTrainStation(start, this.map.getTrainMap());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BusStop middleBus \u003d ApiConstraintParser.getNearestBusStop(middleTrain, this.map.getBusStopMap());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans \u003d findBusRoute(start, middleBus);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans.addAll(Objects.requireNonNull(findTrainRoute(middleTrain, end)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (startTransport instanceof TrainStation \u0026\u0026 endTransport instanceof BusStop) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            TrainStation middleTrain \u003d ApiConstraintParser.getNearestTrainStation(end, this.map.getTrainMap());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BusStop middleBus \u003d ApiConstraintParser.getNearestBusStop(middleTrain, this.map.getBusStopMap());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans \u003d findTrainRoute(start, middleTrain);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans.addAll(Objects.requireNonNull(findBusRoute(middleBus, end)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (startTransport instanceof BusStop \u0026\u0026 endTransport instanceof BusStop) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            TrainStation startTrain \u003d ApiConstraintParser.getNearestTrainStation(start, this.map.getTrainMap());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            TrainStation endTrain \u003d ApiConstraintParser.getNearestTrainStation(end, this.map.getTrainMap());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BusStop startMiddleBus \u003d ApiConstraintParser.getNearestBusStop(startTrain, this.map.getBusStopMap());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BusStop endMiddleBus \u003d ApiConstraintParser.getNearestBusStop(endTrain, this.map.getBusStopMap());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans \u003d findBusRoute(start, startMiddleBus);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans.addAll(Objects.requireNonNull(findTrainRoute(startTrain, endTrain)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans.addAll(Objects.requireNonNull(findBusRoute(endMiddleBus, end)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return ans;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cVenue\u003e findTrainRoute(Venue start, Venue end) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.found \u003d false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        TrainStation startTrainStation \u003d ApiConstraintParser.getNearestTrainStation(start, this.map.getTrainMap());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        TrainStation endTrainStation \u003d ApiConstraintParser.getNearestTrainStation(end, this.map.getTrainMap());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cVenue\u003e path \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (isSameLocation(startTrainStation, endTrainStation)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            path.add(start);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            path.add(end);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return path;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (!isSameLocation(start, startTrainStation)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            path.add(start);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        path.add(startTrainStation);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (!onSameLine(startTrainStation, endTrainStation)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ArrayList\u003cTrainStation\u003e curTrainLine;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (String line : startTrainStation.getTrainCodes()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                curTrainLine \u003d this.map.getTrainLine(line.substring(0,2));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                assert curTrainLine !\u003d null : \"Train Code does not exist\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                for (TrainStation trainStation : curTrainLine) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    if (onSameLine(trainStation, endTrainStation)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        path.add(trainStation);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        found \u003d true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (found) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            found \u003d true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        path.add(endTrainStation);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (!isSameLocation(end, endTrainStation)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            path.add(end);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (found) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return path;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private boolean isSameLocation(Venue start, Venue end) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return start.equals(end);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private boolean onSameLine(TrainStation cur, TrainStation endTrainStation) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (String code : cur.getTrainCodes()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (String code2 : endTrainStation.getTrainCodes()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (code2.contains(code.substring(0,2))) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cVenue\u003e findBusRoute(Venue start, Venue end) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.found \u003d false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop startBusStop \u003d ApiConstraintParser.getNearestBusStop(start, this.map.getBusStopMap());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop endBusStop \u003d ApiConstraintParser.getNearestBusStop(end, this.map.getBusStopMap());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cVenue\u003e ans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (isSameLocation(startBusStop, endBusStop)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans.add(start);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans.add(end);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return ans;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop cur \u003d startBusStop;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        int depthLimit \u003d 0;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        while (!found \u0026\u0026 depthLimit \u003c 3) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.visited.clear();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.path.clear();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            depthFirstSearch(cur, endBusStop, depthLimit);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            depthLimit +\u003d 1;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (!this.found) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            cur \u003d endBusStop;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (!isSameLocation(end, endBusStop)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                ans.add(end);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            while (!cur.getBusCode().equals(startBusStop.getBusCode())) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                ans.add(cur);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                cur \u003d this.map.getBusStopMap().get(path.get(cur.getBusCode()));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans.add(cur);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (!isSameLocation(start, startBusStop)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                ans.add(start);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return ans;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void depthFirstSearch(BusStop cur, BusStop endBusStop, int depthLimit) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (depthLimit \u003d\u003d 0 || this.visited.contains(cur)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.visited.add(cur);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (String bus : cur.getBuses()) { //loop through all bus in bus stop"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            Direction direction;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (this.map.getBusMap().get(bus).getDirection(Direction.FORWARD).contains(cur.getBusCode())) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                direction \u003d Direction.FORWARD;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                direction \u003d Direction.BACKWARD;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            for (String busCode : this.map.getBusMap().get(bus).getDirection(direction)) { // depth search the bus route"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (this.found) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (busCode.equals(cur.getBusCode())) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                path.put(busCode, cur.getBusCode());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (haveSameBus(this.map.getBusStopMap().get(busCode), endBusStop)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    path.put(endBusStop.getBusCode(), busCode);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    this.found \u003d true;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    depthFirstSearch(this.map.getBusStopMap().get(busCode), endBusStop, depthLimit - 1);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private boolean haveSameBus(BusStop cur, BusStop endBusStop) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (String bus : cur.getBuses()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (endBusStop.getBuses().contains(bus)) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates a custom RouteNode from a venue."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param venue The venue."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The custom RouteNode created."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static RouteNode generateCustomRouteNode(Venue venue) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CustomNode(venue.getAddress(), \"\", venue.getLatitude(), venue.getLongitude());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates an ArrayList of Venues between 2 Venues."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startVenue The starting Venue."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endVenue The ending Venue."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The ArrayList of Venues."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryFailedException If a TrainStation cannot be queried."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static ArrayList\u003cVenue\u003e generateInbetweenNodes(Venue startVenue, Venue endVenue, Model model)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throws QueryFailedException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (startVenue instanceof BusStop \u0026\u0026 endVenue instanceof BusStop) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d generateInbetweenBusRoutes(startVenue, endVenue, model);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else if (startVenue instanceof TrainStation \u0026\u0026 endVenue instanceof TrainStation) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d generateInbetweenTrainRoutes((TrainStation) startVenue, (TrainStation) endVenue, model);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates an ArrayList of BusStops between 2 Bus Stops."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startVenue The starting Venue."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endVenue The ending Venue."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The ArrayList of BusStops."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static ArrayList\u003cVenue\u003e generateInbetweenBusRoutes(Venue startVenue, Venue endVenue, Model model)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throws QueryFailedException {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        HashMap\u003cString, BusService\u003e busMap \u003d model.getMap().getBusMap();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isGenerated \u003d false;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (String busNumber: ((BusStop) startVenue).getBuses()) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (!isGenerated) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                BusService bus \u003d busMap.get(busNumber);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                ArrayList\u003cString\u003e busCodes \u003d bus.getDirection(Direction.FORWARD);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result \u003d"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        searchForwardDirectionBus((BusStop) startVenue, (BusStop) endVenue, busNumber, busCodes, model);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (result \u003d\u003d null) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    //search backward direction"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    Collections.reverse(busCodes);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    result \u003d"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    searchReverseDirectionBus((BusStop) startVenue, (BusStop) endVenue, busNumber, busCodes, model);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    if (result !\u003d null) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        isGenerated \u003d true;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    isGenerated \u003d true;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Searches the forward direction of a given BusCode ArrayList to find the start and end venue."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startVenue The start Venue."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endVenue The end Venue."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busNumber The bus service number."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busCodes The ArrayList of bus stop codes."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The ArrayList of BusStops."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryFailedException If the bus stop cannot be found."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static ArrayList\u003cVenue\u003e searchForwardDirectionBus(BusStop startVenue, BusStop endVenue,"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                              String busNumber, ArrayList\u003cString\u003e busCodes, Model model) throws QueryFailedException {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isStartNodeFound \u003d false;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isGenerated \u003d false;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (String busCode : busCodes) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (endVenue.getBusCode().equals(busCode) \u0026\u0026 !isStartNodeFound) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (endVenue.getBusCode().equals(busCode) \u0026\u0026 isStartNodeFound) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                isGenerated \u003d true;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isStartNodeFound) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                BusStop node \u003d new BusStop(busCode, \"\", \"\", 0, 0);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add(node);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (startVenue.getBusCode().equals(busCode)) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                BusStop node \u003d new BusStop(busCode, \"\", \"\", 0, 0);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                node.fetchData(model);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add(new CustomNode(\"Bus Service \" + busNumber, \"\", node.getLatitude(),"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        node.getLongitude()));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                isStartNodeFound \u003d true;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isGenerated) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Searches the reverse direction of a given BusCode ArrayList to find the start and end venue."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startVenue The start Venue."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endVenue The end Venue."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busNumber The bus service number."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busCodes The ArrayList of bus stop codes."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The ArrayList of BusStops."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryFailedException If the bus stop cannot be found."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static ArrayList\u003cVenue\u003e searchReverseDirectionBus(BusStop startVenue, BusStop endVenue,"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                              String busNumber, ArrayList\u003cString\u003e busCodes, Model model) throws QueryFailedException {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isStartNodeFound \u003d false;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isGenerated \u003d false;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (String busCode : busCodes) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (endVenue.getBusCode().equals(busCode) \u0026\u0026 isStartNodeFound) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                isGenerated \u003d true;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isStartNodeFound) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                BusStop node \u003d new BusStop(busCode, \"\", \"\", 0, 0);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add(node);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (startVenue.getBusCode().equals(busCode)) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                BusStop node \u003d new BusStop(busCode, \"\", \"\", 0, 0);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                node.fetchData(model);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add(new CustomNode(\"Bus Service \" + busNumber, \"\", node.getLatitude(),"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        node.getLongitude()));"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                isStartNodeFound \u003d true;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isGenerated) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates an ArrayList of TrainStations between 2 Bus Stops."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startVenue The starting Venue."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endVenue The ending Venue."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The ArrayList of TrainStations."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static ArrayList\u003cVenue\u003e generateInbetweenTrainRoutes(TrainStation startVenue, TrainStation endVenue,"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                                                                Model model) throws QueryFailedException {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        TrainStation start \u003d model.getMap().getTrainStation(startVenue.getDescription());"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cString\u003e trainCodes \u003d start.getTrainCodes();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isGenerated \u003d false;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (String trainCode: trainCodes) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (!isGenerated) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                ArrayList\u003cTrainStation\u003e trainLine \u003d model.getMap().getTrainLine(trainCode.substring(0, 2));"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                //search forward direction"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result \u003d searchForwardDirectionTrain(startVenue, endVenue, trainCode, trainLine);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (result \u003d\u003d null) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    //search backward direction"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    Collections.reverse(trainLine);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    result \u003d searchReverseDirectionTrain(startVenue, endVenue, trainCode, trainLine);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    if (result !\u003d null) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        isGenerated \u003d true;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    isGenerated \u003d true;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Searches the forward direction of a train line to find the start and end venue."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startVenue The start venue."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endVenue The end venue."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainCode The train code."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainLine The train line"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The ArrayList of train stations."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static ArrayList\u003cVenue\u003e searchForwardDirectionTrain(TrainStation startVenue, TrainStation endVenue,"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                               String trainCode, ArrayList\u003cTrainStation\u003e trainLine) {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isStartNodeFound \u003d false;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isGenerated \u003d false;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (TrainStation trainStation : trainLine) {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (endVenue.getDescription().equals(trainStation.getDescription()) \u0026\u0026 !isStartNodeFound) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (endVenue.getDescription().equals(trainStation.getDescription()) \u0026\u0026 isStartNodeFound) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                isGenerated \u003d true;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isStartNodeFound) {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add(trainStation);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (startVenue.getDescription().equals(trainStation.getDescription())) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add(new CustomNode(trainCode + \" Line\", \"\", trainStation.getLatitude(),"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        trainStation.getLongitude()));"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                isStartNodeFound \u003d true;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isGenerated) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Searches the reverse direction of a train line to find the start and end venue."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startVenue The start venue."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endVenue The end venue."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainCode The train code."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainLine The train line"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The ArrayList of train stations."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static ArrayList\u003cVenue\u003e searchReverseDirectionTrain(TrainStation startVenue, TrainStation endVenue,"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                                                                String trainCode, ArrayList\u003cTrainStation\u003e trainLine) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isStartNodeFound \u003d false;"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        boolean isGenerated \u003d false;"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (TrainStation trainStation : trainLine) {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (endVenue.getDescription().equals(trainStation.getDescription()) \u0026\u0026 isStartNodeFound) {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                isGenerated \u003d true;"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isStartNodeFound) {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add(trainStation);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (startVenue.getDescription().equals(trainStation.getDescription())) {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add(new CustomNode(trainCode + \" Line\", \"\", trainStation.getLatitude(),"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        trainStation.getLongitude()));"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                isStartNodeFound \u003d true;"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isGenerated) {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Converts an ArrayList of Venues to RouteNodes."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param nodes The ArrayList of Venues."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The ArrayList of RouteNodes."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ArrayList\u003cRouteNode\u003e convertToRouteNode(ArrayList\u003cVenue\u003e nodes) {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cRouteNode\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (Venue node: nodes) {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (node instanceof BusStop) {"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add((BusStop) node);"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else if (node instanceof TrainStation) {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add((TrainStation) node);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                CustomNode converted \u003d new CustomNode(node.getAddress(), \"\", node.getLatitude(), node.getLongitude());"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result.add(converted);"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 325,
      "hongchuan97": 223,
      "Jefferson111": 6
    }
  },
  {
    "path": "src/main/java/duke/logic/RouteManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles manipulation of Routes when activated."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private boolean isActivated \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int routeIndex \u003d -1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int nodeIndex \u003d -1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private RouteList routes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Route Manager."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param routes The RouteList of the model."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteManager(RouteList routes) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.routes \u003d routes;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Selects and sets a Route for the RouteManager to use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the Route to select."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the index is out of bounds."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setRoute(int index) throws QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (index \u003e\u003d 0 \u0026\u0026 index \u003c routes.getRoutes().size()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeIndex \u003d index + 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            nodeIndex \u003d -1;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new QueryOutOfBoundsException(String.valueOf(index));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Selects and sets a Node for the RouteManager to use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the Node to select."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the index is out of bounds."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setNode(int index) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (routeIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(\"Route not selected!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (index \u003e\u003d 0 \u0026\u0026 index \u003c routes.getRoutes().get(routeIndex - 1).getNumNodes()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            nodeIndex \u003d index + 1;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new QueryOutOfBoundsException(String.valueOf(index));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Resets the Route and returns to selecting the Route instead."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void resetRoute() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeIndex \u003d -1;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Resets the RouteNode and returns the Route."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void resetNode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        nodeIndex \u003d -1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Turns on the Route Manager."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void turnOn() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        isActivated \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Turns off the Route Manager."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void turnOff() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        isActivated \u003d false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the status of the Route Manager."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return isActivated Whether the Route Manager is activated or not."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean isActivated() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return isActivated;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the Route index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return routeIndex The Route index, or -1 if not selected."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public int getRouteIndex() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return routeIndex;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the Node index."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return nodeIndex The Node index, or -1 if not selected."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public int getNodeIndex() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return nodeIndex;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the status information of the RouteList."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The status information of the RouteList"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getRouteListStatus() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (routes.size() \u003e 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            message \u003d Messages.ROUTEMANAGER_STATUS_ROUTELIST_STARTER;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (Route route : routes) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                message +\u003d \"(\" + index + \") \" + route.getName() + \"\\n\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            message +\u003d Messages.ROUTEMANAGER_STATUS_ROUTELIST_END;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            message \u003d Messages.ROUTEMANAGER_STATUS_ROUTELIST_EMPTY;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the welcome message that displays when the Route Manager is activated."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The welcome message."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getWelcomeMessage() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return Messages.ROUTEMANAGER_WELCOME_MESSAGE + getRouteListStatus();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the prefix to add onto a conversation starter for the Route Manager conversations."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getConversationPrefix() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (nodeIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return Messages.ROUTEMANAGER_CONVERSATION_PREFIX_ROUTE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return Messages.ROUTEMANAGER_CONVERSATION_PREFIX_ROUTENODE;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the size of the Route being selected."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The size of the Rotue being selected."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public int getRouteSize() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return routes.get(routeIndex - 1).getNumNodes();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the appropriate help message in context."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The appropriate help message."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getHelpMessage() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (routeIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return Messages.ROUTEMANAGER_HELP_GENERAL;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else if (nodeIndex \u003d\u003d -1) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return Messages.ROUTEMANAGER_HELP_ROUTE;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return Messages.ROUTEMANAGER_HELP_ROUTENODE;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 178
    }
  },
  {
    "path": "src/main/java/duke/logic/TransportationMap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents the transportation map of the Singapore transport network."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class TransportationMap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashMap\u003cString, BusService\u003e busMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashMap\u003cString, BusStop\u003e busStopMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashMap\u003cString, TrainStation\u003e trainMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e northEastLine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e northSouthLine;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e circleLine;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e circleLineSub;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e downtownLine;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e eastWestLine;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e eastWestLineSub;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Initialise createMap object with both busStopMap and busMap."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param busStopMap Map of busStop object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param busMap Map of BusService object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public TransportationMap(HashMap\u003cString, BusStop\u003e busStopMap, HashMap\u003cString, BusService\u003e busMap) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.busMap \u003d busMap;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.busStopMap \u003d busStopMap;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public HashMap\u003cString, BusService\u003e getBusMap() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return this.busMap;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public HashMap\u003cString, BusStop\u003e getBusStopMap() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return this.busStopMap;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void setTrainMap(HashMap\u003cString, TrainStation\u003e trainMap) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.trainMap \u003d trainMap;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        setTrainLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void setTrainLine() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e northEastLine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e northSouthLine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e circleLine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e circleLineSub \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e downtownLine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e eastWestLine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e eastWestLineSub \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (Map.Entry mapElement : this.trainMap.entrySet()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            TrainStation trainStation \u003d (TrainStation)mapElement.getValue();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (String trainCode : trainStation.getTrainCodes()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (trainCode.contains(\"NE\")) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    northEastLine.add(trainStation);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (trainCode.contains(\"NS\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    northSouthLine.add(trainStation);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (trainCode.contains(\"EW\")) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    eastWestLine.add(trainStation);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (trainCode.contains(\"CG\")) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    eastWestLineSub.add(trainStation);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (trainCode.contains(\"CC\")) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    circleLine.add(trainStation);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (trainCode.contains(\"CE\")) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    circleLineSub.add(trainStation);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (trainCode.contains(\"DT\")) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    downtownLine.add(trainStation);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.northEastLine \u003d sortTrainLine(northEastLine, \"NE\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.northSouthLine \u003d sortTrainLine(northSouthLine, \"NS\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.circleLine \u003d sortTrainLine(circleLine, \"CC\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.circleLineSub \u003d sortTrainLine(circleLineSub, \"CE\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.downtownLine \u003d sortTrainLine(downtownLine, \"DT\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.eastWestLine \u003d sortTrainLine(eastWestLine, \"EW\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.eastWestLineSub \u003d sortTrainLine(eastWestLineSub, \"CG\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e sortTrainLine(ArrayList\u003cTrainStation\u003e trainLine, String trainLineCode) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        trainLine.sort(new SortByTrainCode(trainLineCode));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return trainLine;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns mrt line of corresponding code."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param lineCode Code of mrt line"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return mrt line"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ArrayList\u003cTrainStation\u003e getTrainLine(String lineCode) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        switch (lineCode) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"NE\":"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.northEastLine;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"NS\":"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.northSouthLine;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"CC\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.circleLine;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"CE\":"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.circleLineSub;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"EW\":"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.eastWestLine;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"CG\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.eastWestLineSub;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"DT\":"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.downtownLine;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    static class SortByTrainCode implements Comparator\u003cTrainStation\u003e {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        private String trainLine;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        SortByTrainCode(String trainLine) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.trainLine \u003d trainLine;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        public int compare(TrainStation o1, TrainStation o2) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            int trainCodeNumber \u003d getTrainCodeNumber(o1, this.trainLine);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            int trainCodeNumber2 \u003d getTrainCodeNumber(o2, this.trainLine);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            assert trainCodeNumber !\u003d -1 : \"Train Station in wrong line\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            assert trainCodeNumber2 !\u003d -1 : \"Train Station in wrong line\";"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return trainCodeNumber - trainCodeNumber2;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        private int getTrainCodeNumber(TrainStation o1, String trainLine) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (String trainCode : o1.getTrainCodes()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (trainCode.contains(trainLine)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    return Integer.parseInt(trainCode.substring(2));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public HashMap\u003cString, TrainStation\u003e getTrainMap() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return trainMap;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets a TrainStation from the map."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param query The TrainStation name."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The TrainStation."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryFailedException If the TrainStation cannot be found."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public TrainStation getTrainStation(String query) throws QueryFailedException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (trainMap.containsKey(query)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return trainMap.get(query);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new QueryFailedException(\"TRAIN_STATION\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 21,
      "hongchuan97": 150
    }
  },
  {
    "path": "src/main/java/duke/logic/api/ApiConstraintParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.api;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.TransportationMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles all API constraint parsing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class ApiConstraintParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Get nearest Bus Stop to location."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param place Starting location."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busStopMap Map of all Bus Stop."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The nearest Bus Stop."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static BusStop getNearestBusStop(Venue place, HashMap\u003cString, BusStop\u003e busStopMap) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double minimumDisplacement \u003d 1000;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop nearestBusStop \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (Map.Entry mapElement : busStopMap.entrySet()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BusStop cur \u003d (BusStop)mapElement.getValue();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            double displacement \u003d getDisplacement(place, cur);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (displacement \u003c minimumDisplacement) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                minimumDisplacement \u003d displacement;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                nearestBusStop \u003d cur;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return nearestBusStop;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static double getDisplacement(Venue start, Venue end) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double displacement \u003d Math.pow(Math.abs(start.getLatitude() - end.getLatitude()), 2)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                + Math.pow(Math.abs(start.getLongitude() - end.getLongitude()), 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        displacement \u003d Math.sqrt(displacement);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return displacement;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Get nearest Train Station to location."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param place Starting location."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainMap Map of all Train Station."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The nearest Train Station."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static TrainStation getNearestTrainStation(Venue place, HashMap\u003cString, TrainStation\u003e trainMap) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double minimumDisplacement \u003d 1000;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        TrainStation nearestTrainStation \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (Map.Entry mapElement : trainMap.entrySet()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            TrainStation cur \u003d (TrainStation)mapElement.getValue();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            double displacement \u003d getDisplacement(place, cur);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (displacement \u003c minimumDisplacement) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                minimumDisplacement \u003d displacement;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                nearestTrainStation \u003d cur;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return nearestTrainStation;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Return the nearest transportation from the starting location."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param start The starting location"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param map All transportation location"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return Nearest transportation"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static Venue getNearestTransport(Venue start, TransportationMap map) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        TrainStation nearestTrain \u003d getNearestTrainStation(start, map.getTrainMap());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop nearestBus \u003d getNearestBusStop(start, map.getBusStopMap());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return nearestTransport(start, nearestTrain, nearestBus);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static Venue nearestTransport(Venue start, TrainStation nearestTrain, BusStop nearestBus) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double displacementTrain;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double displacementBus;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        displacementTrain \u003d getDisplacement(start, nearestTrain);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        displacementBus \u003d getDisplacement(start, nearestBus);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (displacementTrain \u003c\u003d displacementBus) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return nearestTrain;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return nearestBus;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 8,
      "Inno97": 10,
      "hongchuan97": 70,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/duke/logic/api/ApiParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.api;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.enumerations.Direction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiFailedRequestException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.api.requests.LocationSearchUrlRequest;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.api.requests.DataMallHttpRequest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.api.requests.StaticMapUrlRequest;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles all API requests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class ApiParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final int FORWARD_DIRECTION \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final int MAX_BUS_STOP_DATA_SIZE \u003d 5500;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final int MAX_BUS_SERVICE_DATA_SIZE \u003d 26000;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final int DATA_SIZE_PER_REQUEST \u003d 500;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns names and coordinates of location search."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param param The query location."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The location found."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiNullRequestException If the request returns no valid result."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiTimeoutException If the request times out."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static Venue getLocationSearch(String param) throws ApiNullRequestException, ApiTimeoutException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        LocationSearchUrlRequest req \u003d new LocationSearchUrlRequest(param);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return req.execute();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Return all bus stops in Singapore."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return List of Bus Stops."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static HashMap\u003cString, BusStop\u003e getBusStop() throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String path \u003d \"BusStops\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        int skip \u003d 0;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, BusStop\u003e allBus \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        while (skip \u003c MAX_BUS_STOP_DATA_SIZE) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            DataMallHttpRequest req \u003d new DataMallHttpRequest(\"BusStops\", path, Integer.toString(skip));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            skip +\u003d DATA_SIZE_PER_REQUEST;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            JsonObject jsonRes \u003d req.execute();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            JsonArray arr \u003d jsonRes.getAsJsonArray(\"value\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            for (int i \u003d 0; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                BusStop busstop \u003d new BusStop("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        arr.get(i).getAsJsonObject().get(\"BusStopCode\").getAsString(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        arr.get(i).getAsJsonObject().get(\"RoadName\").getAsString(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        arr.get(i).getAsJsonObject().get(\"Description\").getAsString(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        arr.get(i).getAsJsonObject().get(\"Latitude\").getAsDouble(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        arr.get(i).getAsJsonObject().get(\"Longitude\").getAsDouble());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                allBus.put(arr.get(i).getAsJsonObject().get(\"BusStopCode\").getAsString(), busstop);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return allBus;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns all bus routes in Singapore."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Bus routes."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static HashMap\u003cString, BusService\u003e getBusRoute() throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String path \u003d \"BusRoutes\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        int skip \u003d 0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, BusService\u003e busMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        while (skip \u003c MAX_BUS_SERVICE_DATA_SIZE) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            DataMallHttpRequest req \u003d new DataMallHttpRequest(\"BusRoutes\", path, Integer.toString(skip));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            skip +\u003d DATA_SIZE_PER_REQUEST;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            JsonObject jsonRes \u003d req.execute();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            JsonArray arr \u003d jsonRes.getAsJsonArray(\"value\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            for (int i \u003d 0; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                Direction direction;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                String serviceNo \u003d arr.get(i).getAsJsonObject().get(\"ServiceNo\").getAsString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (arr.get(i).getAsJsonObject().get(\"Direction\").getAsInt() \u003d\u003d FORWARD_DIRECTION) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    direction \u003d Direction.FORWARD;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    direction \u003d Direction.BACKWARD;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (busMap.containsKey(serviceNo)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    busMap.get(serviceNo).addRoute(arr.get(i).getAsJsonObject().get(\"BusStopCode\").getAsString(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                            direction);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    BusService bus \u003d new BusService(serviceNo);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    busMap.put(serviceNo, bus);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    bus.addRoute(arr.get(i).getAsJsonObject().get(\"BusStopCode\").getAsString(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                            direction);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return busMap;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets Static Map from StaticMap API."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param param String formatted parameters"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The image from API"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiFailedRequestException If the request fails."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiNullRequestException If the request returns no valid result."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static Image getStaticMap(String param) throws ApiFailedRequestException, ApiNullRequestException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        StaticMapUrlRequest req \u003d new StaticMapUrlRequest(param);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return req.execute();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates Param in String format for StaticMapUrlRequest."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param imageLength The length of StaticImage."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param imageWidth The width of StaticImage."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param zoomLvl The zoom level."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param centerLat The latitude coordinates of center."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param centerLong The longitude coordinates of center."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param polygonRegion The polygon regions to highlight."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param lineCoord The line coordinates to highlight."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param pointCoord The point coordinates to show."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The String param to parse."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String generateStaticMapParams(String imageLength, String imageWidth, String zoomLvl,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                     String centerLat, String centerLong, String polygonRegion, String lineCoord, String pointCoord) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String result \u003d \"layerchosen\u003ddefault\u0026\" + \"lat\u003d\" + centerLat + \"\u0026lng\u003d\" + centerLong + \"\u0026zoom\u003d\" + zoomLvl"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"\u0026height\u003d\" + imageLength + \"\u0026width\u003d\" + imageWidth;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result +\u003d \"\u0026polygons\u003d\" + polygonRegion;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result +\u003d \"\u0026lines\u003d\" + lineCoord;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result +\u003d \"\u0026points\u003d\" + pointCoord + \"\u0026color\u003d\u0026fillColor\u003d\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Create polygonRegion or lineCoord in String format for StaticMap."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The String result."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String createStaticMapArea(String latitude, String longitude) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return \"[\" +  latitude + \",\" + longitude + \"]\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generate parameters in String format for polygonRegion or lineCoord in StaticMap."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param points The ArrayList of points in format X,Y ."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param rgb The color of the region, in format r,g,b ."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The String param."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String generateStaticMapPolygon(ArrayList\u003cString\u003e points, String rgb) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String result \u003d \"[\";"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (String point: points) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result +\u003d \"[\" + point + \"]\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (!point.equals(points.get(points.size() - 1))) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result +\u003d \",\";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (!rgb.isEmpty()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result +\u003d \":\" + rgb + \":2\";"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result +\u003d \":0,0,0:2\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates parameter in String format for polygonRegion or lineCoord in StaticMap."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param points The ArrayList of points."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param rgb The color of the region or line."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The String param."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String generateStaticMapLines(ArrayList\u003cString\u003e points, String rgb, String lineWidth) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (points.size() \u003e 0) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d \"[\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (String point : points) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result +\u003d \"[\" + point + \"]\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result +\u003d \",\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d result.substring(0, result.length() - 1) + \"]\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (!rgb.isEmpty()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result +\u003d \":\" + rgb + \":\" + lineWidth;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result +\u003d \":0,0,0:\" + lineWidth;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates Point in String format for StaticMap."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param r The R value in RGB."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param g The G value in RGB."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param b The B value in RGB."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param label The text label for the point."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The String result."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String createStaticMapPoint(String latitude, String longitude,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                                              String r, String g, String b, String label) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return \"[\" + latitude + \",\" + longitude + \",\\\"\" + r + \",\" + g + \",\" + b + \"\\\",\\\"\""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    + (Character.toString(label.charAt(0))).toUpperCase() + \"\\\"]\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return \"[\" + latitude + \",\" + longitude + \",\\\"\" + r + \",\" + g + \",\" + b + \"\\\",\\\"\""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    + \"\\\"]\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates parameters in String format for polygonRegion or lineCoord in StaticMap."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param points The ArrayList of points."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The String param."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String generateStaticMapPoints(ArrayList\u003cString\u003e points) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String result \u003d \"[\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (String point: points) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result +\u003d \"[\" + point + \"]\" + \"|\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d result.substring(0, result.length() - 1);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 167,
      "hongchuan97": 68,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/duke/logic/api/requests/DataMallHttpRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.api.requests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeApiException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles Data Mall URL request."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class DataMallHttpRequest extends HttpRequest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String URL \u003d \"http://datamall2.mytransport.sg/ltaodataservice/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public DataMallHttpRequest(String reqType, String path, String param) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(reqType, URL + path, param);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public JsonObject execute() throws DukeApiException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            URL url \u003d new URL(this.url + \"?$skip\u003d\" + this.param);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            HttpURLConnection con \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            con.setRequestMethod(\"GET\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            con.setRequestProperty(\"accept\", \"application/json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            con.setRequestProperty(\"AccountKey\", \"LuhGHYG6Tmu5TdcJm1g8nQ\u003d\u003d\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            con.setConnectTimeout(5000);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            con.setReadTimeout(5000);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BufferedReader in \u003d new BufferedReader(new InputStreamReader(con.getInputStream()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            response \u003d in.readLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeApiException(Messages.ERROR_API_REQUEST_FAILED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        JsonObject result;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            assert (response !\u003d null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            JsonParser jp \u003d new JsonParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            JsonElement root \u003d jp.parse(response);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d root.getAsJsonObject();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeApiException(Messages.ERROR_API_DATA_NULL);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 13,
      "hongchuan97": 38,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/duke/logic/api/requests/HttpRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.api.requests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeApiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Abstract class handling individual HTTP requests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public abstract class HttpRequest\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    protected String reqType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    protected String url;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    protected String param;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises HTTP Request parameters."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param reqType The request type"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param url The request URL"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param param The parameters of the request"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public HttpRequest(String reqType, String url, String param) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.reqType \u003d reqType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.param \u003d param;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes the HTTP Request."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return response The response from request"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public abstract T execute() throws DukeApiException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 23,
      "hongchuan97": 4,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/main/java/duke/logic/api/requests/LocationSearchUrlRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.api.requests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles URL requests to OneMap API to get coordinates of location."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LocationSearchUrlRequest extends UrlRequest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String PARAM_TYPE \u003d \"searchVal\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String OPTIONAL_VARIABLES \u003d \"\u0026returnGeom\u003dY\u0026getAddrDetails\u003dY\u0026pageNum\u003d1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String API_LINK \u003d \"https://developers.onemap.sg/commonapi/search?\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the URL Request."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param param The query."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public LocationSearchUrlRequest(String param) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(param.replace(\" \", \"+\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes the URL request to OneMap API."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return JSONObject The response from OneMap API."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiNullRequestException If the request gives no valid result."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiTimeoutException If the request times out."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Venue execute() throws ApiNullRequestException, ApiTimeoutException  {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            URL url \u003d new URL(API_LINK + PARAM_TYPE + \"\u003d\" + param + OPTIONAL_VARIABLES);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            URLConnection connection \u003d url.openConnection();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            connection.setConnectTimeout(5000);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            connection.setReadTimeout(5000);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            BufferedReader in \u003d new BufferedReader(new InputStreamReader(connection.getInputStream()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            response \u003d in.readLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new ApiTimeoutException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (response !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            JsonParser jp \u003d new JsonParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            JsonElement root \u003d jp.parse(response);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            JsonObject result \u003d root.getAsJsonObject();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            JsonArray arr \u003d result.getAsJsonArray(\"results\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (Integer.parseInt(String.valueOf(result.getAsJsonPrimitive(\"found\"))) \u003e 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return new Venue(arr.get(0).getAsJsonObject().get(\"ADDRESS\").getAsString(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        arr.get(0).getAsJsonObject().get(\"LATITUDE\").getAsDouble(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        arr.get(0).getAsJsonObject().get(\"LONGITUDE\").getAsDouble(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        arr.get(0).getAsJsonObject().get(\"X\").getAsDouble(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        arr.get(0).getAsJsonObject().get(\"Y\").getAsDouble());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new ApiNullRequestException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 65,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/duke/logic/api/requests/StaticMapUrlRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.api.requests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiFailedRequestException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles static, map URL requests to OneMap StaticMap API."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class StaticMapUrlRequest extends UrlRequest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String API_LINK \u003d \"https://developers.onemap.sg/commonapi/staticmap/getStaticImage?\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Construct the URL Request."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param param The location query."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public StaticMapUrlRequest(String param) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(param.replace(\" \", \"+\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes the URL request to StaticMap API."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return image The static map image"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiFailedRequestException If request fails."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiNullRequestException If request gives no valid results."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Image execute() throws ApiFailedRequestException, ApiNullRequestException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Image image;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            URL url \u003d new URL(API_LINK + param);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            image \u003d new Image(url.toExternalForm(), true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new ApiFailedRequestException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return image;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 42,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/api/requests/UrlRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.api.requests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiFailedRequestException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Abstract class representing individual URL requests."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public abstract class UrlRequest\u003cT\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected String param;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public UrlRequest(String param) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.param \u003d param;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes and sends the given URL request."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return response The response from the request."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception ApiFailedRequestException If the request fails."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception ApiNullRequestException If the request does not return a valid result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception ApiTimeoutException If the request times out."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public abstract T execute() throws ApiFailedRequestException, ApiNullRequestException, ApiTimeoutException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 25,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDuplicateTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Adds a new event to users EventList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private final Event event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_ADDITION \u003d \"Got it. I\u0027ve added this event:\\n  \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new AddCommand with the given event."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param event The event to add."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public AddCommand(Event event) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeDuplicateTaskException, FileNotSavedException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            CorruptedFileException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model.getEvents().add(event);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultText(MESSAGE_ADDITION + event);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 38
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/AddProfileCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class AddProfileCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private LocalDateTime birthday;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public AddProfileCommand(String name, LocalDateTime birthday) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        model.getProfileCard().setPerson(name, birthday);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new CommandResultText(Messages.STARTUP_WELCOME_MESSAGE + name);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 25
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/AddSampleItineraryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Adds the given recommended list to users itineraries."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class AddSampleItineraryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Itinerary itinerary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the command with the given sample itinerary."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws DukeDateTimeParseException If the datetime cannot be parsed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileLoadFailException If the file cannot be loaded."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public AddSampleItineraryCommand() throws DukeDateTimeParseException, FileLoadFailException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.itinerary \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        // Add to the list of Itineraries"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        itinerary \u003d model.readRecommendations();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        model.itineraryListSave(itinerary);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        model.saveItinerary(itinerary);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new CommandResultText(\"Successfully added this itinerary: \" + \"\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                + itinerary.printItinerary());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 33,
      "Inno97": 9
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public abstract class Command\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return feedback of the operation result for display."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeException If an error occurs during command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public abstract T execute(Model model) throws DukeException, FileNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 1,
      "Jefferson111": 16
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Deletes an Event."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_DELETE \u003d \"Alright! I\u0027ve removed this task:\\n  \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new DeleteCommand with the given index."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws QueryOutOfBoundsException, FileNotSavedException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            CorruptedFileException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Event event \u003d model.getEvents().remove(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new CommandResultText(MESSAGE_DELETE + event);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new QueryOutOfBoundsException(\"EventList\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 42
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Edits the EventList on SGTravel."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_EDIT_FAILURE \u003d \"Edit is cancelled. Changes are not saved.\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean canSave;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EditCommand(boolean canSave, EventList events) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.canSave \u003d canSave;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws FileNotSavedException, CorruptedFileException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (canSave) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            model.setEvents(events);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            logger.log(Level.FINE, \"Event list is saved.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new CommandResultText(model.getEvents());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultText(MESSAGE_EDIT_FAILURE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 41
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/EditorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.EmptyVenueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.edits.EditorManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.apache.commons.lang3.SerializationUtils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Turns on the editing mode on SGTravel."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EditorCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_EDITOR \u003d \"Editor mode is turned on. Please press any key to begin. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"Enter new information to edit. Enter x to save changes and exit Editor mode.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws EmptyVenueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d SerializationUtils.clone(model.getEvents());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.activate(events, model.getEventVenues());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultText(MESSAGE_EDITOR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 29
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultExit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Exits SGTravel."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_BYE \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultExit execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultExit(MESSAGE_BYE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 1,
      "Jefferson111": 19
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDuplicateTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Finds an Event by keyword."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new FindCommand with the given keyword."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param keyword The keyword to find."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeDuplicateTaskException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d model.getEvents();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList result \u003d find(events);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultText(result);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Finds events with matching keyword."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param events The EventList to be search from."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return EventList containing the events."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeDuplicateTaskException If there are duplicated events found."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList find(EventList events) throws DukeDuplicateTaskException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList result \u003d new EventList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event event: events) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (event.toString().contains(keyword)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                result.add(event);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 52
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/FindPathCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.PathFinder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Finds a path between two Venues."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class FindPathCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Constraint constraint;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int startPointIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int endPointIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_FIND_PATH \u003d \"Path is found, map is opening...\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Constructor to initialise FindPathCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param constraint The constraint of the location request."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param startPointIndex Index of starting location of trip."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param endPointIndex Index of ending location of trip."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FindPathCommand(String constraint, int startPointIndex, int endPointIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        switch (constraint) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"onlyMRT\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            this.constraint \u003d Constraint.MRT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"onlyBus\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            this.constraint \u003d Constraint.BUS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"Hybrid\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            this.constraint \u003d Constraint.MIXED;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            this.constraint \u003d Constraint.CAR;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.endPointIndex \u003d endPointIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.startPointIndex \u003d startPointIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.FINE, constraint + startPointIndex + \" \" + endPointIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a map result."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultMap execute(Model model) throws QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Event startPoint \u003d model.getEvents().get(startPointIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Venue startLocation \u003d startPoint.getLocation();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Event endPoint \u003d model.getEvents().get(endPointIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Venue endLocation \u003d endPoint.getLocation();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            // calculate the shortest path using algorithm with 2 locations as parameters"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            PathFinder pathFinder \u003d new PathFinder(model.getMap());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ArrayList\u003cVenue\u003e route \u003d pathFinder.execute(startLocation, endLocation, this.constraint);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ArrayList\u003cRouteNode\u003e nodes \u003d pathFinder.convertToRouteNode(route);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            CommandResultMap commandResult \u003d new CommandResultMap(MESSAGE_FIND_PATH);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            commandResult.setRoute(nodes);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new QueryOutOfBoundsException(\"EVENT\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 40,
      "Inno97": 4,
      "hongchuan97": 6,
      "Jefferson111": 29
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/FreeTimeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Retrieves the number of free hours."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class FreeTimeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new FreeTimeCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param duration The number of hours of free time."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FreeTimeCommand(int duration) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.duration \u003d duration + 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d model.getSortedList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime result \u003d findTime(events);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new DukeException(Messages.ERROR_FILE_NOT_FOUND + \"Write the code!\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private LocalDateTime findTime(EventList events) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return LocalDateTime.now();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 3,
      "Jefferson111": 36
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/GetBusRouteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.enumerations.Direction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Retrieves the bus route of a given bus."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class GetBusRouteCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String bus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_BUS_ROUTE \u003d \"Here is the bus route:\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public GetBusRouteCommand(String bus) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.bus \u003d bus;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing transports."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            assert (this.bus.matches(\"-?\\\\d+(\\\\.\\\\d+)?\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            HashMap\u003cString, BusService\u003e busMap \u003d model.getMap().getBusMap();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BusService bus \u003d busMap.get(this.bus);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            String result \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            for (String busCode : bus.getDirection(Direction.FORWARD)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                result \u003d result.concat(busCode + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(MESSAGE_BUS_ROUTE + result);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(Messages.PROMPT_NOT_INT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 9,
      "hongchuan97": 20,
      "Jefferson111": 12
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/GetBusStopCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.NullResultException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Retrieves all the bus stops."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class GetBusStopCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String buscode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public GetBusStopCommand(String busCode) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.buscode \u003d busCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing transports."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws NullResultException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        HashMap\u003cString, BusStop\u003e allBus \u003d model.getBusStops();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultText(getResult(allBus));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the result of the bus stop query."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param allBus Hash map that stores all bus stops in Singapore."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The result of the query in String."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws NullResultException If the bus stop could not be found."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String getResult(HashMap\u003cString, BusStop\u003e allBus) throws NullResultException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (allBus.containsKey(buscode)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            BusStop busStop \u003d allBus.get(buscode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return getBusStopInformation(busStop);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        throw new NullResultException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the information of a bus stop."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String getBusStopInformation(BusStop busStop) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return \"This is the information for this Bus Stop:\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                + busStop.getAddress() + \"\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                + busStop.getLatitude() + \"\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                + busStop.getLongitude();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "hongchuan97": 16,
      "Jefferson111": 35
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Shows the help message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_HELP \u003d \"Here is the list of commands:\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"Add Tasks:\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    To Do: todo \u003cdesc\u003e\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Event: event \u003cdesc\u003e /at \u003ctime\u003e\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Deadline: deadline \u003cdesc\u003e /by \u003ctime\u003e\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Recurring Task: repeat \u003cdesc\u003e /by \u003ctime\u003e /every \u003cnum of days\u003e\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Do Within Task: within \u003cdesc\u003e /between \u003ctime\u003e /and \u003ctime\u003e\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"Modifying Tasks:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Snooze: snooze \u003cindex\u003e /to \u003cdate\u003e\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"Task Querying\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Reminder: reminder\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    View by Date: fetch \u003cdate\u003e\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(MESSAGE_HELP);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 13,
      "Jefferson111": 20
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Lists items in the Event list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultText(model.getEvents());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 1,
      "Jefferson111": 18
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ListItineraryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Lists the stored itineraries names an serial number."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class ListItineraryCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new CommandResultText(\"Your Saved Itineraries are :\" + \"\\n\" + model.listItineraries());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 23
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/LocationSearchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.api.ApiParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Tests the URL connection."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class LocationSearchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *  Creates a new LocationSearchCommand with the given location."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param location The location to search."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiNullRequestException If the request fails."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiTimeoutException If the request times out."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public LocationSearchCommand(String location) throws ApiNullRequestException, ApiTimeoutException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venue \u003d ApiParser.getLocationSearch(location);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command with given param."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(\"These are the coordinates of your search:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                + venue.getAddress() + \"\\n\" + venue.getLatitude() + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                + venue.getLongitude());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 27,
      "Jefferson111": 11
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/MarkDoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Marks an Event as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class MarkDoneCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_MARK_DONE \u003d \"Nice! I\u0027ve marked this task as done:\\n  \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new MarkDoneCommand with the given index."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param index The index of the event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public MarkDoneCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws QueryOutOfBoundsException, FileNotSavedException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            CorruptedFileException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Event event \u003d model.getEvents().get(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            event.setDone(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new CommandResultText(MESSAGE_MARK_DONE + event);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new QueryOutOfBoundsException(\"Event\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 43
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/NewItineraryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Creates a new custom itinerary."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class NewItineraryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Itinerary itinerary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Constructs the command with the given sample itinerary."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public NewItineraryCommand(Itinerary itinerary) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.itinerary \u003d itinerary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        model.saveItinerary(itinerary);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        model.itineraryListSave(itinerary);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new CommandResultText(\"New Itinerary Created :\" + itinerary.printItinerary());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 35
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ProfileSetPreferenceCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.CategoryNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Sets the preference base on user input."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ProfileSetPreferenceCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private Boolean setting;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs ProfileSetPreferenceCommand object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param category Category of preference to set"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param setting Setting which user wish to set preference to"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ProfileSetPreferenceCommand(String category, String setting) throws CategoryNotFoundException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.category \u003d category.toLowerCase();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (setting.equalsIgnoreCase(\"true\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.setting \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.setting \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (!this.category.equals(\"sports\") \u0026\u0026 !this.category.equals(\"entertainment\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                \u0026\u0026 !this.category.equals(\"arts\") \u0026\u0026 !this.category.equals(\"lifestlye\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            throw new CategoryNotFoundException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CommandResult execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        model.getProfileCard().setPreference(category, setting);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new CommandResultText(\"Your preference for \" + category + \" is set to \" + setting);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 40
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ProfileShowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ProfileShowCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new CommandResultText(model.getProfileCard());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 17
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/PromptCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Class representing a command to handle a Prompt."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class PromptCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String prompt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new PromptCommand with the given prompt."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param prompt The prompt to display."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public PromptCommand(String prompt) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.prompt \u003d prompt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(prompt);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 13,
      "Jefferson111": 16
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/QuickEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.EventSelectionOutOfBoundsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.edits.Editor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class QuickEditCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_EDIT_SUCCESS \u003d \"The following is successfully changed:\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int DESCRIPTION \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int START_DATE \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int END_DATE \u003d 2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String[] descriptors;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private QuickEditCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public QuickEditCommand(int index, String... descriptors) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.descriptors \u003d descriptors;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws ApiNullRequestException, ApiTimeoutException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            FileNotSavedException, CorruptedFileException, EventSelectionOutOfBoundsException,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            DukeDateTimeParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d model.getEvents().get(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Editor.edit(descriptors[DESCRIPTION], event, DESCRIPTION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Editor.edit(descriptors[START_DATE], event, START_DATE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Editor.edit(descriptors[END_DATE], event, END_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultText(MESSAGE_EDIT_SUCCESS + event);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 42
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RecommendationsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Agenda;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Recommends an itinerary based on number of trip days entered by user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class RecommendationsCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Itinerary itinerary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public RecommendationsCommand(Itinerary itinerary) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.itinerary \u003d itinerary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cAgenda\u003e list \u003d model.getRecommendations(itinerary.getNumberOfDays(), itinerary);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assert (!list.isEmpty()) : \"list should not be null\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        itinerary.setTasks(list);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String result \u003d itinerary.printItinerary();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new CommandResultText(result);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 35,
      "Inno97": 1,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeDuplicateRouteException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.RouteDuplicateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.RouteNodeDuplicateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Adds a Route to RouteList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteAddCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String MESSAGE_ADDITION \u003d \"Got it. I\u0027ve added this route:\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteAddCommand with the given name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param name The index of the task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteAddCommand(String name, String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given Route List and user interface."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws DukeDuplicateRouteException If there is a duplicate route."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws RouteNodeDuplicateException If there is a duplicate route node."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeDuplicateRouteException, RouteDuplicateException,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteNodeDuplicateException, FileNotSavedException, CorruptedFileException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteList routes \u003d model.getRoutes();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routes.add(new Route(name, description));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(MESSAGE_ADDITION + name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 46
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Deletes a Route from RouteList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteDeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String MESSAGE_DELETION \u003d \"Got it. I\u0027ve deleted this Route:\\n  \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Deletes a Route at the given index in Route List."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the Route."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteDeleteCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws CorruptedFileException If the file is corrupted."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws CorruptedFileException, FileNotSavedException,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteList routes \u003d model.getRoutes();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String routeName \u003d routes.get(index).getName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routes.remove(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(MESSAGE_DELETION + routeName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(\"ROUTE\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 47
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.UnknownFieldException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Edits a Route in RouteList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteEditCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Edited the Route!\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String field;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String newValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteEditCommand with the given parameters."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of Route in RouteList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param field The variable of Route to edit."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param newValue The value to assign"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteEditCommand(int index, String field, String newValue) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.field \u003d field;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.newValue \u003d newValue;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given Route."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws CorruptedFileException If the file is corrupted."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file is not saved."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws UnknownFieldException If the queried field is not valid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws CorruptedFileException, FileNotSavedException,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            UnknownFieldException, QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Route route \u003d model.getRoutes().get(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            switch (field.toLowerCase()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            case \"name\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                route.setName(newValue);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            case \"description\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                route.setDescription(newValue);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new UnknownFieldException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(\"ROUTE\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 64
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteGenerateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.RouteDuplicateException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.RouteNodeDuplicateException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.PathFinder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.api.ApiParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.CustomNode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Generates a route based on 2 locations."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteGenerateCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String startPoint;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String endPoint;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Constraint type;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteGenerateCommand with the given node."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param startPoint The starting point of the route."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param endPoint The ending point of the route."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteGenerateCommand(String startPoint, String endPoint, Constraint type) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.startPoint \u003d startPoint;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.endPoint \u003d endPoint;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws ApiNullRequestException, ApiTimeoutException,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            QueryFailedException, QueryOutOfBoundsException, RouteNodeDuplicateException, FileNotSavedException,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            CorruptedFileException, RouteDuplicateException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue startVenue \u003d ApiParser.getLocationSearch(startPoint);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue endVenue \u003d ApiParser.getLocationSearch(endPoint);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        PathFinder pathFinder \u003d new PathFinder(model.getMap());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e venueList \u003d pathFinder.execute(startVenue, endVenue, type);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (type \u003d\u003d Constraint.BUS) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Collections.reverse(venueList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(startPoint + \" to \" + endPoint + \"  (\" + type.toString() + \")\", \"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue previousVenue \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (Venue venue: venueList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if ((previousVenue instanceof BusStop \u0026\u0026 venue instanceof BusStop)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    || (previousVenue instanceof TrainStation \u0026\u0026 venue instanceof TrainStation)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                ArrayList\u003cVenue\u003e inBetweenNodes \u003d PathFinder.generateInbetweenNodes(previousVenue, venue, model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                for (Venue inbetweenVenue: inBetweenNodes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        if (inbetweenVenue instanceof CustomNode) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                            String description \u003d route.getDescription();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                            description +\u003d inbetweenVenue.getAddress() + \"/\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                            route.setDescription(description);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        route.addNode((RouteNode) inbetweenVenue);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    } catch (RouteNodeDuplicateException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        //remove duplicate nodes and merge"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        route \u003d pruneDuplicateRoute(route, inbetweenVenue);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (venue instanceof BusStop || venue instanceof TrainStation) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                route.addNode((RouteNode) venue);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                route.addNode(PathFinder.generateCustomRouteNode(venue));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            previousVenue \u003d venue;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        updateRouteNodes(route, model);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRoutes().add(route);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(Messages.PROMPT_ROUTE_ADD_SUCCESS + \"\\n\" + route.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Finds the duplicate RouteNode in a route, and removes the unneeded routes."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The route object."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param target The RouteNode that has a duplicate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The route object."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the node cannot be deleted."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Route pruneDuplicateRoute(Route route, Venue target) throws QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (int i \u003d route.getNumNodes() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (!route.getNode(i).equals(target)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                route.deleteNode(i);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return route;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Updates the RouteNodes in a route by fetching data from the model if possible."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The Route object."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void updateRouteNodes(Route route, Model model) throws QueryFailedException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (RouteNode routeNode: route.getNodes()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (routeNode instanceof BusStop) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                ((BusStop) routeNode).fetchData(model);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else if (routeNode instanceof TrainStation) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                ((TrainStation) routeNode).fetchData(model);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 134
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteListAllCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Lists all Routes in RouteList."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteListAllCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given Route List and user interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(model.getRoutes());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 19
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Lists a given Route in RouteList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteListCommand with the given index."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the Route in RouteList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteListCommand(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given Route List and user interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(model.getRoutes().get(index));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(\"ROUTE\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 36
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteManagerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.EmptyVenueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Turns on the route selector mode on SGTravel."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteManagerCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws EmptyVenueException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRouteManager().turnOn();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(model.getRouteManager().getWelcomeMessage());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 22
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteManagerExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Lists items in the Event list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteManagerExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String MESSAGE \u003d \"Exiting Route Manager...\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRouteManager().turnOff();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(MESSAGE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 22
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteManagerHelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Shows the help message in context for the Route Manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteManagerHelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(model.getRouteManager().getHelpMessage());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 21
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteManagerInfoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Shows the help message in context for the Route Manager."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteManagerInfoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int routeIndex \u003d model.getRouteManager().getRouteIndex() - 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int nodeIndex \u003d model.getRouteManager().getNodeIndex() - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (routeIndex \u003e\u003d 0 \u0026\u0026 nodeIndex \u003c\u003d -1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteListCommand command \u003d new RouteListCommand(routeIndex);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return command.execute(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else if (routeIndex \u003c\u003d -1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteListAllCommand command \u003d new RouteListAllCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return command.execute(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(\"Route not selected.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 30
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteManagerNearbyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiFailedRequestException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultImage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Shows the help message in context for the Route Manager."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteManagerNearbyCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultImage execute(Model model) throws ApiFailedRequestException, ApiTimeoutException,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ApiNullRequestException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int routeIndex \u003d model.getRouteManager().getRouteIndex() - 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int nodeIndex \u003d model.getRouteManager().getNodeIndex() - 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeNeighboursCommand command \u003d new RouteNodeNeighboursCommand(routeIndex, nodeIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return command.execute(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 27
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteManagerNodeBackCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultImage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Class representing a command to handle a RouteManagerNodeBackCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteManagerNodeBackCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command and returns a n image result."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultImage execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int routeIndex \u003d model.getRouteManager().getRouteIndex() - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int nodeIndex \u003d model.getRouteManager().getNodeIndex();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (nodeIndex !\u003d -1) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            nodeIndex \u003d Math.max(nodeIndex - 2, 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            model.getRouteManager().setNode(nodeIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (routeIndex !\u003d -1 || nodeIndex !\u003d -1) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteNodeShowCommand command \u003d new RouteNodeShowCommand(routeIndex, nodeIndex);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return command.execute(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(\"Route node not selected.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 33
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteManagerNodeInfoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultImage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Shows the help message in context for the Route Manager."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteManagerNodeInfoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultImage execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int routeIndex \u003d model.getRouteManager().getRouteIndex() - 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int nodeIndex \u003d model.getRouteManager().getNodeIndex() - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (routeIndex !\u003d -1 || nodeIndex !\u003d -1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteNodeShowCommand command \u003d new RouteNodeShowCommand(routeIndex, nodeIndex);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return command.execute(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(\"Route node not selected.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 27
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteManagerNodeNextCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultImage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Class representing a command to handle a RouteManagerNodeNextCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteManagerNodeNextCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command and returns a n image result."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultImage execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int routeIndex \u003d model.getRouteManager().getRouteIndex() - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int nodeIndex \u003d Math.min(model.getRouteManager().getNodeIndex(), model.getRouteManager().getRouteSize());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRouteManager().setNode(nodeIndex);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (routeIndex !\u003d -1 || nodeIndex !\u003d -1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteNodeShowCommand command \u003d new RouteNodeShowCommand(routeIndex, nodeIndex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return command.execute(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(\"Route node not selected.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 30
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteManagerNodeSelectorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteManagerNodeSelectorCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Alright! Selecting this Node.\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new DeleteCommand with the given index."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteManagerNodeSelectorCommand(int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRouteManager().setNode(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 30
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteManagerReturnCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Class representing a command to handle a RouteManagerReturnCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteManagerReturnCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Alright! Selecting back the Route instead!\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (model.getRouteManager().getNodeIndex() \u003d\u003d -1 \u0026\u0026 model.getRouteManager().getRouteIndex() !\u003d -1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            model.getRouteManager().resetRoute();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRouteManager().resetNode();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 26
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteManagerSelectorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteManagerSelectorCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Alright! Selecting this Route.\\n\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new DeleteCommand with the given index."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteManagerSelectorCommand(int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command and returns a text result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRouteManager().setRoute(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 30
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteNodeAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiFailedRequestException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.RouteNodeDuplicateException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultImage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Adds a RouteNode to RouteList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeAddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private RouteNode node;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexRoute;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexNode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private boolean isEmptyIndexNode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteNodeAddCommand with the given node."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param node The node to add."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeAddCommand(RouteNode node, int indexRoute, int indexNode, boolean isEmptyIndexNode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.node \u003d node;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexRoute \u003d indexRoute;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexNode \u003d indexNode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.isEmptyIndexNode \u003d isEmptyIndexNode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws CorruptedFileException If the file is corrupted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file is not saved."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws RouteNodeDuplicateException If there is a duplicate RouteNode."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultImage execute(Model model) throws CorruptedFileException, FileNotSavedException,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteNodeDuplicateException, QueryOutOfBoundsException, QueryFailedException, ApiFailedRequestException,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ApiTimeoutException, ApiNullRequestException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (node instanceof BusStop) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ((BusStop) node).fetchData(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else if (node instanceof TrainStation) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ((TrainStation) node).fetchData(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Route route \u003d model.getRoutes().get(indexRoute);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isEmptyIndexNode) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                route.addNode(node);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else if (indexNode \u003e\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                route.addNode(node, indexNode);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new QueryOutOfBoundsException(\"ROUTE_NODE\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(\"ROUTE\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new RouteNodeShowCommand(indexRoute, indexNode).execute(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 76
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteNodeDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Deletes a RouteNode from RouteList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeDeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexRoute;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexNode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String MESSAGE_DELETION \u003d \"Got it. I\u0027ve deleted this Route Node:\\n  \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Deletes a Route Node at the given index and given Route."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexRoute The index of the Route."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexNode The index of the Route Node."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeDeleteCommand(int indexRoute, int indexNode) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexRoute \u003d indexRoute;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexNode \u003d indexNode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws CorruptedFileException If the file is corrupted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file is not saved."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws CorruptedFileException, FileNotSavedException,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Route route \u003d model.getRoutes().get(indexRoute);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String address \u003d route.getNode(indexNode).getAddress();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.remove(indexNode);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(MESSAGE_DELETION + address);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(\"ROUTE_NODE\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 50
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteNodeEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.InputNotDoubleException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.UnknownConstraintException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.UnknownFieldException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Edits a RouteNode in RouteList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeEditCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexRoute;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexNode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String var;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String val;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Edited the Route Node!\\n  \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteNodeEditCommand with the given parameters."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexRoute The index of Route in RouteList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexNode The index of Node in RouteList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param var The variable of Route to edit."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param val The value to assign"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeEditCommand(int indexRoute, int indexNode, String var, String val) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexRoute \u003d indexRoute;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexNode \u003d indexNode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.var \u003d var;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.val \u003d val;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws CorruptedFileException If the file is corrupted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file is not saved."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws InputNotDoubleException If the input is not an integer."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws UnknownFieldException If the field is unknown."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws UnknownConstraintException If the constraint is unknown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws CorruptedFileException, FileNotSavedException,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            InputNotDoubleException, QueryOutOfBoundsException, UnknownFieldException, UnknownConstraintException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteNode node \u003d model.getRoutes().get(indexRoute).getNode(indexNode);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            switch (var.toLowerCase()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            case \"address\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                node.setAddress(val);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            case \"description\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                node.setDescription(val);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            case \"type\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                node.setType(Constraint.valueOf(val));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            case \"latitude\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                node.setLatitude(Integer.parseInt(val));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            case \"longitude\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                node.setLongitude(Integer.parseInt(val));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new UnknownFieldException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new InputNotDoubleException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new UnknownConstraintException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(\"ROUTE_NODE\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 84
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteNodeListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Lists a given RouteNode in RouteList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexRoute;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexNode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteNodeListCommand with the given parameters."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexRoute The index of the Route in RouteList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexNode The index of the Route Node in Route."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeListCommand(int indexRoute, int indexNode) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexRoute \u003d indexRoute;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexNode \u003d indexNode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given Route and user interface."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(model.getRoutes().get(indexRoute).getNode(indexNode));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(\"ROUTE_NODE\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 39
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteNodeNeighboursCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiFailedRequestException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.api.ApiParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultImage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Shows nearby neighbours of a given RouteNode."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeNeighboursCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String DIMENSIONS \u003d \"512\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String ZOOM_LEVEL \u003d \"16\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String RED_VALUE_OTHER \u003d \"255\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String GREEN_VALUE_OTHER \u003d \"122\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String BLUE_VALUE_OTHER \u003d \"0\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String RED_VALUE_QUERY \u003d \"122\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String GREEN_VALUE_QUERY \u003d \"255\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String BLUE_VALUE_QUERY \u003d \"0\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String RED_VALUE_NEIGHBOUR \u003d \"0\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String GREEN_VALUE_NEIGHBOUR \u003d \"0\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String BLUE_VALUE_NEIGHBOUR \u003d \"0\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String LINE_WIDTH \u003d \"2\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Here are some Nodes that are close to this:\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final int DISTANCE_THRESHOLD \u003d 3000;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final int NEIGHBOUR_MAX_SIZE \u003d 5;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexRoute;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexNode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteNodeNeighboursCommand with the given parameters."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexRoute The index of Route in RouteList."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexNode The index of Node in RouteList."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeNeighboursCommand(int indexRoute, int indexNode) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexRoute \u003d indexRoute;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexNode \u003d indexNode;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultImage execute(Model model) throws ApiNullRequestException, ApiTimeoutException,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ApiFailedRequestException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e result \u003d getNeighbour(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Image image \u003d getImage(model, result);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultImage(image, MESSAGE_SUCCESS, result);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Image getImage(Model model, ArrayList\u003cVenue\u003e nearbyNodes) throws ApiNullRequestException,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ApiTimeoutException, ApiFailedRequestException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d model.getRoutes().get(indexRoute);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNode node \u003d model.getRoutes().get(indexRoute).getNode(indexNode);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String rgb \u003d RED_VALUE_OTHER + \",\" + GREEN_VALUE_OTHER + \",\" + BLUE_VALUE_OTHER;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String param;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (node instanceof BusStop) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            param \u003d ((BusStop) node).getBusCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            param \u003d node.getAddress();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue query \u003d ApiParser.getLocationSearch(param);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cString\u003e points \u003d generateOtherPoints(route, node);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Image image \u003d ApiParser.getStaticMap(ApiParser.generateStaticMapParams(DIMENSIONS, DIMENSIONS, ZOOM_LEVEL,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                String.valueOf(query.getLatitude()), String.valueOf(query.getLongitude()), \"\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                generateLineParam(points, rgb), generatePointParam(route, node, nearbyNodes)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return image;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private ArrayList\u003cVenue\u003e getNeighbour(Model model) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e temp \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNode node \u003d model.getRoutes().get(indexRoute).getNode(indexNode);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (Map.Entry mapElement : model.getMap().getBusStopMap().entrySet()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (node instanceof BusStop \u0026\u0026 ((BusStop) mapElement.getValue()).getDistance(node) \u003c DISTANCE_THRESHOLD"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    \u0026\u0026 !((BusStop) mapElement.getValue()).getBusCode().equals(((BusStop) node).getBusCode())) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                temp.add((BusStop) mapElement.getValue());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (Map.Entry mapElement : model.getMap().getTrainMap().entrySet()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (((TrainStation) mapElement.getValue()).getDistance(node) \u003c DISTANCE_THRESHOLD"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    \u0026\u0026 !((TrainStation) mapElement.getValue()).getAddress().equals(node.getAddress())) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                temp.add((TrainStation) mapElement.getValue());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        temp.sort((Venue o1, Venue o2) -\u003e (int) (o1.getDistance(node) - o2.getDistance(node)));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (int i \u003d 0; i \u003c NEIGHBOUR_MAX_SIZE \u0026\u0026 i \u003c temp.size(); i++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result.add(temp.get(i));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates 6 other nodes beside the selected one in the Route as an ArrayList."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The Route object."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param query The original RouteNode being queried."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return points The ArrayList of points."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ArrayList\u003cString\u003e generateOtherPoints(Route route, RouteNode query) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cString\u003e points \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int startIndex \u003d Math.max(0, indexNode - 3);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int endIndex \u003d Math.min(route.getNumNodes() - 1, startIndex + 6);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (int i \u003d startIndex; i \u003c endIndex; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (!(route.getNode(i)).equals(query)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                points.add(route.getNode(i).getLatitude() + \",\" + route.getNode(i).getLongitude());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates the line parameters for the StaticMap request."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param points The ArrayList of points."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param rgb The RGB value."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The line parameters."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String generateLineParam(ArrayList\u003cString\u003e points, String rgb)  {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return ApiParser.generateStaticMapLines(points, rgb, LINE_WIDTH);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates the point parameters of a Route."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The Route object."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param query The RouteNode being shown."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The point parameters."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String generatePointParam(Route route, RouteNode query, ArrayList\u003cVenue\u003e nearbyNodes) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (Venue node : nearbyNodes) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result +\u003d ApiParser.createStaticMapPoint(String.valueOf(node.getLatitude()),"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    String.valueOf(node.getLongitude()), RED_VALUE_NEIGHBOUR, GREEN_VALUE_NEIGHBOUR,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    BLUE_VALUE_NEIGHBOUR, String.valueOf(index)) + \"|\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (RouteNode node : route.getNodes()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (!node.equals(query) \u0026\u0026 isWithinDistance(node, query)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result +\u003d ApiParser.createStaticMapPoint(String.valueOf(node.getLatitude()),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        String.valueOf(node.getLongitude()), RED_VALUE_OTHER, GREEN_VALUE_OTHER, BLUE_VALUE_OTHER,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        node.getAddress()) + \"|\";"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result +\u003d ApiParser.createStaticMapPoint(String.valueOf(node.getLatitude()),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        String.valueOf(node.getLongitude()), RED_VALUE_QUERY, GREEN_VALUE_QUERY, BLUE_VALUE_QUERY,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        node.getAddress()) + \"|\";"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d result.substring(0, result.length() - 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks if a node is close enough to appear in the StaticMap image of the query."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param query The node being checked."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param node The node in the center of the image."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Whether the node is close enough to be added."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private boolean isWithinDistance(RouteNode query, RouteNode node) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return (node.getLatitude() - query.getLatitude()) \u003c 0.04"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                \u0026\u0026 (node.getLongitude() - query.getLongitude()) \u003c 0.04;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 195
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteNodeShowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiFailedRequestException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.api.ApiParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultImage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Creates a StaticMap image of a Route for visualization."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeShowCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String DIMENSIONS \u003d \"512\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String ZOOM_LEVEL \u003d \"14\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String RED_VALUE_OTHER \u003d \"255\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String GREEN_VALUE_OTHER \u003d \"122\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String BLUE_VALUE_OTHER \u003d \"0\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String RED_VALUE_QUERY \u003d \"122\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String GREEN_VALUE_QUERY \u003d \"255\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String BLUE_VALUE_QUERY \u003d \"0\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String LINE_WIDTH \u003d \"2\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final int NODE_MAX_SIZE \u003d 9;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexRoute;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexNode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteNodeShowCommand with the given parameters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexRoute The index of the Route in RouteList."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexNode indexNode The index of the Node in RouteList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeShowCommand(int indexRoute, int indexNode) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexRoute \u003d indexRoute;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexNode \u003d indexNode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given Route and user interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultRouteMap."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultImage execute(Model model) throws QueryOutOfBoundsException,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ApiNullRequestException, ApiTimeoutException, ApiFailedRequestException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d model.getRoutes().get(indexRoute);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNode node \u003d model.getRoutes().get(indexRoute).getNode(indexNode);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String rgb \u003d RED_VALUE_OTHER + \",\" + GREEN_VALUE_OTHER + \",\" + BLUE_VALUE_OTHER;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String param;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (node instanceof BusStop) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            param \u003d ((BusStop) node).getBusCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            param \u003d node.getAddress();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue query \u003d ApiParser.getLocationSearch(param);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cString\u003e points \u003d generateOtherPoints(route, node, indexNode);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Image image \u003d ApiParser.getStaticMap(ApiParser.generateStaticMapParams(DIMENSIONS, DIMENSIONS, ZOOM_LEVEL,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                String.valueOf(query.getLatitude()), String.valueOf(query.getLongitude()), \"\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                generateLineParam(points, rgb), generatePointParam(route, node)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultImage(Messages.PROMPT_ROUTE_SELECTOR_DISPLAY + node.getDisplayInfo(),image);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates NODE_MAX_SIZE other nodes beside the selected one in the Route as an ArrayList."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The Route object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param query The original RouteNode being queried."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return points The ArrayList of points."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ArrayList\u003cString\u003e generateOtherPoints(Route route, RouteNode query, int indexNode) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cString\u003e points \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int startIndex \u003d Math.max(0, indexNode - 3);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int endIndex \u003d Math.min(route.getNumNodes() - 1, startIndex + NODE_MAX_SIZE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (int i \u003d startIndex; i \u003c endIndex; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (!(route.getNode(i)).equals(query)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                points.add(route.getNode(i).getLatitude() + \",\" + route.getNode(i).getLongitude());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return points;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates the line parameters for the StaticMap request."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param points The ArrayList of points."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param rgb The RGB value."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The line parameters."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String generateLineParam(ArrayList\u003cString\u003e points, String rgb)  {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return ApiParser.generateStaticMapLines(points, rgb, LINE_WIDTH);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates the point parameters of a Route."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The Route object."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param query The RouteNode being shown."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The point parameters."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String generatePointParam(Route route, RouteNode query) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String result \u003d \"\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (RouteNode node: route.getNodes()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (!node.equals(query) \u0026\u0026 isWithinDistance(node, query)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result +\u003d ApiParser.createStaticMapPoint(String.valueOf(node.getLatitude()),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        String.valueOf(node.getLongitude()), RED_VALUE_OTHER, GREEN_VALUE_OTHER, BLUE_VALUE_OTHER,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        node.getAddress()) + \"|\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result +\u003d ApiParser.createStaticMapPoint(String.valueOf(node.getLatitude()),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        String.valueOf(node.getLongitude()), RED_VALUE_QUERY, GREEN_VALUE_QUERY, BLUE_VALUE_QUERY,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        node.getAddress()) + \"|\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d result.substring(0, result.length() - 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks if a node is close enough to appear in the StaticMap image of the query."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param query The node being checked."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param node The node in the center of the image."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Whether the node is close enough to be added."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private boolean isWithinDistance(RouteNode query, RouteNode node) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return (node.getLatitude() - query.getLatitude()) \u003c 0.04"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                \u0026\u0026 (node.getLongitude() - query.getLongitude()) \u003c 0.04;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 147
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteShowCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Creates a MapWindow of a Route for visualization."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteShowCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteShowCommand with the given parameters."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the Route in RouteList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteShowCommand(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given Route and user interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultRouteMap."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultMap execute(Model model) throws QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultMap(model.getRoutes().get(index));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(String.valueOf(index));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 37
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ShowItineraryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Shows the requested Itinerary."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class ShowItineraryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private String number;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Constructs the command with the given itinerary name."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public ShowItineraryCommand(String number) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.number \u003d number;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Itinerary itinerary \u003d model.getItinerary(number);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new CommandResultText(itinerary.printItinerary());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 34
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/StaticMapCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiFailedRequestException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultImage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.api.ApiParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Shows a map of location from StaticMap API."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class StaticMapCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String DIMENSIONS \u003d \"512\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String ZOOM_LEVEL \u003d \"18\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String RED_VALUE \u003d \"255\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String GREEN_VALUE \u003d \"122\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String BLUE_VALUE \u003d \"0\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String param;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Image image;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new StaticMapCommand for the given location query."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param location The location to query."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiNullRequestException If request fails."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiTimeoutException If request times out."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public StaticMapCommand(String location) throws ApiNullRequestException, ApiTimeoutException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ApiFailedRequestException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.param \u003d location;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue query \u003d ApiParser.getLocationSearch(location);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.image \u003d ApiParser.getStaticMap(ApiParser.generateStaticMapParams(DIMENSIONS, DIMENSIONS, ZOOM_LEVEL,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                String.valueOf(query.getLatitude()), String.valueOf(query.getLongitude()), \"\", \"\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                ApiParser.createStaticMapPoint(String.valueOf(query.getLatitude()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                String.valueOf(query.getLongitude()), RED_VALUE, GREEN_VALUE, BLUE_VALUE, location)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given user interface."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The Model object containing task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResult containing the image from StaticMap."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiNullRequestException If request fails."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiTimeoutException If request times out."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultImage execute(Model model) throws ApiNullRequestException, ApiTimeoutException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultImage(\"Showing map of \" + param, image);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Inno97": 53,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ViewScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultCalender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Command to allow users to view their calender."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ViewScheduleCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_SHOW_CALENDAR \u003d \"Calendar is launching...\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command and returns a calendar result."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing event list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultCalender execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        CommandResultCalender commandResult \u003d new CommandResultCalender(MESSAGE_SHOW_CALENDAR);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        commandResult.setEvents(model.getEvents());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 2,
      "Jefferson111": 19
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/Calenderable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Interface representing a calender."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public interface Calenderable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    EventList getEvents();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setEvents(EventList events);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Abstract class which represents the result of a command\u0027s execution as a string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public abstract class CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 2,
      "Inno97": 8,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/CommandResultCalender.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines the command result of any calender command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class CommandResultCalender extends CommandResult implements Calenderable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a basic CommandResultCalender object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message Message for ui to display."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultCalender(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setEvents(EventList events) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventList getEvents() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 24,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/CommandResultExit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines the command result of an exit command as a string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class CommandResultExit extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultExit(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 13,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/CommandResultImage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines the command result of any command containing an image."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class CommandResultImage extends CommandResult implements Imageable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Image image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a basic CommandResultImage object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message Message for ui to display."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultImage(String message, Image image) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.image \u003d image;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor that helps to create text for an ArrayList of Venue."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message The message to show at the top."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param venues The ArrayList of Venue."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultImage(Image image, String message, ArrayList\u003cVenue\u003e venues) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String result \u003d message;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (Venue venue : venues) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (venue instanceof BusStop) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result +\u003d \"(\" + index + \") \" + ((BusStop) venue).getBusCode() + \" \" + venue.getAddress() + \"\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else if (venue instanceof TrainStation) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result +\u003d \"(\" + index + \") \" + ((TrainStation) venue).getDescription() + \" Station\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result +\u003d \"(\" + index + \") \" + venue.getAddress() + \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.message \u003d result;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.image \u003d image;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Image getImage() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return image;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 55,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/CommandResultMap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines the command result of a command needing a map."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class CommandResultMap extends CommandResult implements Routeable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private ArrayList\u003cRouteNode\u003e route;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a basic CommandResultMap object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message Message for ui to display."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultMap(String message) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor for a basic CommandResultMap object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The route object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultMap(Route route) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.route \u003d route.getNodes();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ArrayList\u003cRouteNode\u003e getRoute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return route;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setRoute(ArrayList\u003cRouteNode\u003e route) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.route \u003d route;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 37,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/CommandResultText.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.CustomNode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.profile.ProfileCard;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines the result of various commands as a string."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class CommandResultText extends CommandResult {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a basic CommandResultImage object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message Message for ui to display."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText(String message) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Alternative constructor that helps to create text for a list of events."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText(EventList events) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        message \u003d \"Here are the list of events:\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event t : events) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            message +\u003d (i + \". \" + t + \"\\n\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor that helps to create text for a list of Routes."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText(RouteList routes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        message \u003d \"Here is the information of Routes:\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (Route route: routes.getRoutes()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            message +\u003d \"(\" + index + \") \" + route.getName() + \"\\n\" + route.getDescription() + \"\\n\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor that helps to create text for a Route."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText(Route route) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        message \u003d \"Here is the information of the Route:\\n\" + route.getName() + \"\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        message +\u003d (route.getDescription()).replace(\"/\", \"\\n\") + \"\\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int index \u003d 1;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (RouteNode node: route.getNodes()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            message +\u003d \"(\" + index + \") \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (node instanceof BusStop) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                message +\u003d ((BusStop) node).getBusCode() + \" \" + node.getAddress() + \"\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else if (node instanceof TrainStation) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                message +\u003d ((TrainStation) node).getTrainCodes() + \" \" + node.getDescription() + \"\\n\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else if (node instanceof CustomNode)  {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                message +\u003d node.getAddress() + \"\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor that helps to create text for a Route Node."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText(RouteNode node) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        message \u003d \"Here is the information of the \";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (node instanceof BusStop) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            message +\u003d \"Bus Stop:\\n\" + ((BusStop) node).getBusCode() + \"\\n\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else if (node instanceof TrainStation) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            message +\u003d \"Train Station:\\n\" + ((TrainStation) node).getTrainCodes() + \"\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        message +\u003d  node.getAddress() + \"\\n\" + node.getDescription() + \"\\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"(\" + node.getType().toString() + \", \" + node.getCoordinate() + \")\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor that helps to create text for an ArrayList of Venue."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message The message to show at the top."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param venues The ArrayList of Venue."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText(String message, ArrayList\u003cVenue\u003e venues) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String result \u003d message;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (Venue venue : venues) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (venue instanceof BusStop) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result +\u003d ((BusStop) venue).getBusCode() + \" \" + venue.getAddress() + \"\\n\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result +\u003d venue.getAddress() + \"\\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.message \u003d result;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Alternative constructor that helps to create text for a list of events."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CommandResultText(ProfileCard profileCard) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        message \u003d \"PROFILE:\\n\\n\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        message +\u003d \"Name: \" + profileCard.getPersonName() + \"\\n\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        message +\u003d \"Age: \" + profileCard.getAge() + \"\\n\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        message +\u003d \"Likes:\\n\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String[] category \u003d {\"sports\", \"entertainment\", \"arts\", \"lifestyle\"};"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (Boolean setting : profileCard.getPreference()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            message +\u003d (category[i] + \" : \" + setting + \"\\n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 95,
      "hongchuan97": 19,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/Eventable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Interface representing an event list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public interface Eventable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    EventList getEvents();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setEvents(EventList events);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 13
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/Imageable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Interface representing an image."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public interface Imageable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    Image getImage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 7,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/PanelResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.VenueList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Represents the information that is to be displayed in side panel."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class PanelResult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private VenueList venues;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isLock;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isReady;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int field;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public PanelResult() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isReady \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs a PanelResult object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param event The event to be displayed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param venues The venues to be displayed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param isLock Whether an event is locked on."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param index The index of the event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param field The index of the field that is selected."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public PanelResult(Event event, VenueList venues, boolean isLock, int index, int field) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venues \u003d venues;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.isLock \u003d isLock;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.field \u003d field;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isReady \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Checks if the result is ready."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isReady() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isReady;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to get the description of the event."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (event !\u003d null) : \"This method should only be called if its isReady.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return event.getLocation().getAddress();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the start date of the Event."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getStartDate() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return event.getStartDate().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the end date of the Event."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getEndDate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return event.getEndDate().toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the color of the venues."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Paint getVenueColor(int index) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (this.index \u003d\u003d index) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (isLock) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                return Paint.valueOf(\"orange\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return Paint.valueOf(\"green\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return Paint.valueOf(\"blue\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Venue getVenue(int index) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return venues.get(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return venues.size();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the index of the field that is currently selected."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public int getField() throws QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!isLock) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new QueryOutOfBoundsException(\"EVENT FIELD\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return field;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 101
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/Routeable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Interface representing a route."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public interface Routeable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    ArrayList\u003cRouteNode\u003e getRoute();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void setRoute(ArrayList\u003cRouteNode\u003e route);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 11,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/Conversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.InputNotIntException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Abstract class representing an individual Conversation."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public abstract class Conversation {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected String result;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected String prompt;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected int state;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isFinished;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected int attempts;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected static final int ATTEMPTS_LIMIT \u003d 3;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Conversation() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isFinished \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        attempts \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        state \u003d 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public abstract void execute(String input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Builds the result of the conversation string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected abstract void buildResult();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getPrompt() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return prompt;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getResult() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (result !\u003d null) : \"result should not be null\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks if input is int."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The input."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return If the input is int."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected Boolean isIntInput(String input) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserUtil.getIntegerIndexInList(0, 2, input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (InputNotIntException | QueryOutOfBoundsException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_NOT_INT;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks if input is a field of a Route."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The input."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return If the input is a field of a Route."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected boolean isRouteField(String input) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (\"name\".equals(input) || \"description\".equals(input)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_NOT_ROUTE_FIELD;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks if input is a field of a RouteNode."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The input."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return If the input is a field of a RouteNode."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected boolean isRouteNodeField(String input) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (\"address\".equals(input) || \"description\".equals(input) || \"type\".equals(input) || \"latitude\".equals(input)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                || \"longitude\".equals(input)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_NOT_ROUTENODE_FIELD;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks if input is a Constraint enum."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The input."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return If the input is a Constraint."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected boolean isConstraint(String input) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Constraint.valueOf(input.toUpperCase());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.ERROR_CONSTRAINT_UNKNOWN;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks if input is a DateTime."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The input."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return If the input is a DateTime."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected Boolean isDateInput(String input) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserTimeUtil.parseStringToDate(input);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (DukeDateTimeParseException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_NOT_DATE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to cancel the conversation."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The userInput from UI object."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void tryCancelConversation(String userInput) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (attempts \u003e ATTEMPTS_LIMIT || \"cancel\".equals(userInput)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d \"cancel\";"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            isFinished \u003d true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns whether the conversation is finished."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Whether the conversation is finished."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isFinished() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isFinished;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void setFinished(boolean finished) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isFinished \u003d finished;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 99,
      "Jefferson111": 65
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/ConversationManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.RouteManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.ConversationParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.PromptParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Manages two-way communications between SGTravel and the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ConversationManager {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isFinished;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private boolean isInConversation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Conversation conversation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private RouteManager routeManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the ConversationManager object and include the RouteManager."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param routeManager The RouteManager object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ConversationManager(RouteManager routeManager) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isFinished \u003d true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        isInConversation \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.routeManager \u003d routeManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Starts or continues a conversation with Duke."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void converse(String input) throws DukeException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (tryStartConversation(input)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversation.execute(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryEndConversation();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to end a conversation. If the conversation is still ongoing, nothing happens."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void tryEndConversation() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (conversation.isFinished()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            isFinished \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            isInConversation \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to start a conversation. If the conversation is still ongoing, nothing happens."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input The user input from ui."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return true if a conversation is started, false otherwise."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeException If no conversation could be started."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean tryStartConversation(String input) throws DukeException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isFinished) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            startConversation(input);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            isFinished \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            isInConversation \u003d true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a Conversation object based on input."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input The words from user input."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void startConversation(String input) throws DukeException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversation \u003d ConversationParser.parse(input, routeManager);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets a command from the ConversationManager."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return Command for logic to execute."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeException If the result could not be parse by parser."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command getCommand() throws DukeException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isFinished) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return Parser.parseComplexCommand(getResult());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return PromptParser.parseCommand(getPrompt());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the result of the conversation."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return result The String result made from Conversation."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getResult() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String result \u003d conversation.getResult();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        clearContext();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the prompt from Conversation object if applicable."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The prompt."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getPrompt() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (conversation !\u003d null) : \"Conversation should not be null\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return conversation.getPrompt();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Clears the current context of the conversation."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void clearContext() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isFinished \u003d true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversation \u003d null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns whether the current conversation is finished."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Whether the current conversation is finished."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isFinished() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isFinished;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns whether there is an ongoing conversation."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Whether there is an ongoing conversation."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean isInConversation() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return isInConversation;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 30,
      "Jefferson111": 106
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/DeleteConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a delete command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DeleteConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"delete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DeleteConversation() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_DELETE_STARTER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index \u003d input;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (index !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 21,
      "Jefferson111": 23
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/FindConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a find command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class FindConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"find\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FindConversation() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_FIND_STARTER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        keyword \u003d input;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        buildResult();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (keyword !\u003d null) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + keyword;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 18,
      "Jefferson111": 22
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/FindPathConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a findPath command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class FindPathConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"findPath\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String constraint;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String startPointIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String endPointIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FindPathConversation() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_FIND_STARTER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTE_STARTING_POINT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            constraint \u003d input;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            state++;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                startPointIndex \u003d input;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTE_ENDING_POINT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                attempts \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                endPointIndex \u003d input;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                buildResult();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                setFinished(true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ERROR;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (constraint !\u003d null \u0026\u0026 startPointIndex !\u003d null \u0026\u0026 endPointIndex !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + constraint + \" \" + startPointIndex + \" \" + endPointIndex;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 23,
      "Jefferson111": 43
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/FreeTimeConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a findTime command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class FreeTimeConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"findtime\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FreeTimeConversation() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_FREETIME_STARTER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            duration \u003d input;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (duration !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + duration;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 20,
      "Jefferson111": 24
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/GetBusStopConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a busStop command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class GetBusStopConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"busStop\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String busCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public GetBusStopConversation() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_GETBUSROUTE_STARTER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            busCode \u003d input;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (busCode !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + busCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 20,
      "Jefferson111": 24
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/MarkDoneConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a mark done command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class MarkDoneConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"done\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public MarkDoneConversation() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_MARKDONE_STARTER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            index \u003d input;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (index !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 21,
      "Jefferson111": 24
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/RouteAddConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when a RouteAdd command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteAddConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String command \u003d \"routeAdd\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteAddConversation() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTE_ADD_STARTER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTE_ADD_DESCRIPTION;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            name \u003d input;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            state++;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTE_ADD_SUCCESS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            description \u003d input;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ERROR;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d command + \" \" + name + \" desc \" + description;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 56
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/RouteDeleteConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when a RouteDelete command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteDeleteConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String command \u003d \"routeDelete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteDeleteConversation() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTE_DELETE_STARTER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index \u003d input;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTE_DELETE_SUCCESS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (index !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d command + \" \" + index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 48
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/RouteEditConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when a RouteEdit command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteEditConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String command \u003d \"routeEdit\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String field;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String newValue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteEditConversation() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTE_EDIT_STARTER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                index \u003d input;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTE_EDIT_FIELD;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isRouteField(input)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                field \u003d input;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTE_EDIT_FIELD;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTE_EDIT_SUCCESS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            newValue \u003d input;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ERROR;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d command + \" \" + index + \" \" + field + \" \" + newValue;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 67
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/RouteGenerateConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when a RouteGenerate command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteGenerateConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String command \u003d \"routeGenerate\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String startLocation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String endLocation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String constraint;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteGenerateConversation() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTE_GENERATE_STARTER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            startLocation \u003d input;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTE_GENERATE_ENDLOCATION;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            state++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            endLocation \u003d input;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTE_GENERATE_CONSTRAINT;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            state++;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isConstraint(input)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                constraint \u003d input;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTE_GENERATE_SUCCESS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                buildResult();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                setFinished(true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ERROR;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d command + \" \" + startLocation + \" to \" + endLocation + \" by \" + constraint;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 66
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/RouteListConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when a RouteList command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteListConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String command \u003d \"routeList\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteListConversation() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTE_LIST_STARTER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index \u003d input;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (index !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d command + \" \" + index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 47
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/RouteManagerAddConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.RouteManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when an Add command is entered with the RouteManager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteManagerAddConversation extends Conversation {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private boolean isAddAtEnd;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String COMMAND \u003d \"routeNodeAdd\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String routeIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String nodeIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteManagerAddConversation(RouteManager routeManager) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTENODE_ADD_TYPE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (routeManager.getNodeIndex() \u003d\u003d -1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            isAddAtEnd \u003d true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeIndex \u003d String.valueOf(routeManager.getRouteIndex());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            isAddAtEnd \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeIndex \u003d String.valueOf(routeManager.getRouteIndex());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            nodeIndex \u003d String.valueOf(routeManager.getNodeIndex());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isConstraint(input)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                type \u003d input;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_ADD_INPUT;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            address \u003d input;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ERROR;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isAddAtEnd) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d COMMAND + \" \" + routeIndex + \" at \" + address + \" by \" + type;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d COMMAND + \" \" + routeIndex + \" at \" + nodeIndex + \" \" + address + \" by \" + type;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 73
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/RouteManagerEditConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.RouteManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when an Edit command is entered with the RouteManager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteManagerEditConversation extends Conversation {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private boolean isRouteEdit;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String routeIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String nodeIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String field;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String newValue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteManagerEditConversation(RouteManager routeManager) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (routeManager.getNodeIndex() \u003d\u003d -1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            isRouteEdit \u003d true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTE_EDIT_FIELD;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeIndex \u003d String.valueOf(routeManager.getRouteIndex());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command \u003d \"routeEdit\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            isRouteEdit \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTENODE_EDIT_FIELD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeIndex \u003d String.valueOf(routeManager.getRouteIndex());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            nodeIndex \u003d String.valueOf(routeManager.getNodeIndex());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            command \u003d \"routeNodeEdit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isRouteEdit \u0026\u0026 isRouteField(input)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                field \u003d input;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_EDIT_VALUE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else if (!isRouteEdit \u0026\u0026 isRouteNodeField(input)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                field \u003d input;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_EDIT_VALUE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isRouteEdit) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTE_EDIT_SUCCESS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_EDIT_SUCCESS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            newValue \u003d input;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ERROR;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isRouteEdit) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d command + \" \" + routeIndex + \" \" + field + \" \" + newValue;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d command + \" \" + routeIndex + \" \" + nodeIndex + \" \" + field + \" \" + newValue;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 85
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/RouteManagerNodeSelectConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when RouteManager is active, to select the node to use."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteManagerNodeSelectConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String command \u003d \"routeManagerNodeSelect\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteManagerNodeSelectConversation() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTE_SELECTOR_NODESELECT_STARTER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index \u003d input;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d command + \" \" + index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 41
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/RouteManagerRouteSelectConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when RouteManager is active, to select the route to use."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteManagerRouteSelectConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String command \u003d \"routeManagerRouteSelect\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteManagerRouteSelectConversation() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTE_SELECTOR_SELECT_STARTER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index \u003d input;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d command + \" \" + index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 41
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/RouteNodeAddConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when a RouteNodeAddCommand is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeAddConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String command \u003d \"routeNodeAdd\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String routeIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String nodeIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String constraint;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeAddConversation() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTENODE_ADD_STARTER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                routeIndex \u003d input;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_ADD_NODEINDEX;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                nodeIndex \u003d input;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_ADD_TYPE;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isConstraint(input)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                constraint \u003d input;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_ADD_INPUT;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            name \u003d input;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTENODE_ADD_SUCCESS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ERROR;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (!\"0\".equals(nodeIndex)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d command + \" \" + routeIndex + \" \" + nodeIndex + \" at \" + name + \" by \" + constraint;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d command + \" \" + routeIndex + \" at \" + name + \" by \" + constraint;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 79
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/RouteNodeDeleteConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when a RouteNodeDelete command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeDeleteConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String command \u003d \"routeNodeDelete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String routeIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String nodeIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeDeleteConversation() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTENODE_DELETE_STARTER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                routeIndex \u003d input;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_DELETE_NODEINDEX;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                nodeIndex \u003d input;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_DELETE_SUCCESS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                buildResult();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                setFinished(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ERROR;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d command + \" \" + routeIndex + \" \" + nodeIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 60
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/RouteNodeEditConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when a RouteNodeEdit command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeEditConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String command \u003d \"routeNodeEdit\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String routeIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String nodeIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String field;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String newValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeEditConversation() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTENODE_EDIT_STARTER;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                routeIndex \u003d input;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_EDIT_NODEINDEX;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                nodeIndex \u003d input;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_EDIT_FIELD;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isRouteNodeField(input)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                field \u003d input;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_EDIT_VALUE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTENODE_EDIT_SUCCESS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            newValue \u003d input;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ERROR;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d command + \" \" + routeIndex + \" \" + nodeIndex + \" \" + field + \" \" + newValue;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 76
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/RouteNodeListConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles the conversation occurring when a RouteNodeList command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeListConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String command \u003d \"routeNodeList\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String routeIndex;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String nodeIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeListConversation() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_ROUTENODE_SHOW_STARTER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                routeIndex \u003d input;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_SHOW_NODEINDEX;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                nodeIndex \u003d input;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTENODE_SHOW_SUCCESS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                buildResult();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                setFinished(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ERROR;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d command + \" \" + routeIndex + \" \" + nodeIndex;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 60
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/SearchConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a search command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class SearchConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String command \u003d \"search\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises the Conversation object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public SearchConversation() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_SEARCH_STARTER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_SEARCH_SUCCESS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        location \u003d input.replace(\" \", \"+\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        buildResult();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        setFinished(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The result."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (location !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d command + \" \" + location;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 42
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/SetupProfileConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class SetupProfileConversation extends Conversation {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final String COMMAND \u003d \"profile\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String birthday;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public SetupProfileConversation() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        prompt \u003d Messages.PROMPT_SETUP_PROFILE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            prompt \u003d Messages.PROMPT_BIRTHDAY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            name \u003d input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            state++;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (isDateInput(input)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                birthday \u003d input;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                attempts \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                buildResult();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                setFinished(true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ERROR;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (name !\u003d null \u0026\u0026 birthday !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            result \u003d COMMAND + \" \" + name + \" \" + birthday;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 47
    }
  },
  {
    "path": "src/main/java/duke/logic/edits/Editor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.edits;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.EventSelectionOutOfBoundsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.api.ApiParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Editor that edits an Event object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Editor {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int DESCRIPTION \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int START_DATE \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int END_DATE \u003d 2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Edits an Event object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The new information."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param event The Event object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param eventField Integer indicating which field to edit."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws EventSelectionOutOfBoundsException If the eventField does not corresponds to any component of Event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ApiNullRequestException If the location does not exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ApiTimeoutException If the API request time out."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeDateTimeParseException If the date format is invalid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static void edit(String userInput, Event event, int eventField) throws EventSelectionOutOfBoundsException,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            ApiNullRequestException, ApiTimeoutException, DukeDateTimeParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (eventField) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case DESCRIPTION:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            editDescription(userInput, event);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case START_DATE:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            editStartDate(userInput, event);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case END_DATE:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            editEndDate(userInput, event);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new EventSelectionOutOfBoundsException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Edits the description of an Event object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The new description."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param event The Event object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ApiNullRequestException If the user input is not a location."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws ApiTimeoutException If the request time out."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static void editDescription(String userInput, Event event) throws ApiNullRequestException,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            ApiTimeoutException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setLocation(ApiParser.getLocationSearch(userInput));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setDescription(userInput);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Edits the start date of an Event object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The new date."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param event The Event object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeDateTimeParseException If the date format of user input is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static void editStartDate(String userInput, Event event) throws DukeDateTimeParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setStartDate(ParserTimeUtil.parseStringToDate(userInput));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Edits the end date of an Event object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The new date."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param event The Event object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeDateTimeParseException If the date format of user input is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static void editEndDate(String userInput, Event event) throws DukeDateTimeParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setEndDate(ParserTimeUtil.parseStringToDate(userInput));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 78
    }
  },
  {
    "path": "src/main/java/duke/logic/edits/EditorManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.edits;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.EmptyVenueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.EventNotSelectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.PanelResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.EditorParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.PromptParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.selectors.EventFieldSelector;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.selectors.LocationSelector;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.VenueList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Manages editing operations of the EventList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EditorManager {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static LocationSelector eventSelector;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static EventFieldSelector fieldSelector;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static EventList events;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static VenueList venues;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static Event currentEvent;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static int eventField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static boolean isActive \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Activates the EditorManager."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static void activate(EventList events, VenueList venues) throws EmptyVenueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.INFO, \"Activating editor...\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.events \u003d events;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.venues \u003d venues;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        eventSelector \u003d new LocationSelector(venues);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        fieldSelector \u003d new EventFieldSelector();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isActive \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selectEvent();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static void deactivate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isActive \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static boolean isActive() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isActive;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Edits the EventList."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The input string from user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return Command object for logic to execute."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Command edit(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!eventSelector.isLock()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new EventNotSelectedException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (currentEvent !\u003d null) : \"currentEvent must always exist when the lock is on\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        boolean canSave \u003d EditorParser.parse(userInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isActive) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Editor.edit(userInput, currentEvent, eventField);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return PromptParser.parseCommand(\"editing...\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new EditCommand(canSave, events);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Edits the EventList."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static PanelResult edit(KeyCode keyCode) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (keyCode.equals(KeyCode.ESCAPE)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            eventSelector.unlock();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (eventSelector.isLock()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            fieldSelector.feedKeyCode(keyCode);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            selectEventField();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            eventSelector.feedKeyCode(keyCode);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            selectEvent();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new PanelResult(currentEvent, venues, eventSelector.isLock(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                eventSelector.getIndex(), eventField);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static void selectEventField() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        eventField \u003d fieldSelector.getIndex();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static void selectEvent() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentEvent \u003d events.get(eventSelector.getIndex());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 98
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/ConversationParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeUnknownCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.RouteManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.Conversation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.DeleteConversation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.FindConversation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.FindPathConversation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.FreeTimeConversation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.GetBusStopConversation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.MarkDoneConversation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.conversations.RouteAddConversation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.conversations.RouteDeleteConversation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.conversations.RouteEditConversation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.conversations.RouteGenerateConversation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.conversations.RouteListConversation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.conversations.RouteManagerAddConversation;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.conversations.RouteManagerEditConversation;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.conversations.RouteManagerNodeSelectConversation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.conversations.RouteManagerRouteSelectConversation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.conversations.RouteNodeAddConversation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.conversations.RouteNodeDeleteConversation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.conversations.RouteNodeEditConversation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.conversations.RouteNodeListConversation;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.SearchConversation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.conversations.SetupProfileConversation;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Parser for conversations. Selects conversation based on user input."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ConversationParser {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the input and returns a Conversation object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input The user input from Ui."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return A conversation object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeUnknownCommandException If input is undefined."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static Conversation parse(String input, RouteManager routeManager) throws DukeUnknownCommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new MarkDoneConversation();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new DeleteConversation();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"findtime\":"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new FreeTimeConversation();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"busStop\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new GetBusStopConversation();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"findPath\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new FindPathConversation();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new FindConversation();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"search\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new SearchConversation();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"profile\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new SetupProfileConversation();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManageraddRoute\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeAdd\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteAddConversation();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeDelete\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteDeleteConversation();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeEdit\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteEditConversation();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManagergenerate\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeGenerate\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteGenerateConversation();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeList\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteListConversation();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeAdd\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteNodeAddConversation();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeDelete\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteNodeDeleteConversation();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeEdit\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteNodeEditConversation();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeList\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteNodeListConversation();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManagerselect\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteManagerRouteSelectConversation();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManagernode\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteManagerNodeSelectConversation();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManagerNodeedit\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManageredit\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteManagerEditConversation(routeManager);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManageradd\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManagerNodeadd\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteManagerAddConversation(routeManager);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 45,
      "hongchuan97": 3,
      "Jefferson111": 42
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/EditorParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.edits.EditorManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Parser for editing operations."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EditorParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The user input from ui."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return True if the edits can be saved."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static boolean parse(String userInput) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.FINE, \"Editor parsing user input\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (userInput) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"done\": case \"save\": case \"x\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            EditorManager.deactivate();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"close\": case \"end\": case \"X\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            EditorManager.deactivate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 32
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeUnknownCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.commands.AddSampleItineraryCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.EditorCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.commands.ListItineraryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.commands.NewItineraryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.ProfileSetPreferenceCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.ProfileShowCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.QuickEditCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.commands.RouteManagerCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteManagerExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteManagerHelpCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteManagerInfoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.commands.RouteManagerNearbyCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteManagerNodeBackCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteManagerNodeInfoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteManagerNodeNextCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteManagerNodeSelectorCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteManagerReturnCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteManagerSelectorCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteNodeNeighboursCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteNodeShowCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteShowCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.commands.ShowItineraryCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.ViewScheduleCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.AddEventParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.AddProfileParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.DeleteParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.DoneParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.FindParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.FindPathParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.FreeTimeParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.GetBusRouteParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.GetBusStopParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.LocationSearchParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.PromptParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.RecommendationParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.RouteAddParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.RouteDeleteParser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.RouteEditParser;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.RouteListParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.RouteNodeAddParser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.RouteNodeDeleteParser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.RouteNodeEditParser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.RouteNodeListParser;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.commandparser.StaticMapParser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Parser for commands entered by the user. It reads from standard input and returns Command objects."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the userInput and return a Command object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input Input created by the ConversationManager object or user input."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The corresponding Command object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeException If userInput is undefined."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Command parseComplexCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String commandWord \u003d getCommandWord(input);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String inputBody \u003d getWord(input);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"fetch\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new ViewScheduleCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new EditorCommand();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"e\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new QuickEditCommand(ParserUtil.getIntegerIndexInList(0, 4, inputBody),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    ParserUtil.getFieldInList(1, 4, inputBody),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    ParserUtil.getFieldInList(2, 4, inputBody),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    ParserUtil.getFieldInList(3, 4, inputBody));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new DoneParser(inputBody).parse();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new DeleteParser(inputBody).parse();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new FindParser(inputBody).parse();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"findtime\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new FreeTimeParser(inputBody).parse();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"search\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new LocationSearchParser(inputBody).parse();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"busStop\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new GetBusStopParser(inputBody).parse();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"busRoute\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new GetBusRouteParser(inputBody).parse();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new AddEventParser(input).parse();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"findPath\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new FindPathParser(inputBody).parse();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"recommend\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new RecommendationParser(input).parse();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"cancel\":"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new PromptParser().parse();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"map\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new StaticMapParser(inputBody).parse();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeAdd\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new RouteAddParser(inputBody).parse();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeAdd\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new RouteNodeAddParser(inputBody).parse();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeEdit\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new RouteEditParser(inputBody).parse();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeEdit\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new RouteNodeEditParser(inputBody).parse();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeDelete\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new RouteDeleteParser(inputBody).parse();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeDelete\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new RouteNodeDeleteParser(inputBody).parse();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeList\":"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new RouteListParser(inputBody).parse();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeList\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new RouteNodeListParser(inputBody).parse();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeGenerate\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return ParserUtil.createRouteGenerateCommand(inputBody);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeShow\":"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteShowCommand(ParserUtil.getIntegerIndexInList(0, 2, inputBody));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeShow\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteNodeShowCommand(ParserUtil.getIntegerIndexInList(0, 2, inputBody),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    ParserUtil.getIntegerIndexInList(1, 2, inputBody));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNearby\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteNodeNeighboursCommand(ParserUtil.getIntegerIndexInList(0, 2, inputBody),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    ParserUtil.getIntegerIndexInList(1, 2, inputBody));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManager\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteManagerCommand();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManagerRouteSelect\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteManagerSelectorCommand(ParserUtil.getIntegerIndexInList(0, 2, inputBody));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManagerNodeSelect\":"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteManagerNodeSelectorCommand(ParserUtil.getIntegerIndexInList(0, 2, inputBody));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManagerNodereturn\":"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManagerreturn\":"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteManagerReturnCommand();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManagerNodenearby\":"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteManagerNearbyCommand();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManagerinfo\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteManagerInfoCommand();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManagerNodeinfo\":"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteManagerNodeInfoCommand();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManagerNodenext\":"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteManagerNodeNextCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManagerNodeback\":"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteManagerNodeBackCommand();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManagerNodehelp\":"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManagerhelp\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteManagerHelpCommand();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManagerNodeexit\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeManagerexit\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteManagerExitCommand();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"addThisList\":"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            return new AddSampleItineraryCommand();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"newItinerary\":"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            return new NewItineraryCommand(ParserUtil.createNewItinerary(input));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"listItinerary\":"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            return new ListItineraryCommand();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"showItinerary\":"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            return new ShowItineraryCommand(getWord(input));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"profile\":"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new AddProfileParser(inputBody).parse();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"profileShow\":"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new ProfileShowCommand();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"profileSet\":"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new ProfileSetPreferenceCommand(ParserUtil.getFieldInList(0,2,inputBody),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        ParserUtil.getFieldInList(1,2,inputBody));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets command word from the userInput."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The command word."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static String getCommandWord(String userInput) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return userInput.strip().split(\" \")[0];"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets word from the userInput."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The word."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static String getWord(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return userInput.strip().split(\" \", 2)[1];"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return userInput;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 16,
      "Inno97": 62,
      "hongchuan97": 50,
      "Jefferson111": 77
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/ParserStorageUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.enumerations.Direction;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.CategoryNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.profile.ProfileCard;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Parser for Storage related operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ParserStorageUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses a Event from String format back to Event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param line The String description of an Event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The corresponding Event object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Event createTaskFromStorage(String line) throws DukeDateTimeParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String[] eventParts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String type \u003d eventParts[0].strip();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String status \u003d eventParts[1].strip();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String description \u003d eventParts[2].strip();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (\"E\".equals(type)) : \"There should only be events.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(eventParts[3].strip());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(eventParts[4].strip());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Venue location \u003d getLocationFromStorage(eventParts);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event \u003d new Event(description, start, end, location);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setDone(\"true\".equals(status));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses part of a task back to a Location."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static Venue getLocationFromStorage(String[] taskParts) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String address \u003d taskParts[5].strip();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double longitude \u003d Double.parseDouble(taskParts[7].strip());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double latitude \u003d Double.parseDouble(taskParts[6].strip());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double distX \u003d Double.parseDouble(taskParts[7].strip());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double distY \u003d Double.parseDouble(taskParts[8].strip());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new Venue(address, latitude, longitude, distX, distY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses a profile from String format back to profileCard."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param line The String description of an profile."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return The corresponding ProfileCard object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static ProfileCard createProfileFromStorage(ProfileCard profileCard, String line)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            throws DukeDateTimeParseException, CategoryNotFoundException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String[] token \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        switch (token[0].strip()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"person\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            profileCard.setPerson(token[1].strip(), ParserTimeUtil.parseStringToDate(token[2].strip()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"preference\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            String[] category \u003d {\"\", \"sports\", \"entertainment\", \"arts\", \"lifestyle\"};"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            for (int i \u003d 1; i \u003c token.length; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                profileCard.setPreference(category[i], token[i].strip().equals(\"true\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return profileCard;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses an Event from Event to String format."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param event The Event."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The corresponding String format of the task object."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static String toStorageString(Event event) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return \"E | \" + event.isDone() + \" | \" + event.getDescription() + \" | \" + event.getStartDate()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                + \" | \" + event.getEndDate() + \" | \" + event.getLocation();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Parses a route with its nodes from routes to String format."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The route."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return routeString The corresponding String format of the route object."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String toRouteStorageString(Route route) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String routeString \u003d \"\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeString +\u003d \"route | \" + route.getName() + \" | \" + route.getDescription() + \"\\n\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (RouteNode node: route.getNodes()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (node instanceof BusStop) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                routeString +\u003d \"node | BUS | \" + ((BusStop) node).getBusCode() + \" | \" + node.getAddress() + \" | \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        + node.getDescription() + \" | \" + node.getLatitude() + \" | \" + node.getLongitude() + \"\\n\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else if (node instanceof TrainStation) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                routeString +\u003d \"node | MRT | \" + ((TrainStation) node).getTrainCodes() + \" | \" + node.getAddress()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        + \" | \" + node.getDescription() + \" | \" + node.getLatitude() + \" | \" + node.getLongitude()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        + \"\\n\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return routeString;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses a ProfileCard to String format."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param profileCard The profileCard."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return profileString The corresponding String format of the profileCard object."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static String toProfileStorageString(ProfileCard profileCard) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String profileString \u003d \"\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        profileString +\u003d \"person | \" + profileCard.getPersonName() + \" | \" + profileCard.getPersonBirthday() + \"\\n\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        profileString +\u003d \"preference\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (Boolean i : profileCard.getPreference()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            profileString +\u003d \" | \" + i;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        profileString +\u003d \"\\n\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        //profileString +\u003d \"favorite | \" + profileCard.toString()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return profileString;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses a bus stop from String format back to BusStop."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param line The String description of a bus stop."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return The corresponding BusStop object."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static BusStop createBusStopDataFromStorage(String line) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String[] busStopData \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String busCode \u003d busStopData[0].strip();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String description \u003d busStopData[1].strip();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String address \u003d busStopData[2].strip();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double latitude \u003d Double.parseDouble(busStopData[3].strip());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double longitude \u003d Double.parseDouble(busStopData[4].strip());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop busStop \u003d new BusStop(busCode, address, description, latitude, longitude);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (int i \u003d 5; i \u003c busStopData.length; i++) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            busStop.addBuses(busStopData[i].strip());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return busStop;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses a bus from String format back to BusService."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param line The String description of a bus."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return The corresponding BusService object."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static BusService createBusFromStorage(String line) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String[] busData \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Direction direction \u003d Direction.FORWARD;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusService busService \u003d new BusService(busData[0].strip());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (int i \u003d 1; i \u003c busData.length; i++) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            String buffer \u003d busData[i].strip();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (\"change\".equals(buffer)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                direction \u003d Direction.BACKWARD;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            busService.addRoute(buffer, direction);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return busService;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Parses part of a task back to a Location."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static Venue getVenueFromStorage(String line) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String[] taskParts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String address \u003d taskParts[0].strip();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        double longitude \u003d Double.parseDouble(taskParts[1].strip());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        double latitude \u003d Double.parseDouble(taskParts[2].strip());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        double distX \u003d Double.parseDouble(taskParts[3].strip());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        double distY \u003d Double.parseDouble(taskParts[4].strip());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new Venue(address, latitude, longitude, distX, distY);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses a train station from String format back to Train."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param line The String description of a train station."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return The corresponding Train object."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static TrainStation createTrainFromStorage(String line) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String[] trainParts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String address \u003d trainParts[0].strip();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double longitude \u003d Double.parseDouble(trainParts[2].strip());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double latitude \u003d Double.parseDouble(trainParts[1].strip());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cString\u003e trainCode \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (int i \u003d 3; i \u003c trainParts.length; i++) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            trainCode.add(trainParts[i].strip());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new TrainStation(trainCode, null, address, latitude, longitude);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Parses a route from String format back to route."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param line The String description of a route."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The corresponding Route object."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static Route createRouteFromStorage(String line) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String[] details \u003d line.split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new Route(new ArrayList\u003c\u003e(), details[1].strip(), details[2].strip());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Parses a route node from String format back to a route node."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param line The String description of a route node."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The corresponding RouteNode object."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static RouteNode createNodeFromStorage(String line) throws CorruptedFileException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String[] details \u003d line.split(\"\\\\|\", 7);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (details[1].strip()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"BUS\":"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new BusStop(details[2].strip(), details[3].strip(), details[4].strip(),"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    Double.parseDouble(details[5].strip()),  Double.parseDouble(details[6].strip()));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"MRT\":"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new TrainStation(new ArrayList\u003cString\u003e(), details[3].strip(), details[4].strip(),"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    Double.parseDouble(details[5].strip()),  Double.parseDouble(details[6].strip()));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new CorruptedFileException(\"ROUTE.TXT\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns a list of todo\u0027s from a text file."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The List of todo\u0027s."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static List\u003cTodo\u003e getTodoListFromStorage(String line) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cTodo\u003e todoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String[] todoParts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (String todoPart : todoParts) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Todo todo \u003d new Todo(todoPart);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            todoList.add(todo);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return todoList;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static int getNumberFromStorage(String line) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String[] recommendParts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return Integer.parseInt(recommendParts[1]);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 36,
      "Inno97": 57,
      "hongchuan97": 108,
      "Jefferson111": 55
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/ParserTimeUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.enumerations.TimePatternType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parser for Time related operations."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ParserTimeUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a String into a LocalDateTime object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param line The input String for Date extraction."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The date and time, missing information wil be padded with current time information."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeDateTimeParseException If the format is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static LocalDateTime parseStringToDate(String line) throws DukeDateTimeParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] patterns \u003d {\"[\u0027next \u0027][\u0027this \u0027]E\", \"[\u0027this \u0027][\u0027next \u0027]EEEE\", \"dd/MM/yyyy HHmm\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                             \"dd/MM/yy HHmm\", \"HHmm\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                             \"dd/MM/yy\", \"yyyy-MM-dd\u0027T\u0027HH:mm[:ss.n]\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        TimePatternType[] types \u003d {TimePatternType.DAY_OF_WEEK, TimePatternType.DAY_OF_WEEK,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TimePatternType.DATE_TIME, TimePatternType.DATE_TIME, TimePatternType.TIME, TimePatternType.DATE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            TimePatternType.DATE_TIME};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c patterns.length;) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                TemporalAccessor accessor \u003d DateTimeFormatter.ofPattern(patterns[i]).parse(line);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                switch (types[i]) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                case DAY_OF_WEEK:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalDateTime localDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    return localDateTime.with(TemporalAdjusters.nextOrSame(DayOfWeek.from(accessor)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                case DATE_TIME:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    return LocalDateTime.from(accessor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                case TIME:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    return localDate.atTime(LocalTime.from(accessor));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                case DATE:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalTime localTime \u003d LocalTime.now();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    return localTime.atDate(LocalDate.from(accessor));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                ++i;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new DukeDateTimeParseException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 1,
      "-": 51,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeEmptyFieldException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeUnknownCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.InputNotIntException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.ItineraryEmptyTodoException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.ItineraryFailCreationException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.ItineraryIncorrectCommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ObjectCreationFailedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.UnknownConstraintException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.api.ApiParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.commands.RouteAddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteGenerateCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteNodeAddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.lists.AgendaList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Agenda;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Todo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines parsing methods for utility functions."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the userInput and return a new to-do constructed from it."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The new to-do object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected static Todo createTodo(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String description \u003d userInput.substring(\"todo\".length()).strip();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new Todo(description);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the userInput and return a new Event constructed from it."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The new Event object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected static Event createEvent(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String[] withinDetails \u003d userInput.substring(\"event\".length()).strip().split(\"between| and\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (withinDetails.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (withinDetails.length !\u003d 3 || withinDetails[1] \u003d\u003d null || withinDetails[2] \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (withinDetails[0].strip().isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(Messages.ERROR_DESCRIPTION_EMPTY);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(withinDetails[1].strip());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(withinDetails[2].strip());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new Event(withinDetails[0].strip(), start, end);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected static RouteNode createRouteNode(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String[] withinDetails \u003d userInput.strip().split(\"at | with \", 2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (withinDetails.length !\u003d 2) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new DukeException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String[] indexes \u003d withinDetails[0].split(\" \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String type \u003d userInput.substring(withinDetails[0].length()).strip().substring(0, 4);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (!(\"with\".equals(type) || \"at\".equals(type.substring(0, 2)))) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new DukeException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String[] details;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (type.substring(0, 2).equals(\"at\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                details \u003d withinDetails[1].strip().split(\"by \");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                switch (details[1].toUpperCase()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                case \"BUS\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    return new BusStop(details[0].strip(), null, null, 0, 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                case \"MRT\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    return new TrainStation(new ArrayList\u003c\u003e(), details[0].strip(), null, 0, 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    throw new DukeException(Messages.ERROR_COMMAND_UNKNOWN);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                details \u003d withinDetails[1].split(\"by \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                String[] coordinateStrings \u003d details[0].strip().split(\" \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                assert (coordinateStrings.length \u003d\u003d 2);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                double[] coordinates \u003d new double[2];"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                for (int i \u003d 0; i \u003c coordinates.length; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    coordinates[i] \u003d Double.parseDouble(coordinateStrings[i].strip());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new ObjectCreationFailedException(\"ROUTE_NODE\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new ObjectCreationFailedException(\"ROUTE_NODE\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Parses the userInput and return a new Itinerary constructed from it."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return The new Itinerary object."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    protected static Itinerary createRecommendation(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String[] itineraryDetails \u003d userInput.substring(\"recommend\".length()).strip().split(\"between| and\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (itineraryDetails.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (itineraryDetails.length !\u003d 3 || itineraryDetails[1] \u003d\u003d null || itineraryDetails[2] \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (itineraryDetails[0].strip().isEmpty()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(Messages.ERROR_DESCRIPTION_EMPTY);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(itineraryDetails[1].strip());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(itineraryDetails[2].strip());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Venue hotelLocation \u003d ApiParser.getLocationSearch(itineraryDetails[0].strip());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.FINE, hotelLocation.getAddress());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new Itinerary(start, end, hotelLocation, \"New Recommendation\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteAddCommand from input."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The userInput read by the user interface."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return RouteAddCommand The RouteAddCommand."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static RouteAddCommand createRouteAddCommand(String input) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String[] details \u003d input.split(\"desc\", 2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (details.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteAddCommand(details[0], details[1]);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteAddCommand(details[0], \"\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteNodeAddCommand from input, factoring for empty indexNode field."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The userInput read by the user interface."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return RouteNodeAddCommand The command."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static RouteNodeAddCommand createRouteNodeAddCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteNodeAddCommand(ParserUtil.createRouteNode(input),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    ParserUtil.getIntegerIndexInList(0, 4, input), ParserUtil.getIntegerIndexInList(1, 4, input),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    false);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (InputNotIntException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteNodeAddCommand(ParserUtil.createRouteNode(input),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    ParserUtil.getIntegerIndexInList(0, 4, input),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    0, true);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteGenerateCommand from input, factoring for invalid or empty fields."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The userInput read by the user interface."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The RouteGenerateCommand."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws DukeEmptyFieldException If there is an empty field."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws UnknownConstraintException If the constraint is unknown."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static RouteGenerateCommand createRouteGenerateCommand(String input) throws DukeEmptyFieldException,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            UnknownConstraintException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String[] details \u003d input.split(\" to | by \", 3);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (details.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return new RouteGenerateCommand(details[0], details[1], Constraint.valueOf(details[2].toUpperCase()));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new UnknownConstraintException();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new DukeEmptyFieldException(Messages.ERROR_FIELDS_EMPTY);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the field at index in a String list delimited by whitespace."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of field."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param listSize The total size of String list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The field."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String getFieldInList(int index, int listSize, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String[] fields \u003d userInput.split(\" \", listSize);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (index \u003e\u003d 0 \u0026\u0026 index \u003c listSize) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return fields[index].strip();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(String.valueOf(index));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new DukeException(Messages.ERROR_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the integer at index in a String list delimited by whitespace."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of field."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param listSize The total size of String list."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The integer."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static int getIntegerInList(int index, int listSize, String userInput) throws InputNotIntException,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String[] fields \u003d userInput.split(\" \", listSize);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (index \u003e\u003d 0 \u0026\u0026 index \u003c listSize) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return Integer.parseInt(fields[index].strip());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new InputNotIntException();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(String.valueOf(index));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new QueryOutOfBoundsException(\"INTEGER\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the integer index at index in a String list delimited by whitespace."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of field."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param listSize The total size of String list."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The integer."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static int getIntegerIndexInList(int index, int listSize, String userInput) throws InputNotIntException,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String[] fields \u003d userInput.split(\" \", listSize);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (index \u003e\u003d 0 \u0026\u0026 index \u003c listSize) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return Integer.parseInt(fields[index].strip()) - 1;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new InputNotIntException();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(String.valueOf(index));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new QueryOutOfBoundsException(\"INTEGER\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Gets the integer index at index in a String list delimited by whitespace."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param userInput The users entered command which contains details of the Itinerary."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return The Itinerary object created."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static Itinerary createNewItinerary(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String[] itineraryDetails \u003d userInput.substring(\"newItinerary\".length()).strip().split(\" \");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(itineraryDetails[0].strip());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(itineraryDetails[1].strip());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Venue hotelLocation \u003d ApiParser.getLocationSearch(itineraryDetails[2].strip());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String name \u003d itineraryDetails[3].strip();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Itinerary itinerary \u003d new Itinerary(start, end, hotelLocation, name);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        AgendaList agendaList \u003d new AgendaList();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        int i \u003d 4;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            while (i \u003c itineraryDetails.length) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                List\u003cVenue\u003e venueList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                List\u003cTodo\u003e todoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                final int number \u003d Integer.parseInt(itineraryDetails[i++]);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                while (itineraryDetails[i].equals(\"/venue\")) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    venueList.add(ApiParser.getLocationSearch(itineraryDetails[i++]));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    StringBuilder todos \u003d new StringBuilder();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    if (i \u003d\u003d itineraryDetails.length - 1 || itineraryDetails[i].matches(\"-?\\\\d+\")) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        throw new ItineraryEmptyTodoException();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    todos.append(itineraryDetails[++i]).append(\"|\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    while (itineraryDetails[i].equals(\"/and\")) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        i++;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        todos.append(itineraryDetails[i++]).append(\"|\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        if (i \u003e\u003d itineraryDetails.length) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    todoList \u003d ParserStorageUtil.getTodoListFromStorage(todos.toString());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    if (i \u003e\u003d itineraryDetails.length) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                Agenda agenda \u003d new Agenda(todoList, venueList, number);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                agendaList.add(agenda);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new ItineraryFailCreationException();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new ItineraryIncorrectCommandException();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        itinerary.setTasks(agendaList);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return itinerary;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 101,
      "Inno97": 180,
      "Jefferson111": 41
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/PromptParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.PromptCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Parser for a prompt command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class PromptParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Command parseCommand(String prompt) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new PromptCommand(prompt);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 13
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/AddEventParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeUnknownCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for AddCommand."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class AddEventParser extends CommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public AddEventParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        event \u003d createEvent(input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses the userInput and return a new Event constructed from it."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return The new Event object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static Event createEvent(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String[] withinDetails \u003d userInput.substring(\"event\".length()).strip().split(\"between| and\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (withinDetails.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (withinDetails.length !\u003d 3 || withinDetails[1] \u003d\u003d null || withinDetails[2] \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            throw new DukeException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (withinDetails[0].strip().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            throw new DukeException(Messages.ERROR_DESCRIPTION_EMPTY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(withinDetails[1].strip());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(withinDetails[2].strip());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new Event(withinDetails[0].strip(), start, end);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs AddCommand object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return AddCommand object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new AddCommand(event);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 57
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/AddProfileParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.AddProfileCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for AddProfileCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class AddProfileParser extends CommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private LocalDateTime birthday;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into name and birthday."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public AddProfileParser(String input) throws DukeDateTimeParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String[] token \u003d input.split(\" \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.name \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (int i \u003d 0; i \u003c token.length - 1; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.name +\u003d token[i] + \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.birthday \u003d ParserTimeUtil.parseStringToDate(token[token.length - 1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs AddProfile object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return AddProfile object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new AddProfileCommand(name, birthday);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 40
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/CommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public abstract class CommandParser\u003cT\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    protected static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public abstract T parse() throws DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Gets the field at a given index in a String, delimited by whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param index The index of the field."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return The field."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    protected String getEventIndexInList(int index, String userInput) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return userInput.strip().split(\" \", 4)[2];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return userInput.strip().split(\" \", 4)[3];"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 26
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/DeleteParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for DeleteCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class DeleteParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public DeleteParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        index \u003d ParserUtil.getIntegerIndexInList(0, 1, input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs DeleteCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return DeleteCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new DeleteCommand(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 30
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/DoneParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.MarkDoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for DoneCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class DoneParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public DoneParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        index \u003d ParserUtil.getIntegerIndexInList(0, 1, input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs DoneCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return DoneCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new MarkDoneCommand(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 30
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/FindParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for FindCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class FindParser extends CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into keyword."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public FindParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        keyword \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs FindCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return FindCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new FindCommand(keyword);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 28
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/FindPathParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.FindPathCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for FindPathCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class FindPathParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String constraint;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private int startEventIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private int endEventIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into parameter for FindPathCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public FindPathParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        constraint \u003d ParserUtil.getFieldInList(0, 3, input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        startEventIndex \u003d ParserUtil.getIntegerIndexInList(1, 3, input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        endEventIndex \u003d ParserUtil.getIntegerIndexInList(2, 3, input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs FindPathCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return FindPathCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new FindPathCommand(constraint, startEventIndex, endEventIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 34
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/FreeTimeParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.FreeTimeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for FreeTimeCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class FreeTimeParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public FreeTimeParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        index \u003d ParserUtil.getIntegerIndexInList(0, 1, input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs FreeTimeCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return FreeTimeCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new FreeTimeCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 31
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/GetBusRouteParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.GetBusRouteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for GetBusRouteCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class GetBusRouteParser extends CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String busServiceNo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into busServiceNo."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public GetBusRouteParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        busServiceNo \u003d input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs GetBusRouteCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return GetBusRouteCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new GetBusRouteCommand(busServiceNo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 29
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/GetBusStopParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.GetBusStopCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for GetBusStopCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class GetBusStopParser extends CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String busStopNo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into busStopNo."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public GetBusStopParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        busStopNo \u003d input;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs GetBusStopCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return GetBusStopCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new GetBusStopCommand(busStopNo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 29
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/LocationSearchParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.LocationSearchCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for LocationSearchCommand."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class LocationSearchParser extends CommandParser\u003cLocationSearchCommand\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into location."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public LocationSearchParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        location \u003d input;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs LocationSearchCommand object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return LocationSearchCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public LocationSearchCommand parse() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new LocationSearchCommand(location);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 28
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/PromptParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.PromptCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Constructs PromptCommand object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class PromptParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs PromptCommand with cancel message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return PromptCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new PromptCommand(Messages.PROMPT_CANCEL);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 22
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/RecommendationParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeUnknownCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.api.ApiParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.RecommendationsCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RecommendationsCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RecommendationParser extends CommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private Itinerary recommendation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into recommendation."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public RecommendationParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        recommendation \u003d createRecommendation(input);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses the userInput and return a new Itinerary constructed from it."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return The new Itinerary object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Itinerary createRecommendation(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String[] itineraryDetails \u003d userInput.substring(\"recommend\".length()).strip().split(\"between| and\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (itineraryDetails.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (itineraryDetails.length !\u003d 3 || itineraryDetails[1] \u003d\u003d null || itineraryDetails[2] \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            throw new DukeException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (itineraryDetails[0].strip().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            throw new DukeException(Messages.ERROR_DESCRIPTION_EMPTY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(itineraryDetails[1].strip());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(itineraryDetails[2].strip());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Venue hotelLocation \u003d ApiParser.getLocationSearch(itineraryDetails[0].strip());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        logger.log(Level.FINE, hotelLocation.getAddress());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new Itinerary(start, end, hotelLocation, \"New Recommendation\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs RecommendationsCommand object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return RecommendationsCommand object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new RecommendationsCommand(recommendation);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "hongchuan97": 64
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/RouteAddParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.RouteAddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RouteAddCommand."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RouteAddParser extends CommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String[] details;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into route."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public RouteAddParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        details \u003d input.split(\"desc\", 2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs RecommendationsCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return RecommendationsCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (details.length \u003d\u003d 2) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new RouteAddCommand(details[0], details[1]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new RouteAddCommand(details[0], \"\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 33
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/RouteDeleteParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.RouteDeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RouteDeleteCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RouteDeleteParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into route."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public RouteDeleteParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.index \u003d ParserUtil.getIntegerIndexInList(0, 1, input);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs RouteDeleteCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return RouteDeleteCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new RouteDeleteCommand(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 30
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/RouteEditParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.RouteEditCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RouteEditCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RouteEditParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private int firstIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String firstEventIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String secondEventIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into parameter for RouteEditCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public RouteEditParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.firstIndex \u003d ParserUtil.getIntegerIndexInList(0, 3, input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.firstEventIndex \u003d ParserUtil.getFieldInList(1, 3, input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.secondEventIndex \u003d ParserUtil.getFieldInList(2, 3, input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs RouteEditCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return RouteEditCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new RouteEditCommand(firstIndex, firstEventIndex, secondEventIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 34
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/RouteListParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.RouteListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RouteListCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RouteListParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into index."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public RouteListParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        index \u003d ParserUtil.getIntegerIndexInList(0, 1, input);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs RouteListCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return RouteListCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new RouteListCommand(index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 31
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/RouteNodeAddParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.InputNotIntException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.ObjectCreationFailedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.RouteNodeAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RouteNodeAddCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RouteNodeAddParser extends CommandParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private RouteNode routeNode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private int firstIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into parameter for RouteNodeAddCommand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public RouteNodeAddParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.input \u003d input;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        routeNode \u003d createRouteNode(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        firstIndex \u003d ParserUtil.getIntegerIndexInList(0, 4, input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Returns routeNode base on user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static RouteNode createRouteNode(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            String[] withinDetails \u003d userInput.strip().split(\"at | with \", 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (withinDetails.length !\u003d 2) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                throw new DukeException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            String[] indexes \u003d withinDetails[0].split(\" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            String type \u003d userInput.substring(withinDetails[0].length()).strip().substring(0, 4);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (!(\"with\".equals(type) || \"at\".equals(type.substring(0, 2)))) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                throw new DukeException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            String[] details;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (type.substring(0, 2).equals(\"at\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                details \u003d withinDetails[1].strip().split(\"by \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                switch (details[1].toUpperCase()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                case \"BUS\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    return new BusStop(details[0].strip(), null, null, 0, 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                case \"MRT\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    return new TrainStation(new ArrayList\u003c\u003e(), details[0].strip(), null, 0, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    throw new DukeException(Messages.ERROR_COMMAND_UNKNOWN);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                details \u003d withinDetails[1].split(\"by \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                String[] coordinateStrings \u003d details[0].strip().split(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                assert (coordinateStrings.length \u003d\u003d 2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                double[] coordinates \u003d new double[2];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                for (int i \u003d 0; i \u003c coordinates.length; i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    coordinates[i] \u003d Double.parseDouble(coordinateStrings[i].strip());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            throw new ObjectCreationFailedException(\"ROUTE_NODE\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        throw new ObjectCreationFailedException(\"ROUTE_NODE\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Creates a new RouteNodeAddCommand from input, factoring for empty indexNode field."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return RouteNodeAddCommand The command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() throws DukeException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new RouteNodeAddCommand(routeNode, firstIndex,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    ParserUtil.getIntegerIndexInList(1, 4, input), false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } catch (InputNotIntException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return new RouteNodeAddCommand(routeNode, firstIndex, 0, true);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 93
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/RouteNodeDeleteParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.RouteNodeDeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RouteNodeDeleteCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RouteNodeDeleteParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private int firstIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private int secondIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into parameter for RouteNodeDeleteCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public RouteNodeDeleteParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        firstIndex \u003d ParserUtil.getIntegerIndexInList(0, 2, input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        secondIndex \u003d ParserUtil.getIntegerIndexInList(1, 2, input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs RouteNodeDeleteCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return RouteNodeDeleteCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new RouteNodeDeleteCommand(firstIndex, secondIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 33
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/RouteNodeEditParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.RouteNodeEditCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RouteNodeEditCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RouteNodeEditParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private final int firstIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private final int secondIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private final String thirdFieldInList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private final String fourthFieldInList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into parameter for RouteNodeEditCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public RouteNodeEditParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        firstIndex \u003d ParserUtil.getIntegerIndexInList(0, 3, input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        secondIndex \u003d ParserUtil.getIntegerIndexInList(1, 3, input);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        thirdFieldInList \u003d ParserUtil.getFieldInList(2, 4, input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        fourthFieldInList \u003d ParserUtil.getFieldInList(3, 4, input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs RouteNodeEditCommand object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return RouteNodeEditCommand object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new RouteNodeEditCommand(firstIndex, secondIndex, thirdFieldInList, fourthFieldInList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 36
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/RouteNodeListParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.RouteNodeListCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for RouteNodeListCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class RouteNodeListParser extends CommandParser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private int firstIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private int secondIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into parameter for RouteNodeListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public RouteNodeListParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        firstIndex \u003d ParserUtil.getIntegerIndexInList(0, 2, input);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        secondIndex \u003d ParserUtil.getIntegerIndexInList(1, 2, input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs RouteNodeListCommand object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return RouteNodeListCommand object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new RouteNodeListCommand(firstIndex, secondIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 33
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/commandparser/StaticMapParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic.parsers.commandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.ApiFailedRequestException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.commands.StaticMapCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " * Parses the user inputs into suitable format for StaticMapCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class StaticMapParser extends CommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses user input into location."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param input The User input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public StaticMapParser(String input) throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.location \u003d input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs StaticMapCommand object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return StaticMapCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Command parse() throws ApiFailedRequestException, ApiTimeoutException, ApiNullRequestException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return new StaticMapCommand(location);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 32
    }
  },
  {
    "path": "src/main/java/duke/logic/selectors/EventFieldSelector.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EventFieldSelector implements Selector {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int FIELD_SIZE \u003d 3;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int index \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void feedKeyCode(KeyCode keyCode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (keyCode.equals(KeyCode.DOWN)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (keyCode.equals(KeyCode.UP)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            index--;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            index +\u003d FIELD_SIZE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        index %\u003d FIELD_SIZE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 24
    }
  },
  {
    "path": "src/main/java/duke/logic/selectors/LocationHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Helper class to check the relationship between 2 Venues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LocationHelper {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Checks if the one venue is above/below/left/right of another venue."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param keyCode The keyCode to decide up/down/left/right."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param currentVenue The current venue."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param v The other venue."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return true if v is indeed above/below/left/right of currentVenue."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static boolean checkDirection(KeyCode keyCode, Venue currentVenue, Venue v) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (keyCode.equals(KeyCode.UP)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return isUp(currentVenue, v);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (keyCode.equals(KeyCode.DOWN)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return isDown(currentVenue, v);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (keyCode.equals(KeyCode.LEFT)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return isLeft(currentVenue, v);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return isRight(currentVenue, v);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static boolean isRight(Venue currentVenue, Venue v) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return v.getLongitude() \u003e\u003d currentVenue.getLongitude();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static boolean isLeft(Venue currentVenue, Venue v) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return v.getLongitude() \u003c\u003d currentVenue.getLongitude();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static boolean isDown(Venue currentVenue, Venue v) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return v.getLatitude() \u003c\u003d currentVenue.getLatitude();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Checks if v is above currentVenue."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static boolean isUp(Venue currentVenue, Venue v) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return v.getLatitude() \u003e\u003d currentVenue.getLatitude();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 48
    }
  },
  {
    "path": "src/main/java/duke/logic/selectors/LocationSelector.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.EmptyVenueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.VenueList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Iterates through locations using proximity of Venue via arrow keys."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LocationSelector implements Selector {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private VenueList venues;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isLock;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs a new Location Selector object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param venues The venues to be iterated through."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws EmptyVenueException If there is no venues in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public LocationSelector(VenueList venues) throws EmptyVenueException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (venues.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new EmptyVenueException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venues \u003d venues;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        index \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isLock \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Feeds key event to location selector to determine the next location selected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param keyCode The keyCode of the key pressed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void feedKeyCode(KeyCode keyCode) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isLock) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (keyCode.equals(KeyCode.ENTER)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            lock();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (keyCode.isArrowKey()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            index \u003d find(keyCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Finds the next nearest Venue given the KeyCode."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param keyCode KeyCode indicating up/down/left/right."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The index of the nearest Venue in the given keycode direction."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int find(KeyCode keyCode) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Venue currentVenue \u003d venues.get(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double min \u003d Double.POSITIVE_INFINITY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int nextIndex \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (int i \u003d 0; i \u003c venues.size(); ++i) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (i \u003d\u003d index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Venue v \u003d venues.get(i);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (LocationHelper.checkDirection(keyCode, currentVenue, v)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u0026\u0026 v.getDistance(currentVenue) \u003c min) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                nextIndex \u003d i;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                min \u003d v.getDistance(currentVenue);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return nextIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Locks the Location Selector."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void lock() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isLock \u003d true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Unlocks the Location Selector."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void unlock() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isLock \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isLock() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isLock;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 94
    }
  },
  {
    "path": "src/main/java/duke/logic/selectors/Selector.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * The API of selectors."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public interface Selector {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    int getIndex();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void feedKeyCode(KeyCode keyCode);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 12
    }
  },
  {
    "path": "src/main/java/duke/model/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.api.ApiParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents an event occurring at a particular venue between a certain time."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Event extends TaskWithDates implements Serializable {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Initializes a event task with location."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param locationDescription A description of this task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param startDate Starting date of task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param endDate Ending date of task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Event(String locationDescription, LocalDateTime startDate, LocalDateTime endDate) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(locationDescription, startDate, endDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venue \u003d ApiParser.getLocationSearch(locationDescription);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Initializes a event task from persistent storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param locationDescription A description of this task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param startDate Starting date of task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param endDate Ending date of task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param venue location of the holiday object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Event(String locationDescription, LocalDateTime startDate, LocalDateTime endDate, Venue venue) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(locationDescription, startDate, endDate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return \"[E]\" + super.toString() + \" between \" + super.getStartDate() + \" and \" + super.getEndDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the Venue of the event."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Venue getLocation() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (venue !\u003d null) : \"Event can only be created with a venue\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setLocation(Venue venue) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 otherTask instanceof Event"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 ((TaskWithDates) otherTask).getStartDate().isEqual(getStartDate())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 ((TaskWithDates) otherTask).getEndDate().isEqual(getEndDate())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 ((Event) otherTask).getLocation().equals(getLocation());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 4,
      "hongchuan97": 2,
      "Jefferson111": 65
    }
  },
  {
    "path": "src/main/java/duke/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.TransportationMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.RouteDuplicateException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.RouteManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.VenueList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Agenda;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.profile.ProfileCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Interface which grants other components access to information from persistent storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the list of events."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    EventList getEvents();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Replaces the events of this model with the new one."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param events The new events."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setEvents(EventList events);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns map object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    TransportationMap getMap();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the list of events that is sorted chronologically."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    EventList getSortedList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the map of all bus stops."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    HashMap\u003cString, BusStop\u003e getBusStops();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the list of all bus routes."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    List\u003cBusService\u003e getBusService();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the list of all attractions."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param numberOfDays Number of days."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param itinerary The itinerary to store in persistent storage."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return List of Days."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws DukeException If number of days exceeds 7."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    List\u003cAgenda\u003e getRecommendations(int numberOfDays, Itinerary itinerary) throws DukeException;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the list of Routes."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    RouteList getRoutes();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a route to the list of routes."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The route to add."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void addRoute(Route route) throws RouteDuplicateException;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Saves the Model data in storage."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws CorruptedFileException If the file is corrupted."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void save() throws CorruptedFileException, FileNotSavedException;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns a list of event venues."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    VenueList getEventVenues();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void saveItinerary(Itinerary itinerary) throws FileNotSavedException, DukeException;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void itineraryListSave(Itinerary itinerary) throws FileNotSavedException, FileNotFoundException;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    String listItineraries() throws FileLoadFailException;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    Itinerary getItinerary(String number) throws DukeException, FileNotFoundException;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    Itinerary readRecommendations() throws FileLoadFailException, DukeDateTimeParseException;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the Route Manager."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    RouteManager getRouteManager();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Returns profile of user."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    ProfileCard getProfileCard();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Returns whether if the user is a new user."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    boolean isNewUser();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Returns name of the user."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    String getName();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 19,
      "Inno97": 43,
      "hongchuan97": 22,
      "Jefferson111": 41
    }
  },
  {
    "path": "src/main/java/duke/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.ItineraryInsufficientAgendasException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.TransportationMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.RouteDuplicateException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.RouteManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.VenueList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Agenda;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.profile.ProfileCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Implements the methods defined in the Model Interface."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private RouteList routes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private TransportationMap map;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ProfileCard profileCard;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private RouteManager routeManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs a new ModelManager object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events \u003d storage.getEvents();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        map \u003d storage.getMap();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routes \u003d storage.getRoutes();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeManager \u003d new RouteManager(routes);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        profileCard \u003d storage.getProfileCard();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return profileCard.getPersonName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public TransportationMap getMap() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventList getEvents() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setEvents(EventList events) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteList getRoutes() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return routes;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventList getSortedList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return events.getSortedList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public HashMap\u003cString, BusStop\u003e getBusStops() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return map.getBusStopMap();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public List\u003cBusService\u003e getBusService() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cAgenda\u003e getRecommendations(int numDays, Itinerary itinerary) throws DukeException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cAgenda\u003e recommendations \u003d storage.readVenues(numDays);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        itinerary.setTasks(recommendations);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        storage.writeItineraries(itinerary, 2);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return recommendations;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public VenueList getEventVenues() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new VenueList(events);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ProfileCard getProfileCard() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return profileCard;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteManager getRouteManager() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return routeManager;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Save a newly created Itinerary to storage."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param itinerary The itinerary to be stored."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void saveItinerary(Itinerary itinerary)  throws FileNotSavedException,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            ItineraryInsufficientAgendasException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        storage.writeItineraries(itinerary, 1);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Save the newly created itinerary to the Itinerary Lists table of contents."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param itinerary The itinerary to be stored."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void itineraryListSave(Itinerary itinerary) throws FileNotSavedException, FileNotFoundException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        storage.writeItinerarySave(itinerary);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Shows the Stored Itineraries Table of Contents."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public String listItineraries() throws FileLoadFailException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return storage.readItineraryList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Shows the Itinerary specified by a give serial number."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param number The serial number of the Itinerary."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Itinerary getItinerary(String number) throws DukeException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return storage.getItinerary(number);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Itinerary readRecommendations() throws FileLoadFailException, DukeDateTimeParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return storage.readRecommendations();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a route to the list of routes."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The route to add."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void addRoute(Route route) throws RouteDuplicateException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routes.add(route);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Saves the file to local storage."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void save() throws FileNotSavedException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        storage.write();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public boolean isNewUser() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return storage.getIsNewUser();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 58,
      "Inno97": 48,
      "hongchuan97": 26,
      "Jefferson111": 49
    }
  },
  {
    "path": "src/main/java/duke/model/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a generic task, which can be marked as done."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Task implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a task not yet done with the given description."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description A description of this task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Sets the description of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param description The new description."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the description associated with this task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This task\u0027s description."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the status of the task, true/false."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True/false."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets this task as done or undone."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both tasks are the same."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string representation of this task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The desired string representation."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"[✓] \" : \"[✘] \") + description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 2,
      "-": 63,
      "Jefferson111": 13
    }
  },
  {
    "path": "src/main/java/duke/model/TaskWithDates.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents Tasks with a date field."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class TaskWithDates extends Task implements Serializable {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private LocalDateTime startDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private LocalDateTime endDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs a TaskWithDates object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param startDate The start date of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param endDate The end date of the task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected TaskWithDates(String description, LocalDateTime startDate, LocalDateTime endDate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setStartDate(LocalDateTime startDate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public LocalDateTime getEndDate() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setEndDate(LocalDateTime endDate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 otherTask instanceof TaskWithDates"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 ((TaskWithDates) otherTask).getStartDate().isEqual(getStartDate())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 ((TaskWithDates) otherTask).getEndDate().isEqual(getEndDate());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 2,
      "Jefferson111": 53
    }
  },
  {
    "path": "src/main/java/duke/model/lists/AgendaList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.model.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Agenda;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a list of Agendas (Things to do in a day) and contains its related accessor methods."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class AgendaList implements Iterable\u003cAgenda\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private List\u003cAgenda\u003e list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public AgendaList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cAgenda\u003e getList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Adds a Day to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * The Task must not already exist in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void add(Agenda toAdd) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //            throw new DukeDuplicateTaskException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //        } else if (hasAnomaly(toAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //            throw new DukeException(Messages.ANOMALY_FOUND);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        list.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Replaces the Day {@code target} in the list with {@code editedDay}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setTask(Agenda target, Agenda editedAgenda) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        int index \u003d list.indexOf(target);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //            throw new DukeTaskNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //            throw new DukeDuplicateTaskException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        list.set(index, editedAgenda);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Removes the equivalent Task from the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * The Day must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void remove(Agenda toRemove) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        list.remove(toRemove);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setTasks(AgendaList replacement) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        list \u003d replacement.list;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Replaces the contents of this list with {@code Days}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * {@code Tasks} must not contain duplicate Tasks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setTasks(List\u003cAgenda\u003e agenda) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        list \u003d agenda;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Iterator\u003cAgenda\u003e iterator() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return list.listIterator();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 83,
      "Inno97": 1
    }
  },
  {
    "path": "src/main/java/duke/model/lists/EventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.model.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDuplicateTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.TaskWithDates;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a list of Events and contains its related accessor methods."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EventList implements Iterable\u003cEvent\u003e, Listable\u003cEvent\u003e, Serializable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private List\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public EventList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void add(Event e) throws DukeDuplicateTaskException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (contains(e)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeDuplicateTaskException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return events.isEmpty();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return events.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return events.size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Event get(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return events.get(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.sort(Comparator.comparing(TaskWithDates::getStartDate)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                .thenComparing(TaskWithDates::getEndDate));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns a shallow copy of the sorted EventList."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventList getSortedList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new EventList(events.stream().sorted("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                Comparator.comparing(TaskWithDates::getStartDate)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        .thenComparing(TaskWithDates::getEndDate)).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return events.iterator();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Replaces the contents of this list with {@code Events}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * {@code Events} must not contain duplicate Events."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) throws DukeDuplicateTaskException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeDuplicateTaskException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns true if {@code Events} contains only unique Events."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (events.get(i).isSameTask(events.get(j))) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Event remove(int index) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return events.remove(index);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 5,
      "Inno97": 46,
      "Jefferson111": 52
    }
  },
  {
    "path": "src/main/java/duke/model/lists/Listable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.model.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Interface - Models a List of planning objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "interface Listable\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void add(T item) throws DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    boolean isEmpty();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    boolean contains(T item);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    int size();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    T get(int index);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 15
    }
  },
  {
    "path": "src/main/java/duke/model/lists/RouteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.model.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeRouteNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.RouteDuplicateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.RouteNodeDuplicateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Manages and handles Route manipulation."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteList implements Iterable\u003cRoute\u003e, Listable\u003cRoute\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private List\u003cRoute\u003e list;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a RouteList object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteList() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Route get(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public List\u003cRoute\u003e getRoutes() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the size of the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Size of list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns true if the list contains an equivalent Route as the given argument."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean contains(Route toCheck) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.stream().anyMatch(toCheck::isSameRoute);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a unique Route to the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param toAdd the Route to add."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception RouteNodeDuplicateException If there is a duplicate route."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void add(Route toAdd) throws RouteDuplicateException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new RouteDuplicateException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list.add(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Replaces an existing Route with a new different Route."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param target The existing route."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param editedRoute The new route."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception RouteNodeDuplicateException If there is a duplicate route."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception DukeRouteNotFoundException If the route is not found."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setRoute(Route target, Route editedRoute) throws RouteNodeDuplicateException,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            DukeRouteNotFoundException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int index \u003d list.indexOf(target);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeRouteNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (!target.isSameRoute(editedRoute) \u0026\u0026 contains(editedRoute)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new RouteNodeDuplicateException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list.set(index, editedRoute);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Removes an existing Route from the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param toRemove The route to remove."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception DukeRouteNotFoundException If the route is not found."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void remove(Route toRemove) throws DukeRouteNotFoundException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (!list.remove(toRemove)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeRouteNotFoundException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Removes an existing Route from the list and returns it."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the Route."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return route The queried Route."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception IndexOutOfBoundsException If the query is out of bound."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Route remove(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.remove(index);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns whether the list is empty."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Whether the list is empty."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.isEmpty();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Replaces the contents of this list with a list of Routes."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param routes The list of Routes to replace."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception RouteNodeDuplicateException If there is a duplicate route."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setRoutes(List\u003cRoute\u003e routes) throws RouteNodeDuplicateException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (!isUniqueRoutes(routes)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new RouteNodeDuplicateException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list \u003d routes;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns an iterator to the list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The iterator to the list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Iterator\u003cRoute\u003e iterator() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.iterator();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks if an object is equal to this."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param other The other object."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Whether this object is equal to the other object."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                || (other instanceof RouteList // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                \u0026\u0026 list.equals(((RouteList) other).list));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the hash code of the list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The hash code of the list."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.hashCode();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns true if all Routes in list are unique."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param routes The routes to check."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Whether the routes are unique."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private boolean isUniqueRoutes(List\u003cRoute\u003e routes) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (int i \u003d 0; i \u003c routes.size() - 1; i++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (int j \u003d i + 1; j \u003c routes.size(); j++) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (routes.get(i).isSameRoute(routes.get(j))) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 184
    }
  },
  {
    "path": "src/main/java/duke/model/lists/VenueList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.model.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a list of Venues (Locations)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class VenueList implements Iterable\u003cVenue\u003e, Listable\u003cVenue\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private List\u003cVenue\u003e list;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public VenueList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor given a list of tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public VenueList(EventList events) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event e : events) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            list.add(e.getLocation());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void add(Venue venue) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list.add(venue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cVenue\u003e getVenueList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setVenueList(Venue venue, int index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        list.set(index,venue);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void addList(List\u003cVenue\u003e venueList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.list \u003d venueList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Venue get(int index) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.isEmpty();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean contains(Venue venue) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.contains(venue);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Iterator\u003cVenue\u003e iterator() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.iterator();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 16,
      "Inno97": 56,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/main/java/duke/model/locations/BusStop.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a bus stop."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class BusStop extends RouteNode {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String busCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Set\u003cString\u003e buses;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a BusStop object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busCode The bus code."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param address The address."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public BusStop(String busCode, String address, String description, double latitude, double longitude) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Constraint.valueOf(\"BUS\"), address, description, latitude, longitude);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.busCode \u003d busCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.buses \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the Set of bus services of the bus stop in String."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return buses The Set of bus services in String."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Set\u003cString\u003e getBuses() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return buses;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the bus code of the Bus Stop in String."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return busCode The bus code of the bus stop in String."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getBusCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return busCode;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a bus service in the form of a String to buses."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param bus The bus to add."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void addBuses(String bus) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        buses.add(bus);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Fetches data from model and updates the bus stop."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryFailedException If the bus stop is not found."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void fetchData(Model model) throws QueryFailedException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        HashMap\u003cString, BusStop\u003e allBus \u003d model.getMap().getBusStopMap();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (allBus.containsKey(this.busCode)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.setAddress(allBus.get(this.busCode).getAddress());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.setLatitude(allBus.get(this.busCode).getLatitude());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.setLongitude(allBus.get(this.busCode).getLongitude());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new QueryFailedException(\"BUS_STOP\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 51,
      "Jefferson111": 25
    }
  },
  {
    "path": "src/main/java/duke/model/locations/CustomNode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class CustomNode extends RouteNode {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a custom RouteNode that is not a BusStop or TrainStation."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param address The address."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CustomNode(String address, String description, double latitude, double longitude) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Constraint.valueOf(\"CUSTOM\"), address, description, latitude, longitude);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 18
    }
  },
  {
    "path": "src/main/java/duke/model/locations/RouteNode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents one transportation node - bus stop / train station."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public abstract class RouteNode extends Venue {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Constraint type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a RouteNode object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param type The type of transport of node."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude of node."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude of node."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param address The name of node."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The description of node."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNode(Constraint type, String address, String description, double latitude, double longitude) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(address, latitude, longitude, 0, 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the RouteNode details for display in Route Selector."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The details of the RouteNode."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getDisplayInfo() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return getAddress() + \"\\n\" + getDescription() + \"\\n\" + \" (\" + getLatitude() + \", \" + getLongitude() + \")\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the coordinates of the RouteNode (latitude, longitude)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The Coordinates."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getCoordinate() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return getLatitude() + \", \" + getLongitude();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the type of Constraint (bus / train / custom)."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return type The type of the RouteNode."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Constraint getType() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the description of the RouteNode."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return description The description of the RouteNode."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the type of the RouteNode."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param type The latitude to set."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setType(Constraint type) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the description of the RouteNode."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The latitude to set."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Converts the RouteNode to a String format."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The RouteNode in String format."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return getAddress() + \" (\" + getLatitude() + \", \" + getLongitude() + \")\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 89
    }
  },
  {
    "path": "src/main/java/duke/model/locations/TrainStation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a train station."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class TrainStation extends RouteNode {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private ArrayList\u003cString\u003e trainCodes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a TrainStation object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainCode The ArrayList of train code Strings."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The description of the train station."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param address The name of train station."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude of train station."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude of train station."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public TrainStation(ArrayList\u003cString\u003e trainCode, String address, String description,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                double latitude, double longitude) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Constraint.valueOf(\"MRT\"), address, description, latitude, longitude);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.trainCodes \u003d trainCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the ArrayList of train code of the train station in String."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return trainCodes The ArrayList of train code of the train station in String."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ArrayList\u003cString\u003e getTrainCodes() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return trainCodes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Fetches data from model and updates the Train Station."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void fetchData(Model model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        HashMap\u003cString, TrainStation\u003e allTrainStations \u003d model.getMap().getTrainMap();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (allTrainStations.containsKey(this.getAddress())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.setAddress(allTrainStations.get(this.getAddress()).getAddress());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.setLatitude(allTrainStations.get(this.getAddress()).getLatitude());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.setLongitude(allTrainStations.get(this.getAddress()).getLongitude());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 39,
      "hongchuan97": 12
    }
  },
  {
    "path": "src/main/java/duke/model/locations/Venue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a location of an attraction."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Venue implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private double latitude;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private double longitude;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private double distX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private double distY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final int RADIUS_EARTH \u003d 6371;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a Venue object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param address The address."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param distX The distance in x-axis."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param distY The distance in y-axis."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Venue(String address, double latitude, double longitude, double distX, double distY) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.latitude \u003d latitude;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.longitude \u003d longitude;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.distX \u003d distX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.distY \u003d distY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public double getLatitude() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return latitude;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public double getLongitude() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return longitude;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public double getDistX() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return distX;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public double getDistY() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return distY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Calculates flat earth distance (in metres) between 2 points based on latitude \u0026 longitude."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param otherVenue The other venue."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The absolute flat earth distance between the 2 venues."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public double getDistance(Venue otherVenue) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double latDistance \u003d Math.toRadians(otherVenue.getLatitude() - getLatitude());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double lonDistance \u003d Math.toRadians(otherVenue.getLongitude() - getLongitude());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double a \u003d Math.sin(latDistance / 2) * Math.sin(latDistance / 2)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + Math.cos(Math.toRadians(getLatitude())) * Math.cos(Math.toRadians(otherVenue.getLatitude()))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                * Math.sin(lonDistance / 2) * Math.sin(lonDistance / 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double c \u003d 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return Math.abs(RADIUS_EARTH * c * 1000);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the address of the Venue."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param address The address value to set."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setAddress(String address) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the latitude of the venue."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude value to set."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setLatitude(double latitude) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.latitude \u003d latitude;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the longitude of the venue."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude value to set."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setLongitude(double longitude) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.longitude \u003d longitude;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Converts the venue to a String format."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The venue as a String."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return getAddress() + \" | \" + getLatitude() + \" | \" + getLongitude() + \" | \" + getDistX() + \" | \" + getDistY();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Compares a given venue with this object."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param otherVenue The query venue."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Whether the venues are equal."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean equals(Venue otherVenue) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (otherVenue \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return getLatitude() \u003d\u003d otherVenue.getLatitude()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                \u0026\u0026 getLongitude() \u003d\u003d otherVenue.getLongitude()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                \u0026\u0026 getAddress().equals(otherVenue.getAddress())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                \u0026\u0026 getDistX() \u003d\u003d otherVenue.getDistX()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                \u0026\u0026 getDistY() \u003d\u003d otherVenue.getDistY();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 80,
      "Jefferson111": 44
    }
  },
  {
    "path": "src/main/java/duke/model/planning/Agenda.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.model.planning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.lists.VenueList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents an Agenda - places to go and things to do within a day."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class Agenda extends VenueList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private List\u003cTodo\u003e todoList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private int number;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Constructor to initialise new Day object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Agenda(List\u003cTodo\u003e todoList, List\u003cVenue\u003e venueList, int number) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        addList(venueList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.number \u003d number;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.todoList \u003d todoList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public int getNumber() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cTodo\u003e getTodoList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return this.todoList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cVenue\u003e getVenueList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return super.getVenueList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setTodo(int index, Todo todo) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        todoList.set(index,todo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setVenueList(Venue venue, int index) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        super.setVenueList(venue, index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setNumber(int newNum) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.number \u003d newNum;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        result.append(\"Agenda |\").append(this.getNumber()).append(\"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (Venue venue : this.getVenueList()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(venue.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (Todo todo : this.getTodoList()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(todo.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"|\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        result.append(\"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 66
    }
  },
  {
    "path": "src/main/java/duke/model/planning/Itinerary.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.model.planning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.lists.AgendaList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents an Itinerary and its contained information."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class Itinerary extends AgendaList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private LocalDateTime startDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private LocalDateTime endDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Venue hotelLocation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Constructor to initialise new Itinerary."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Itinerary(LocalDateTime startDate, LocalDateTime endDate, Venue hotelLocation, String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.hotelLocation \u003d hotelLocation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public LocalDateTime getEndDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Venue getHotelLocation() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return hotelLocation;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns number of days of the trip based on entered start and end dates."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return The number of days of the trip"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public int getNumberOfDays() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime tempDateTime \u003d LocalDateTime.from(startDate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        long days \u003d tempDateTime.until(endDate, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return Integer.parseInt(String.valueOf(days));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Prints the itinerary list in entirety."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return The String which lists the itinerary in full"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public String printItinerary() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        int days \u003d this.getNumberOfDays();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(\"Here are the list of Locations in \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                +  days + \" days around \" + this.getHotelLocation().getAddress() + \" with name \" + this.name + \": \\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (int i \u003d 0; i \u003c this.getList().size(); i++) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Agenda list1 \u003d this.getList().get(i);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"Day \").append(list1.getNumber()).append(\":\").append(\"\\n \\n\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"Venues: \").append(\"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            for (Venue venue : list1.getVenueList()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                result.append(venue.getAddress()).append(\"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"\\n\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"Todo List: \").append(\"\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            for (Todo todo : list1.getTodoList()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                result.append(\" - \").append(todo.getDescription()).append(\"\\n\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 84
    }
  },
  {
    "path": "src/main/java/duke/model/planning/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.model.planning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a to-do."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a to-do not yet done with the given description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description A description of this to-do."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string representation of this to-do."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The desired string representation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return getDescription();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 5,
      "-": 22,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/model/profile/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private LocalDateTime birthday;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Person(String name, LocalDateTime birthday) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public LocalDateTime getBirthday() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return birthday;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void setBirthday(LocalDateTime birthday) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 29
    }
  },
  {
    "path": "src/main/java/duke/model/profile/Preference.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.CategoryNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class Preference {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private Boolean sports;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private Boolean entertainment;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private Boolean arts;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private Boolean lifestyle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Constructs Preference object. Set all preference to false."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public Preference() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        sports \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        entertainment \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        arts \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        lifestyle \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Sets the preference of user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param category category of preference to set"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param setting setting which user wish to set the preference to"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void setPreference(String category, Boolean setting) throws CategoryNotFoundException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        switch (category) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"sports\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            sports \u003d setting;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"entertainment\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            entertainment \u003d setting;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"arts\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            arts \u003d setting;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"lifestyle\":"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            lifestyle \u003d setting;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            throw new CategoryNotFoundException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Returns all the preference of the user."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return Arraylist of user preference"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ArrayList\u003cBoolean\u003e getAllPreference() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cBoolean\u003e all \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        all.add(sports);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        all.add(entertainment);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        all.add(arts);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        all.add(lifestyle);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return all;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 61
    }
  },
  {
    "path": "src/main/java/duke/model/profile/ProfileCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.CategoryNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ProfileCard {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private Preference preference \u003d new Preference();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cItinerary\u003e favourite \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private boolean isNewUser \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void setPreference(Preference preference) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.preference \u003d preference;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void setPreference(String category, Boolean setting) throws CategoryNotFoundException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        preference.setPreference(category, setting);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void setPerson(String name, LocalDateTime birthday) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.person \u003d new Person(name, birthday);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        isNewUser \u003d false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public boolean isNewUser() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return isNewUser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public String getPersonName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return person.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public LocalDateTime getPersonBirthday() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return person.getBirthday();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ArrayList\u003cBoolean\u003e getPreference() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return preference.getAllPreference();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ArrayList\u003cItinerary\u003e getFavourite() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return favourite;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void addFavourite(Itinerary fav) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        favourite.add(fav);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public int getAge() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return Period.between(person.getBirthday().toLocalDate(), LocalDateTime.now().toLocalDate()).getYears();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 56
    }
  },
  {
    "path": "src/main/java/duke/model/transports/BusService.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.transports;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.enumerations.Direction;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a Bus and its route."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class BusService {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String bus;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cString\u003e forward;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cString\u003e backward;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Create bus object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public BusService(String bus) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.bus \u003d bus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.forward \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.backward \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * get the route of bus in direction indicated."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param direction direction of travel"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return All bus stop in direction of travel"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ArrayList\u003cString\u003e getDirection(Direction direction) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (direction \u003d\u003d Direction.FORWARD) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return forward;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return backward;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public String getBus() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return bus;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Add the bus stop code to the route which the bus would travel to."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busCode Code of bus stop"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param direction Direction of travel to next bus stop"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void addRoute(String busCode, Direction direction) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (direction \u003d\u003d Direction.FORWARD) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.forward.add(busCode);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.backward.add(busCode);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 13,
      "hongchuan97": 21,
      "Jefferson111": 21
    }
  },
  {
    "path": "src/main/java/duke/model/transports/Route.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.model.transports;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.NullResultException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.RouteNodeDuplicateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a route between 2 locations as a list of route nodes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class Route {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private ArrayList\u003cRouteNode\u003e nodes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs an empty route object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param name The name of the route."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The description of the route."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Route(String name, String description) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.nodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor with predefined nodes."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param nodes The nodes of the route."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param name The name of the route."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The description of the route."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Route(ArrayList\u003cRouteNode\u003e nodes, String name, String description) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.nodes \u003d nodes;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the node at index."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of node."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return node The node at index."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws IndexOutOfBoundsException The exception when index is out of bounds."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNode getNode(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return nodes.get(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the Arraylist of Route Nodes."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return nodes The ArrayList of Route Nodes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ArrayList\u003cRouteNode\u003e getNodes() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return nodes;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the Arraylist of Route Nodes as Venues instead."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return nodes The ArrayList of Route Nodes."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ArrayList\u003cVenue\u003e getVenueNodes() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ArrayList\u003cVenue\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (RouteNode node: nodes) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result.add(node);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the starting node of the route."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return node The start node."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNode getStartNode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (nodes.size() \u003e 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return nodes.get(0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the starting node of the route."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return node The start node."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNode getEndNode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (nodes.size() \u003e 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return nodes.get(nodes.size() - 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public int getNumNodes() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return nodes.size();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void remove(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        nodes.remove(index);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setNodes(ArrayList\u003cRouteNode\u003e nodes) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.nodes \u003d nodes;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a new node to the route at a given index."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param newNode The new node to add."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the node to add to."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception QueryOutOfBoundsException If the index is out of bounds."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception RouteNodeDuplicateException If the route is a duplicate."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void addNode(RouteNode newNode, int index) throws RouteNodeDuplicateException, QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (index \u003e\u003d 0 \u0026\u0026 index \u003c\u003d nodes.size()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (RouteNode node : nodes) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (node instanceof BusStop \u0026\u0026 newNode instanceof BusStop"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        \u0026\u0026 ((BusStop) node).getBusCode().equals(((BusStop) newNode).getBusCode())) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    throw new RouteNodeDuplicateException();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (node instanceof TrainStation \u0026\u0026 newNode instanceof TrainStation"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        \u0026\u0026 ((TrainStation) node).getTrainCodes().equals(((TrainStation) newNode).getTrainCodes())) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    throw new RouteNodeDuplicateException();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            nodes.add(index, newNode);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new QueryOutOfBoundsException(\"NODE\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternate method to add a node at the end of the Route."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param newNode The new node to add."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception RouteNodeDuplicateException If the route is a duplicate."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void addNode(RouteNode newNode) throws RouteNodeDuplicateException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (RouteNode node: nodes) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (node instanceof BusStop \u0026\u0026 newNode instanceof BusStop"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    \u0026\u0026 ((BusStop) node).getBusCode().equals(((BusStop) newNode).getBusCode())) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new RouteNodeDuplicateException();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (node instanceof TrainStation \u0026\u0026 newNode instanceof TrainStation"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    \u0026\u0026 ((TrainStation) node).getTrainCodes().equals(((TrainStation) newNode).getTrainCodes())) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new RouteNodeDuplicateException();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        nodes.add(newNode);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Fetches a node with the given name."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param name The query name."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return node The queried node."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws NullResultException The exception when nothing is found."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNode fetchNode(String name) throws NullResultException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (RouteNode node: nodes) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (node.getAddress().equals(name.toLowerCase())) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return node;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new NullResultException();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Deletes a node at the given index."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index to delete"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void deleteNode(int index) throws QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            nodes.remove(index);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(String.valueOf(index));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns true if both routes are the same."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean isSameRoute(Route otherRoute) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (otherRoute \u003d\u003d this) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return otherRoute !\u003d null \u0026\u0026 otherRoute.getName().equals(getName());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 224
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.CategoryNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeDuplicateTaskException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.ItineraryInsufficientAgendasException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.RecommendationDayExceededException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.RouteNodeDuplicateException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.StorageFileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.TransportationMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.ParserStorageUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.lists.AgendaList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Agenda;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Todo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.profile.ProfileCard;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Manages storage of Duke data in local storage."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private RouteList routes;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private TransportationMap map;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ProfileCard profileCard;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String BUS_FILE_PATH \u003d \"/data/bus.txt\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String RECOMMENDATIONS_FILE_PATH \u003d \"/data/recommendations.txt\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String ITINERARIES_FILE_PATH \u003d \"itineraries.txt\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final String TRAIN_FILE_PATH \u003d \"/data/train.txt\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String EVENTS_FILE_PATH \u003d \"events.txt\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String ROUTES_FILE_PATH \u003d \"routes.txt\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String SAMPLE_RECOMMENDATIONS_FILE_PATH \u003d \"samples.txt\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String ITINERARY_LIST_FILE_PATH \u003d \"itineraryTable.txt\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final String PROFILE_FILE_PATH \u003d \"profile.txt\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a Storage object that contains information from the model."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events \u003d new EventList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routes \u003d new RouteList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            read();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            logger.log(Level.WARNING, e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Reads all storage file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void read() throws RouteNodeDuplicateException, CorruptedFileException, StorageFileNotFoundException,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            DukeDuplicateTaskException, DukeDateTimeParseException, CategoryNotFoundException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        readBus();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        readTrain();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        readProfile();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        readEvent();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        readRoutes();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Reads train from filepath."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void readTrain() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assert this.map !\u003d null : \"Map must be created first\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, TrainStation\u003e trainMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Scanner s \u003d new Scanner(getClass().getResourceAsStream(TRAIN_FILE_PATH));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            TrainStation newTrain \u003d ParserStorageUtil.createTrainFromStorage(s.nextLine());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            trainMap.put(newTrain.getDescription(), newTrain);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.map.setTrainMap(trainMap);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Reads bus from filepath."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void readBus() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, BusStop\u003e busStopData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, BusService\u003e busData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Scanner s \u003d new Scanner(getClass().getResourceAsStream(BUS_FILE_PATH));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        boolean isBusData \u003d false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\".equals(line)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                isBusData \u003d true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (isBusData) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                BusService busService \u003d ParserStorageUtil.createBusFromStorage(line);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                busData.put(busService.getBus(), busService);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                BusStop busStop \u003d ParserStorageUtil.createBusStopDataFromStorage(line);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                busStopData.put(busStop.getBusCode(), busStop);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.map \u003d new TransportationMap(busStopData, busData);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Reads events from filepath. Creates empty events if file cannot be read."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeDateTimeParseException   If the datetime of an event cannot be parsed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeDuplicateTaskException   If there is a duplicate event."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws StorageFileNotFoundException If the file cannot be read."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void readEvent() throws DukeDuplicateTaskException, DukeDateTimeParseException,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            StorageFileNotFoundException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        List\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            File f \u003d new File(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                events.add(ParserStorageUtil.createTaskFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new StorageFileNotFoundException(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Reads routes from filepath. Creates empty routes if file cannot be read."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws RouteNodeDuplicateException  If there is a duplicate route that is read."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws CorruptedFileException       If the reading has failed."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws StorageFileNotFoundException If the storage file cannot be found."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void readRoutes() throws RouteNodeDuplicateException, CorruptedFileException, StorageFileNotFoundException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        List\u003cRoute\u003e newRoutes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            File file \u003d new File(ROUTES_FILE_PATH);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Scanner s \u003d new Scanner(file);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Route newRoute \u003d new Route(new ArrayList\u003c\u003e(), \"\", \"\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                String input \u003d s.nextLine();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (input.split(\"\\\\|\", 2)[0].strip().equals(\"route\")) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    if (newRoute.getNumNodes() !\u003d 0) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        newRoutes.add(newRoute);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    newRoute \u003d ParserStorageUtil.createRouteFromStorage(input);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    newRoute.addNode(ParserStorageUtil.createNodeFromStorage(input));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (!newRoute.getName().equals(\"\")) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                newRoutes.add(newRoute);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new StorageFileNotFoundException(ROUTES_FILE_PATH);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routes.setRoutes(newRoutes);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns Venues fetched from stored memory."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The List of all Venues in Recommendations list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cAgenda\u003e readVenues(int numDays) throws RecommendationDayExceededException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cAgenda\u003e recommendations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Scanner scanner \u003d new Scanner(getClass().getResourceAsStream(RECOMMENDATIONS_FILE_PATH));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (numDays \u003e 8) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new RecommendationDayExceededException();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        while (scanner.hasNext() \u0026\u0026 i \u003c\u003d numDays) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            List\u003cVenue\u003e venueList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            venueList.add(ParserStorageUtil.getVenueFromStorage(scanner.nextLine()));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            List\u003cTodo\u003e todoList \u003d ParserStorageUtil.getTodoListFromStorage(scanner.nextLine());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            venueList.add(ParserStorageUtil.getVenueFromStorage(scanner.nextLine()));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            todoList.addAll(ParserStorageUtil.getTodoListFromStorage(scanner.nextLine()));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Agenda agenda \u003d new Agenda(todoList, venueList, i++);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            recommendations.add(agenda);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        scanner.close();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return recommendations;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Reads the profile from filepath. Creates new empty profile if file doesnt exist."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void readProfile() throws StorageFileNotFoundException,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            DukeDateTimeParseException, CategoryNotFoundException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        profileCard \u003d new ProfileCard();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            File f \u003d new File(PROFILE_FILE_PATH);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                String input \u003d s.nextLine();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                profileCard \u003d ParserStorageUtil.createProfileFromStorage(profileCard, input);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            throw new StorageFileNotFoundException(PROFILE_FILE_PATH);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Writes the tasks into a file of the given filepath."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If a file cannot be saved."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void write() throws FileNotSavedException {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        writeEvents();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        writeRoutes();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        writeProfile();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Writes the profile to local storage."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void writeProfile() throws FileNotSavedException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            FileWriter writer \u003d new FileWriter(PROFILE_FILE_PATH);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            writer.write(ParserStorageUtil.toProfileStorageString(profileCard) + \"\\n\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            throw new FileNotSavedException(PROFILE_FILE_PATH);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Writes the events to local storage."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void writeEvents() throws FileNotSavedException {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            FileWriter writer \u003d new FileWriter(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            for (Event event : events) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                writer.write(ParserStorageUtil.toStorageString(event) + \"\\n\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new FileNotSavedException(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Writes the events to local storage."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void writeRoutes() throws FileNotSavedException {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            FileWriter writer \u003d new FileWriter(ROUTES_FILE_PATH);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String routesString \u003d \"\";"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (Route route : routes) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                routesString +\u003d ParserStorageUtil.toRouteStorageString(route);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            writer.write(routesString);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new FileNotSavedException(ROUTES_FILE_PATH);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Writes recommendations to filepath."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void writeItineraries(Itinerary itinerary, int type) throws ItineraryInsufficientAgendasException,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            FileNotSavedException {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String file;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (type \u003d\u003d 1) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            file \u003d ITINERARIES_FILE_PATH;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            file \u003d SAMPLE_RECOMMENDATIONS_FILE_PATH;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            FileWriter writer \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writer.write(itinerary.getName() + \"\\n\" + itinerary.getStartDate().toString() + \"\\n\""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    + itinerary.getEndDate().toString() + \"\\n\" + itinerary.getHotelLocation().toString() + \"\\n\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            if (itinerary.getList().size() !\u003d itinerary.getNumberOfDays()) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                throw new ItineraryInsufficientAgendasException();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            for (Agenda agenda : itinerary.getList()) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                writer.write(agenda.toString());"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileNotSavedException(file);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Reads recommendations from filepath."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws DukeDateTimeParseException If the datetime cannot be parsed."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileLoadFailException      If the file fails to load."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Itinerary readRecommendations() throws DukeDateTimeParseException, FileLoadFailException {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cAgenda\u003e agendaList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Itinerary itinerary;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            File file \u003d new File(SAMPLE_RECOMMENDATIONS_FILE_PATH);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            String name \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(scanner.nextLine());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(scanner.nextLine());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Venue hotel \u003d ParserStorageUtil.getVenueFromStorage(scanner.nextLine());"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            itinerary \u003d new Itinerary(start, end, hotel, name);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                List\u003cVenue\u003e venueList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                List\u003cTodo\u003e todoList;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                final int number \u003d ParserStorageUtil.getNumberFromStorage(scanner.nextLine());"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                venueList.add(ParserStorageUtil.getVenueFromStorage(scanner.nextLine()));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                venueList.add(ParserStorageUtil.getVenueFromStorage(scanner.nextLine()));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                todoList \u003d ParserStorageUtil.getTodoListFromStorage(scanner.nextLine());"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                Agenda agenda \u003d new Agenda(todoList, venueList, number);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                agendaList.add(agenda);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            scanner.close();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            itinerary.setTasks(agendaList);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileLoadFailException(new File(SAMPLE_RECOMMENDATIONS_FILE_PATH));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return itinerary;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Writes the specified itineraries name to the table of contents."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param itinerary This itineraries name is to be stored."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileNotSavedException      If the file fails to save."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void writeItinerarySave(Itinerary itinerary) throws FileNotSavedException {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            FileWriter writer \u003d new FileWriter(ITINERARY_LIST_FILE_PATH, true);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            File file \u003d new File(ITINERARY_LIST_FILE_PATH);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            int linecount \u003d 0;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            FileReader fr \u003d new FileReader(file);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            while (br.readLine() !\u003d null) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                linecount++;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            fr.close();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writer.write(++linecount + \" | \" + itinerary.getName() + \"\\n\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileNotSavedException(ITINERARY_LIST_FILE_PATH);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns the itinerary list table of contents so user may refer to it and perform showItinerary command."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return Returns the String containing the table of contents"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileLoadFailException   If the file fails to load."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public String readItineraryList() throws FileLoadFailException {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            File f \u003d new File(ITINERARY_LIST_FILE_PATH);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Scanner scanner \u003d new Scanner(f);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                String input \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                String number \u003d input.split(\"\\\\|\", 2)[0].strip();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                String name \u003d input.split(\"\\\\|\", 2)[1].strip();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                output.append(number).append(\". \").append(name).append(\"\\n\");"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileLoadFailException(new File(ITINERARY_LIST_FILE_PATH));"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Retrieves an itinerary from persistent storage based on its serial number."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param number The itineraries serial number."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileLoadFailException   If the file fails to load."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Itinerary getItinerary(String number) throws DukeException {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Itinerary itinerary \u003d null;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            File itineraryTable \u003d new File(ITINERARY_LIST_FILE_PATH);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Scanner s \u003d new Scanner(itineraryTable);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            String name \u003d null;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                String input \u003d s.nextLine();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                String number1 \u003d input.split(\"\\\\|\", 2)[0].strip();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                if (number.equals(number1)) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    name \u003d input.split(\"\\\\|\", 2)[1].strip();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            File itinerariesFile \u003d new File(ITINERARIES_FILE_PATH);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Scanner scanner \u003d new Scanner(itinerariesFile);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            AgendaList agendaList \u003d new AgendaList();"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                if (scanner.nextLine().equals(name)) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(scanner.nextLine());"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(scanner.nextLine());"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    Venue hotel \u003d ParserStorageUtil.getVenueFromStorage(scanner.nextLine());"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    itinerary \u003d new Itinerary(start, end, hotel, name);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    String fileLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    while (fileLine.split(\"\\\\|\")[0].equals(\"Agenda \")) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        List\u003cVenue\u003e venueList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        List\u003cTodo\u003e todoList;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        final int number2 \u003d Integer.parseInt(fileLine.split(\"\\\\|\")[1]);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        String newVenue \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        while (newVenue.contains(\" |\")) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                            venueList.add(ParserStorageUtil.getVenueFromStorage(newVenue));"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                            newVenue \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        todoList \u003d ParserStorageUtil.getTodoListFromStorage(newVenue);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        Agenda agenda \u003d new Agenda(todoList, venueList, number2);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        agendaList.add(agenda);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        if (scanner.hasNextLine()) {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                            fileLine \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            scanner.close();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            assert itinerary !\u003d null;"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            itinerary.setTasks(agendaList);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            return itinerary;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (FileNotFoundException | DukeDateTimeParseException e) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileLoadFailException(new File(ITINERARY_LIST_FILE_PATH));"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public EventList getEvents() {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public TransportationMap getMap() {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return this.map;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public RouteList getRoutes() {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return routes;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ProfileCard getProfileCard() {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return profileCard;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public boolean getIsNewUser() {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return profileCard.isNewUser();"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 223,
      "Inno97": 81,
      "hongchuan97": 89,
      "-": 44,
      "Jefferson111": 52
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultCalender;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultExit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultImage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.LogicManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.PanelResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.calendar.CalendarWindow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ui.dialogbox.DialogBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ui.dialogbox.DialogBoxImage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.map.MapWindow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private AnchorPane sidePanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private LogicManager logic;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Main main;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.png\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Initialises the MainWindow."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        primaryStage.getScene().getStylesheets().addAll("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                this.getClass().getResource(\"/css/mainStyle.css\").toExternalForm());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.INFO, \"Starting user interface up...\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the application."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialises the logic and Ui component of Duke."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialise(Main main) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.main \u003d main;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logic \u003d new LogicManager();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (logic.isNewUser) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            sgTravelSetup(\"profile\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            sgTravelShow(Messages.STARTUP_WELCOME_MESSAGE + logic.getName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String input \u003d getUserInput();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isEmpty(input)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        echoUserInput(input);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        sgTravelResponse(input);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        panelResponse(keyEvent);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void panelResponse(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        PanelResult result \u003d logic.execute(keyEvent.getCode());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        panelShow(result);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void sgTravelResponse(String input) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                CommandResult result \u003d logic.execute(input);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                sgTravelShow(result);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (result instanceof CommandResultExit) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    tryExitApp();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (result instanceof CommandResultCalender) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    new CalendarWindow((CommandResultCalender) result).show();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (result instanceof CommandResultMap) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    new MapWindow((CommandResultMap) result).show();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            } catch (DukeException | FileNotFoundException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                sgTravelShow(e.getMessage());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void sgTravelSetup(String input) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            CommandResult result \u003d logic.setup(input);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            sgTravelShow(result);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (DukeException | FileNotFoundException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            sgTravelShow(e.getMessage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Shows message(s) to the user."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void sgTravelShow(CommandResult commandResult) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (commandResult instanceof CommandResultImage) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            sgTravelShow(commandResult.getMessage(), ((CommandResultImage) commandResult).getImage());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (commandResult !\u003d null);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        sgTravelShow(commandResult.getMessage());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void sgTravelShow(String msg) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                DialogBox.getDukeDialog(msg, dukeImage)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        );"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Shows an image in dialogBoxImage to the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message The message to show."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param image The image to show."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void sgTravelShow(String message, Image image) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                DialogBoxImage.getDukeDialog(message, dukeImage, image)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void panelShow(PanelResult result) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        sidePanel.getChildren().clear();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        sidePanel.getChildren().add(SidePanel.getPanel(result));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void tryExitApp() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            main.stop();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            sgTravelShow(\"Exit app failed\" + e.getMessage());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void echoUserInput(String input) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String getUserInput() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String input \u003d userInput.getText().strip();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isEmpty(String input) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return \"\".equals(input);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 25,
      "hongchuan97": 25,
      "-": 58,
      "Jefferson111": 88
    }
  },
  {
    "path": "src/main/java/duke/ui/SidePanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.PanelResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.map.PointCard;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Represents the side panel of the main window."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class SidePanel extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private StackPane taskContainer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private AnchorPane miniMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label startDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label endDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"SidePanel.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private SidePanel(PanelResult result) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (result.isReady()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            for (int i \u003d 0; i \u003c result.size(); ++i) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                miniMap.getChildren().add("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        PointCard.getCard(result.getVenue(i), result.getVenueColor(i)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            description.setText(result.getDescription());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            description.setVisible(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            startDate.setText(result.getStartDate());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            startDate.setVisible(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            endDate.setText(result.getEndDate());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            endDate.setVisible(true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            setHighlight(result);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void setHighlight(PanelResult result) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            switch (result.getField()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            case 0:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                description.getStyleClass().add(\"highlight\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            case 1:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                startDate.getStyleClass().add(\"highlight\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            case 2:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                endDate.getStyleClass().add(\"highlight\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (QueryOutOfBoundsException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            logger.log(Level.FINE, \"Nothing needs to be highlighted.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static AnchorPane getPanel(PanelResult result) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new SidePanel(result).getRoot();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 72
    }
  },
  {
    "path": "src/main/java/duke/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        URL fxmlFileUrl \u003d Main.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/duke/ui/calendar/CalendarCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a calender card as a part of the UI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class CalendarCard extends UiPart\u003cStackPane\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label day;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private StackPane calendarCard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private final EventList events;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"CalendarCard.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String CLASSNAME \u003d \"class duke.model.events.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static int currentIndex \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isCalendarCardClass \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private CalendarCard(int day, EventList events) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.day.setText(Integer.toString(day));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        calendarCard.getStyleClass().add(\"calendarCard\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (events !\u003d null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!events.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            loadInfoOnToCard();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void loadInfoOnToCard() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setText(events.get(currentIndex).getClass().toString().replace(CLASSNAME, \"\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        description.setText(events.get(currentIndex).getDescription());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event t : events) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result.append(t.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip tooltip \u003d new Tooltip(result.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip.install(getRoot(), tooltip);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected static StackPane getCalendarCard(int day, EventList events) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CalendarCard(day, events).getRoot();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void onClick() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!events.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            currentIndex \u003d (currentIndex + 1) % events.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            loadInfoOnToCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void onMouseEnter() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        calendarCard.getStyleClass().add(\"calendarCardHover\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        calendarCard.getStyleClass().remove(\"calendarCard\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isCalendarCardClass \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void onMouseExit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!isCalendarCardClass) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            calendarCard.getStyleClass().add(\"calendarCard\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            calendarCard.getStyleClass().remove(\"calendarCardHover\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            isCalendarCardClass \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 4,
      "Jefferson111": 75
    }
  },
  {
    "path": "src/main/java/duke/ui/calendar/CalendarWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDuplicateTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultCalender;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a calender window in the UI."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class CalendarWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"CalendarWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private YearMonth currentYearMonth;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int numOfDays;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int dayOfTheFirstDay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String currentMonth;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private List\u003cEventList\u003e filteredEvents;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static EventList events;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int MAX_ROW \u003d 6;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int MAX_COL \u003d 7;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private VBox pane;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Text calendarTitle;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private GridPane gridCalendar;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void previousMonth() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.minusMonths(1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        refreshCalendar();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void nextMonth() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.plusMonths(1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        refreshCalendar();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Refreshes the calendar."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void refreshCalendar() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        updateVariables();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setCalendarTitle(currentYearMonth.getYear(), currentMonth);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        fillCalendarDays();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Sets the title of the calendar according to a specific month and year."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void setCalendarTitle(int year, String month) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        calendarTitle.setText(\"♒\" + month + \" \" + year + \"♒\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        pane.setId(currentMonth);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Fills up the calendar with the necessary information."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void fillCalendarDays() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        gridCalendar.getChildren().clear();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        boolean flag \u003d false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int day \u003d 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_ROW \u0026\u0026 day \u003c\u003d numOfDays; i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            for (int j \u003d 0; j \u003c MAX_COL \u0026\u0026 day \u003c\u003d numOfDays; j++) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (dayOfTheFirstDay \u003d\u003d j) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    flag \u003d true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (flag) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    gridCalendar.add(CalendarCard.getCalendarCard(day, filteredEvents.get(day)), j, i);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    ++day;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Updates the relevant variables to contain information of the particular month."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void updateVariables() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setCalendarTitle(currentYearMonth.getYear(), currentMonth);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentMonth \u003d currentYearMonth.getMonth().toString();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        numOfDays \u003d currentYearMonth.lengthOfMonth();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        findRelevantTasks();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dayOfTheFirstDay \u003d currentYearMonth.atDay(1).getDayOfWeek().getValue() % 7;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Finds the tasks that needs to be displayed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void findRelevantTasks() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        filteredEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d numOfDays; ++i) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            filteredEvents.add(new EventList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.sort();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            tryAddingTask(event);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to add a task to the current calendar."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param t A task from the Duke\u0027s task list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void tryAddingTask(Event t) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDate startDate \u003d t.getStartDate().toLocalDate();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDate endDate \u003d t.getEndDate().toLocalDate();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        while (!startDate.isAfter(endDate)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (isSameYearMonth(startDate)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    filteredEvents.get(startDate.getDayOfMonth()).add(t);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                } catch (DukeDuplicateTaskException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    logger.log(Level.WARNING, \"Duplicated tasks should not exists.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            startDate \u003d startDate.plusDays(1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isSameYearMonth(Object date) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return currentYearMonth.getYear() \u003d\u003d ((LocalDate) date).getYear()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 currentYearMonth.getMonth() \u003d\u003d ((LocalDate) date).getMonth();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Sets the calendar layout."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param events The EventList from SGTravel containing all the events."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void setCalendarLayout(EventList events) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setCalendarBasics(events);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        refreshCalendar();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Sets the basic information of the calendar; current month, year and tasks."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void setCalendarBasics(EventList events) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ZoneId zoneId \u003d ZoneId.systemDefault(); //GMT +8"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentYearMonth \u003d YearMonth.now(zoneId).minusMonths(0);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        CalendarWindow.events \u003d events;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new CalendarWindow."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param root Stage to use as the root of the CalendarWindow."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private CalendarWindow(Stage root, EventList events) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.getScene().getStylesheets().addAll(this.getClass().getResource(\"/css/calendarStyle.css\").toExternalForm());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setCalendarLayout(events);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new CalendarWindow."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CalendarWindow(CommandResultCalender commandResult) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this(new Stage(), commandResult.getEvents());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Shows the Calendar window."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns true if the Calendar window is currently being shown."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Focuses on the Calendar window."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 4,
      "Inno97": 1,
      "Jefferson111": 211
    }
  },
  {
    "path": "src/main/java/duke/ui/dialogbox/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.ui.dialogbox;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends UiPart\u003cHBox\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"DialogBox.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private HBox dialogBox;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private HBox miniBox;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dialog.setMinHeight(Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        roundImageView(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Rounds an image."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void roundImageView(Image img) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ImagePattern pattern \u003d new ImagePattern(img);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        circle.setFill(pattern);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        miniBox.getStyleClass().remove(\"dialog\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        miniBox.getStyleClass().add(\"dialogFlip\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getRoot().getChildren());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        flipNode(tmp, this.getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ObservableList\u003cNode\u003e tmp2 \u003d FXCollections.observableArrayList(miniBox.getChildren());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        flipNode(tmp2, miniBox);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void flipNode(ObservableList\u003cNode\u003e tmp, HBox root) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets a User Dialog box for display."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img).getRoot();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets a Duke Dialog box for display."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return db.getRoot();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 3,
      "-": 46,
      "Jefferson111": 32
    }
  },
  {
    "path": "src/main/java/duke/ui/dialogbox/DialogBoxImage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.ui.dialogbox;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Dialog Box containing image."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class DialogBoxImage extends UiPart\u003cHBox\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String FXML \u003d \"DialogBoxImage.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private HBox dialogBox;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private HBox miniBox;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private ImageView imageBox;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private DialogBoxImage(String text, Image user, Image picture) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dialog.setMinHeight(Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        roundImageView(user);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        setPictureView(picture);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Rounds an image."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void roundImageView(Image image) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ImagePattern pattern \u003d new ImagePattern(image);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        circle.setFill(pattern);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the image to display in the imageBox."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param image The image to display"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void setPictureView(Image image) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        imageBox.setImage(image);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        miniBox.getStyleClass().remove(\"dialog\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        miniBox.getStyleClass().add(\"dialogFlip\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getRoot().getChildren());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        flipNode(tmp, this.getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ObservableList\u003cNode\u003e tmp2 \u003d FXCollections.observableArrayList(miniBox.getChildren());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        flipNode(tmp2, miniBox);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void flipNode(ObservableList\u003cNode\u003e tmp, HBox root) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets a Duke Dialog box for display."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static HBox getDukeDialog(String text, Image user, Image picture) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        DialogBoxImage db \u003d new DialogBoxImage(text, user, picture);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return db.getRoot();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 2,
      "Inno97": 54,
      "Jefferson111": 29
    }
  },
  {
    "path": "src/main/java/duke/ui/map/LocationCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.ui.map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a location card in the UI."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LocationCard extends UiPart\u003cStackPane\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"LocationCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private LocationCard(Venue location, String id) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double offsetY \u003d 900 - ((location.getLatitude() - 1.218) * 900 / (1.486 - 1.218));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double offsetX \u003d (location.getLongitude() - 103.622) * 1200 / (104.021 - 103.622);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AnchorPane.setLeftAnchor(getRoot(), offsetX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AnchorPane.setTopAnchor(getRoot(), offsetY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip tooltip \u003d new Tooltip(location.getAddress());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip.install(getRoot(), tooltip);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.FINE, \"Relative location: \" + offsetX + \" \" + offsetY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (\"RouteNodeStart\".equals(id) || \"RouteNodeEnd\".equals(id) || \"RouteNodeIntermediate\".equals(id)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            getRoot().setId(id);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static StackPane getCard(Venue location, String id) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new LocationCard(location, id).getRoot();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 11,
      "Jefferson111": 23
    }
  },
  {
    "path": "src/main/java/duke/ui/map/MapWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.ui.map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a generic Map Window in the UI."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class MapWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private AnchorPane map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"MapWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private ObservableList\u003cVenue\u003e locations \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void generateNodes(List\u003cRouteNode\u003e routes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        locations.addAll(routes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void attachListener() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        locations.addListener((ListChangeListener\u003cVenue\u003e) c -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            map.getChildren().clear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String id \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            for (Venue location : locations) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (index \u003d\u003d 0) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    id \u003d \"RouteNodeStart\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                } else if (index \u003d\u003d locations.size() - 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    id \u003d \"RouteNodeEnd\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    id \u003d \"RouteNodeIntermediate\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                map.getChildren().add(LocationCard.getCard(location, id));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                index++;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new MapWindow."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param root Stage to use as the root of the CalendarWindow."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private MapWindow(Stage root, List\u003cRouteNode\u003e routes) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.getScene().getStylesheets().addAll(this.getClass().getResource(\"/css/mapStyle.css\").toExternalForm());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        attachListener();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        generateNodes(routes);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new MapWindow."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public MapWindow(CommandResultMap commandResult) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this(new Stage(), commandResult.getRoute());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Shows the Map window."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns true if the Map window is currently being shown."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Focuses on the Map window."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 16,
      "Jefferson111": 85
    }
  },
  {
    "path": "src/main/java/duke/ui/map/PointCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.ui.map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Represents a point on the map."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class PointCard extends UiPart\u003cStackPane\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"PointCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private PointCard(Venue venue, Paint color) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        circle.setFill(color);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setLocation();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void setLocation() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double offsetY \u003d 230 - ((venue.getLatitude() - 1.218) * 240 / (1.486 - 1.218));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double offsetX \u003d 30 + (venue.getLongitude() - 103.630) * 288  / (104.028 - 103.630);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AnchorPane.setLeftAnchor(getRoot(), offsetX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AnchorPane.setTopAnchor(getRoot(), offsetY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip tooltip \u003d new Tooltip(venue.getAddress());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip.install(getRoot(), tooltip);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static StackPane getCard(Venue venue, Paint color) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new PointCard(venue, color).getRoot();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 42
    }
  },
  {
    "path": "src/main/java/duke/ui/map/RouteLocationCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.ui.map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Represents a location card in the UI DialogBoxMap."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteLocationCard extends UiPart\u003cStackPane\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String FXML \u003d \"LocationCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private RouteLocationCard(Venue location, String id) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double offsetY \u003d 360 - ((location.getLatitude() - 1.218) * 360 / (1.486 - 1.218));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double offsetX \u003d (location.getLongitude() - 103.622) * 360 / (104.021 - 103.622);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        AnchorPane.setLeftAnchor(getRoot(), offsetX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        AnchorPane.setTopAnchor(getRoot(), offsetY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Tooltip tooltip \u003d new Tooltip(location.getAddress());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Tooltip.install(getRoot(), tooltip);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        logger.log(Level.FINE, \"Relative location: \" + offsetX + \" \" + offsetY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (\"RouteNodeStart\".equals(id) || \"RouteNodeEnd\".equals(id) || \"RouteNodeIntermediate\".equals(id)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            getRoot().setId(id);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static StackPane getCard(Venue location, String id) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new RouteLocationCard(location, id).getRoot();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 37
    }
  },
  {
    "path": "src/main/resources/css/calendarStyle.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".calendar {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-repeat: stretch;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: 750 600;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-position: center center;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#JANUARY {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Jan.jpg\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#FEBRUARY {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Feb.jpg\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#MARCH {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Mar.jpg\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#APRIL {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Apr.jpg\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#MAY {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/May.jpg\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#JUNE {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Jun.jpg\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#JULY {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Jul.jpg\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#AUGUST {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Aug.jpg\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#SEPTEMBER {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Sep.jpg\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#OCTOBER {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Oct.jpg\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#NOVEMBER {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Nov.png\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#DECEMBER {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Dec.jpg\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".arrow-button {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-shape: \"M 0 50 L 50 0 L 50 100 z\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".calendarCard {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: rgba(100, 100, 100, 0.5);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: grey;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 10, 0.5, 0.0, 0.0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".calendarCardHover {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: rgba(150, 150, 150, 0.5);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.2), 10, 0.5, 0.0, 0.0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#day {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-weight: bolder;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#task {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#description {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dayOfWeek {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-size: 16;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-fill: linear-gradient(to bottom right, red, springgreen);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#calendarTitle {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-size: 24;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-fill: gold;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-stroke: black;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-stroke-width: 1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 108
    }
  },
  {
    "path": "src/main/resources/css/mainStyle.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dialog {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: lightblue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius: 20;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-insets: 5;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: blue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-insets: 5;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dialogFlip {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: lightgreen;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius: 20;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-insets: 5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: green;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-insets: 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#circle {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 5;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#dialogContainer {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/wallpaper.jpg\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: 400 600;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-repeat: repeat-y;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color : black;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar:vertical .track{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color : linear-gradient(to top left, mediumseagreen, midnightblue);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color : black;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar:vertical .increment-button ,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar:vertical .decrement-button {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color :transparent;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius : 0.0em;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-padding :0.0 10.0 0.0 0.0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar .increment-arrow,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar .decrement-arrow{"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-shape : \" \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-padding :0.00em 0.0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar:vertical .thumb {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color : linear-gradient(to bottom right, mediumseagreen, midnightblue);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-insets : 2.0, 0.0, 0.0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius : 2.0em;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color : honeydew;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius : 2.0em;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".mainPane {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: rgba(0, 30, 15, 0.8);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".side {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: grey;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": ".routeMapPane {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-border-color: blue;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-border-width: 1"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".sidePane {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/sg.png\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: 400 300;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": ".routeSidePane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-size: 400 300;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".info {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color : black;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color : rgba(255, 255, 255, 0.0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius : 5;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius : 5;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-text-fill: turquoise;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".highlight {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: khaki;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#LocationCard {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/two.png\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: contain;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color : linear-gradient(to bottom right, mediumseagreen, midnightblue);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color : linear-gradient(to top left, mediumseagreen, midnightblue);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius : 2.0em;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius : 2.0em;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#userInput {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "  -fx-control-inner-background: rgba(10, 50, 100, 0.75);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "  -fx-text-inner-color: lightseagreen;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dialog .label {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     -fx-text-fill: mediumblue;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dialogFlip .label {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-text-fill: seagreen;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 10,
      "Jefferson111": 116
    }
  },
  {
    "path": "src/main/resources/css/mapStyle.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".mainPane {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/SGmap.jpg\");"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-size: 1200 900;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#LocationCard {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-image: url(\"../images/location_pointer.png\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-size: contain;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "#RouteNodeStart {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-image: url(\"../images/route_node_start.png\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-size: contain;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "#RouteNodeEnd {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-image: url(\"../images/route_node_end.png\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-size: contain;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "#RouteNodeIntermediate {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-image: url(\"../images/route_node_intermediate.png\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: contain;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 17,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/resources/css/staticMapStyle.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": ".mainPane {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-size: 512 512;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 3
    }
  },
  {
    "path": "src/main/resources/view/CalendarCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cStackPane fx:id\u003d\"calendarCard\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "           onMouseClicked\u003d\"#onClick\" onMouseEntered\u003d\"#onMouseEnter\" onMouseExited\u003d\"#onMouseExit\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    \u003cLabel fx:id\u003d\"agenda\" text\u003d\"1\" StackPane.alignment\u003d\"TOP_RIGHT\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cLabel fx:id\u003d\"task\" StackPane.alignment\u003d\"TOP_LEFT\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cLabel fx:id\u003d\"description\" StackPane.alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Jefferson111": 14
    }
  },
  {
    "path": "src/main/resources/view/CalendarWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "         title\u003d\"Calendar\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cVBox fx:id\u003d\"pane\" styleClass\u003d\"calendar\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                  maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003cStackPane alignment\u003d\"BASELINE_CENTER\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                           maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cInsets top\u003d\"10.0\" left\u003d\"10\" right\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cButton styleClass\u003d\"arrow-button\" StackPane.alignment\u003d\"BASELINE_LEFT\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                            onAction\u003d\"#previousMonth\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText fx:id\u003d\"calendarTitle\" text\u003d\"Test\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cButton styleClass\u003d\"arrow-button\" StackPane.alignment\u003d\"BASELINE_RIGHT\" onAction\u003d\"#nextMonth\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                            rotate\u003d\"180\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003cGridPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"30.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Sun\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Mon\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Tues\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Wed\" GridPane.columnIndex\u003d\"3\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Thu\" GridPane.columnIndex\u003d\"4\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Fri\" GridPane.columnIndex\u003d\"5\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Sat\" GridPane.columnIndex\u003d\"6\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003cGridPane fx:id\u003d\"gridCalendar\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"800\" hgap\u003d\"5\" vgap\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" right\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 84
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cHBox fx:id\u003d\"dialogBox\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "      prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "   \u003cRegion styleClass\u003d\"region\" prefWidth\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" visible\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "   \u003cHBox fx:id\u003d\"miniBox\" styleClass\u003d\"dialog\" alignment\u003d\"TOP_RIGHT\" spacing\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "      \u003cCircle fx:id\u003d\"circle\" radius\u003d\"25\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/resources/view/DialogBoxImage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003cHBox fx:id\u003d\"dialogBoxImage\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"400.0\" alignment\u003d\"TOP_RIGHT\" spacing\u003d\"10\" styleClass\u003d\"dialog\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\u003cHBox fx:id\u003d\"miniBox\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\t\u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\t\u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\t\u003cCircle fx:id\u003d\"circle\" radius\u003d\"25\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\u003c/HBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\u003cImageView fx:id\u003d\"imageBox\" fitHeight\u003d\"360.0\" fitWidth\u003d\"360.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Inno97": 21
    }
  },
  {
    "path": "src/main/resources/view/DialogBoxMap.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003cHBox fx:id\u003d\"dialogBoxImage\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t  xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"400.0\" alignment\u003d\"TOP_RIGHT\" spacing\u003d\"10\" styleClass\u003d\"dialog\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\u003cHBox fx:id\u003d\"miniBox\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\t\u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\t\u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\t\u003cCircle fx:id\u003d\"circle\" radius\u003d\"25\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\u003c/HBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\u003cAnchorPane fx:id\u003d\"map\" styleClass\u003d\"routeMapPane\" prefWidth\u003d\"360.0\" prefHeight\u003d\"360.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Inno97": 22
    }
  },
  {
    "path": "src/main/resources/view/LocationCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cStackPane fx:id\u003d\"LocationCard\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" minWidth\u003d\"30\" minHeight\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 6
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "         title\u003d\"SGTravel\" minWidth\u003d\"400\" minHeight\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "         \u003cAnchorPane styleClass\u003d\"mainPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                     minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                     xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" onKeyPressed\u003d\"#handleKeyPress\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                       AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" vbarPolicy\u003d\"ALWAYS\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "               \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"sidePanel\" layoutX\u003d\"400.0\" layoutY\u003d\"0.0\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Inno97": 2,
      "-": 16,
      "Jefferson111": 15
    }
  },
  {
    "path": "src/main/resources/view/MapWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "         title\u003d\"Map\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"map\" styleClass\u003d\"mainPane\" prefWidth\u003d\"1200.0\" prefHeight\u003d\"900.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Inno97": 1,
      "Jefferson111": 15
    }
  },
  {
    "path": "src/main/resources/view/PointCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" minWidth\u003d\"30\" minHeight\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cCircle fx:id\u003d\"circle\" radius\u003d\"10\" StackPane.alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/resources/view/SidePanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cAnchorPane styleClass\u003d\"side\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"miniMap\" styleClass\u003d\"sidePane\" StackPane.alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"300.0\" prefWidth\u003d\"400.0\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cStackPane fx:id\u003d\"taskContainer\" layoutY\u003d\"300.0\" prefHeight\u003d\"300.0\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "               prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cLabel fx:id\u003d\"description\" StackPane.alignment\u003d\"TOP_CENTER\" styleClass\u003d\"info\" visible\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cLabel fx:id\u003d\"startDate\" StackPane.alignment\u003d\"CENTER\" styleClass\u003d\"info\" visible\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cLabel fx:id\u003d\"endDate\" StackPane.alignment\u003d\"BOTTOM_CENTER\" styleClass\u003d\"info\" visible\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cInsets bottom\u003d\"100.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 19
    }
  },
  {
    "path": "src/main/resources/view/StaticMapWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "         title\u003d\"Map\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"map\" styleClass\u003d\"mainPane\" prefWidth\u003d\"512.0\" prefHeight\u003d\"512.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/test/java/duke/ModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.ItineraryInsufficientAgendasException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.TransportationMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryFailedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.RouteDuplicateException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.RouteManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.VenueList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Agenda;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.profile.ProfileCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private StorageStub storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private RouteList routes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private TransportationMap map;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ProfileCard profileCard;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private RouteManager routeManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Construct the ModelStub for testing."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ModelStub() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        storage \u003d new StorageStub();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events \u003d new EventList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routes \u003d new RouteList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        map \u003d storage.getMap();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeManager \u003d new RouteManager(routes);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setEvents(EventList events) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventList getEvents() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public TransportationMap getMap() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteList getRoutes() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return routes;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void addRoute(Route route) throws RouteDuplicateException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routes.add(route);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void save() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventList getSortedList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return events.getSortedList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public HashMap\u003cString, BusStop\u003e getBusStops() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return map.getBusStopMap();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the bust stop from the map."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param query The bus stop to query."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The BusStop object."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryFailedException If the bus stop cannot be found."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public BusStop getBusStop(String query) throws QueryFailedException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        HashMap\u003cString, BusStop\u003e allBus \u003d getMap().getBusStopMap();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (allBus.containsKey(query)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return allBus.get(query);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new QueryFailedException(\"BUS_STOP\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public List\u003cBusService\u003e getBusService() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cAgenda\u003e getRecommendations(int numDays, Itinerary itinerary) throws DukeException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cAgenda\u003e recommendations \u003d storage.readVenues(numDays);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        itinerary.setTasks(recommendations);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        storage.writeItineraries(itinerary, 2);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return recommendations;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public VenueList getEventVenues() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new VenueList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Itinerary getItinerary(String name) throws DukeException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return storage.getItinerary(name);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void saveItinerary(Itinerary itinerary) throws FileNotSavedException, ItineraryInsufficientAgendasException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        storage.writeItineraries(itinerary, 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public String listItineraries() throws FileLoadFailException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return storage.readItineraryList();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void itineraryListSave(Itinerary itinerary) throws FileNotSavedException, FileNotFoundException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        storage.writeItinerarySave(itinerary);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Itinerary readRecommendations() throws FileLoadFailException, DukeDateTimeParseException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return storage.readRecommendations();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteManager getRouteManager() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return routeManager;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ProfileCard getProfileCard() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return profileCard;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public boolean isNewUser() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return  storage.getIsNewUser();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return profileCard.getPersonName();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 41,
      "Inno97": 54,
      "hongchuan97": 24,
      "Jefferson111": 46
    }
  },
  {
    "path": "src/test/java/duke/StorageStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeDuplicateTaskException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.ItineraryInsufficientAgendasException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.RecommendationDayExceededException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.RouteNodeDuplicateException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.StorageFileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.TransportationMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.parsers.ParserStorageUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.lists.AgendaList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Agenda;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Todo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.profile.ProfileCard;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class StorageStub {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private RouteList routes;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private TransportationMap map;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private ProfileCard profileCard;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String BUS_FILE_PATH \u003d \"/data/bus.txt\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String RECOMMENDATIONS_FILE_PATH \u003d \"/data/recommendations.txt\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String ITINERARIES_FILE_PATH \u003d \"testItineraries.txt\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String TRAIN_FILE_PATH \u003d \"/data/train.txt\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String EVENTS_FILE_PATH \u003d \"events.txt\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String ROUTES_FILE_PATH \u003d \"routes.txt\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String SAMPLE_RECOMMENDATIONS_FILE_PATH \u003d \"testSamples.txt\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String ITINERARY_LIST_FILE_PATH \u003d \"testItineraryTable.txt\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Constructs a Storage object that contains information from the model."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public StorageStub() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        events \u003d new EventList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        routes \u003d new RouteList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            read();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            logger.log(Level.WARNING, e.getMessage());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Reads all storage file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private void read() throws RouteNodeDuplicateException, CorruptedFileException, StorageFileNotFoundException,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            DukeDuplicateTaskException, DukeDateTimeParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        readBus();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        readTrain();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        readEvent();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        readRoutes();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Reads train from filepath."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private void readTrain() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assert this.map !\u003d null : \"Map must be created first\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        HashMap\u003cString, TrainStation\u003e trainMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Scanner s \u003d new Scanner(getClass().getResourceAsStream(TRAIN_FILE_PATH));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            TrainStation newTrain \u003d ParserStorageUtil.createTrainFromStorage(s.nextLine());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            trainMap.put(newTrain.getDescription(), newTrain);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.map.setTrainMap(trainMap);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Reads bus from filepath."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private void readBus() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        HashMap\u003cString, BusStop\u003e busStopData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        HashMap\u003cString, BusService\u003e busData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Scanner s \u003d new Scanner(getClass().getResourceAsStream(BUS_FILE_PATH));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        boolean isBusData \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            if (\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\".equals(line)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                isBusData \u003d true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            if (isBusData) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                BusService busService \u003d ParserStorageUtil.createBusFromStorage(line);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                busData.put(busService.getBus(), busService);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                BusStop busStop \u003d ParserStorageUtil.createBusStopDataFromStorage(line);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                busStopData.put(busStop.getBusCode(), busStop);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.map \u003d new TransportationMap(busStopData, busData);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Reads events from filepath. Creates empty events if file cannot be read."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws DukeDateTimeParseException   If the datetime of an event cannot be parsed."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws DukeDuplicateTaskException   If there is a duplicate event."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws StorageFileNotFoundException If the file cannot be read."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private void readEvent() throws DukeDuplicateTaskException, DukeDateTimeParseException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            StorageFileNotFoundException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            File f \u003d new File(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                events.add(ParserStorageUtil.createTaskFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new StorageFileNotFoundException(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Reads routes from filepath. Creates empty routes if file cannot be read."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws RouteNodeDuplicateException  If there is a duplicate route that is read."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws CorruptedFileException       If the reading has failed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws StorageFileNotFoundException If the storage file cannot be found."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private void readRoutes() throws RouteNodeDuplicateException, CorruptedFileException, StorageFileNotFoundException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cRoute\u003e newRoutes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            File f \u003d new File(ROUTES_FILE_PATH);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Route newRoute \u003d new Route(new ArrayList\u003c\u003e(), \"\", \"\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                String input \u003d s.nextLine();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                if (input.split(\"\\\\|\", 2)[0].strip().equals(\"route\")) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    if (newRoute.getNumNodes() !\u003d 0) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        newRoutes.add(newRoute);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    newRoute \u003d ParserStorageUtil.createRouteFromStorage(input);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    newRoute.addNode(ParserStorageUtil.createNodeFromStorage(input));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            if (!newRoute.getName().equals(\"\")) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                newRoutes.add(newRoute);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new StorageFileNotFoundException(ROUTES_FILE_PATH);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        routes.setRoutes(newRoutes);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns Venues fetched from stored memory."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return The List of all Venues in Recommendations list."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cAgenda\u003e readVenues(int numDays) throws RecommendationDayExceededException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cAgenda\u003e recommendations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Scanner s \u003d new Scanner(getClass().getResourceAsStream(RECOMMENDATIONS_FILE_PATH));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (numDays \u003e 8) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new RecommendationDayExceededException();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        while (s.hasNext() \u0026\u0026 i \u003c\u003d numDays) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            List\u003cVenue\u003e venueList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            venueList.add(ParserStorageUtil.getVenueFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            List\u003cTodo\u003e todoList \u003d ParserStorageUtil.getTodoListFromStorage(s.nextLine());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            venueList.add(ParserStorageUtil.getVenueFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            todoList.addAll(ParserStorageUtil.getTodoListFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Agenda agenda \u003d new Agenda(todoList, venueList, i++);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            recommendations.add(agenda);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return recommendations;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Writes the tasks into a file of the given filepath."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileNotSavedException If a file cannot be saved."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void write() throws FileNotSavedException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        writeEvents();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        writeRoutes();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Writes the events to local storage."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private void writeEvents() throws FileNotSavedException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            FileWriter writer \u003d new FileWriter(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            for (Event event : events) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                writer.write(ParserStorageUtil.toStorageString(event) + \"\\n\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileNotSavedException(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Writes the events to local storage."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private void writeRoutes() throws FileNotSavedException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            FileWriter writer \u003d new FileWriter(ROUTES_FILE_PATH);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            String routesString \u003d \"\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            for (Route route : routes) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                routesString +\u003d ParserStorageUtil.toRouteStorageString(route);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writer.write(routesString);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileNotSavedException(ROUTES_FILE_PATH);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Writes recommendations to filepath."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void writeItineraries(Itinerary itinerary, int type) throws ItineraryInsufficientAgendasException,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            FileNotSavedException {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String file;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (type \u003d\u003d 1) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            file \u003d ITINERARIES_FILE_PATH;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            file \u003d SAMPLE_RECOMMENDATIONS_FILE_PATH;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            FileWriter writer \u003d new FileWriter(file, true);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writer.write(itinerary.getName() + \"\\n\" + itinerary.getStartDate().toString() + \"\\n\""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    + itinerary.getEndDate().toString() + \"\\n\" + itinerary.getHotelLocation().toString() + \"\\n\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            if (itinerary.getList().size() !\u003d itinerary.getNumberOfDays()) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                throw new ItineraryInsufficientAgendasException();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            for (Agenda agenda : itinerary.getList()) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                writer.write(agenda.toString());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileNotSavedException(file);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Reads recommendations from filepath."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws DukeDateTimeParseException If the datetime cannot be parsed."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileLoadFailException      If the file fails to load."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Itinerary readRecommendations() throws DukeDateTimeParseException, FileLoadFailException {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cAgenda\u003e agendaList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Itinerary itinerary;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            File f \u003d new File(SAMPLE_RECOMMENDATIONS_FILE_PATH);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            String name \u003d s.nextLine();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(s.nextLine());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(s.nextLine());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Venue hotel \u003d ParserStorageUtil.getVenueFromStorage(s.nextLine());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            itinerary \u003d new Itinerary(start, end, hotel, name);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                List\u003cVenue\u003e venueList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                List\u003cTodo\u003e todoList;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                final int number \u003d ParserStorageUtil.getNumberFromStorage(s.nextLine());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                venueList.add(ParserStorageUtil.getVenueFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                venueList.add(ParserStorageUtil.getVenueFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                todoList \u003d ParserStorageUtil.getTodoListFromStorage(s.nextLine());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                Agenda agenda \u003d new Agenda(todoList, venueList, number);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                agendaList.add(agenda);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            itinerary.setTasks(agendaList);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileLoadFailException(new File(SAMPLE_RECOMMENDATIONS_FILE_PATH));"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return itinerary;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Writes the specified itineraries name to the table of contents."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param itinerary This itineraries name is to be stored."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileNotSavedException      If the file fails to save."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void writeItinerarySave(Itinerary itinerary) throws FileNotSavedException {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            File f1 \u003d new File(ITINERARY_LIST_FILE_PATH);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            int linecount \u003d 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            FileReader fr \u003d new FileReader(f1);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            BufferedReader br \u003d new BufferedReader(fr);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            while (br.readLine() !\u003d null) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                linecount++;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            fr.close();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            br.close();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            FileWriter writer \u003d new FileWriter(ITINERARY_LIST_FILE_PATH, true);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writer.write(++linecount + \" | \" + itinerary.getName() + \"\\n\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileNotSavedException(ITINERARY_LIST_FILE_PATH);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns the itinerary list table of contents so user may refer to it and perform showItinerary command."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return Returns the String containing the table of contents"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileLoadFailException   If the file fails to load."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public String readItineraryList() throws FileLoadFailException {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        StringBuilder output \u003d new StringBuilder();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            File f \u003d new File(ITINERARY_LIST_FILE_PATH);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                String input \u003d s.nextLine();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                String number \u003d input.split(\"\\\\|\", 2)[0].strip();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                String name \u003d input.split(\"\\\\|\", 2)[1].strip();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                output.append(number).append(\". \").append(name).append(\"\\n\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileLoadFailException(new File(ITINERARY_LIST_FILE_PATH));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return output.toString();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Retrieves an itinerary from persistent storage based on its name."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param name The itineraries name."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @throws FileLoadFailException   If the file fails to load."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Itinerary getItinerary(String name) throws DukeException {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Itinerary itinerary \u003d null;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            File z \u003d new File(ITINERARIES_FILE_PATH);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Scanner s1 \u003d new Scanner(z);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            AgendaList agendaList \u003d new AgendaList();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            while (s1.hasNext()) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                if (s1.nextLine().equals(name)) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(s1.nextLine());"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(s1.nextLine());"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    Venue hotel \u003d ParserStorageUtil.getVenueFromStorage(s1.nextLine());"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    itinerary \u003d new Itinerary(start, end, hotel, name);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    String s2 \u003d s1.nextLine();"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    while (s2.split(\"\\\\|\")[0].equals(\"Agenda \")) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        List\u003cVenue\u003e venueList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        List\u003cTodo\u003e todoList;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        final int number2 \u003d Integer.parseInt(s2.split(\"\\\\|\")[1]);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        String newVenue \u003d s1.nextLine();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        while (newVenue.contains(\" |\")) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                            venueList.add(ParserStorageUtil.getVenueFromStorage(newVenue));"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                            newVenue \u003d s1.nextLine();"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        todoList \u003d ParserStorageUtil.getTodoListFromStorage(newVenue);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        Agenda agenda \u003d new Agenda(todoList, venueList, number2);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        agendaList.add(agenda);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        if (s1.hasNextLine()) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                            s2 \u003d s1.nextLine();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        } else {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            s1.close();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            assert itinerary !\u003d null;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            itinerary.setTasks(agendaList);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            return itinerary;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (FileNotFoundException | DukeDateTimeParseException e) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new FileLoadFailException(new File(ITINERARY_LIST_FILE_PATH));"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public EventList getEvents() {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public TransportationMap getMap() {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return this.map;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public RouteList getRoutes() {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return routes;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public boolean getIsNewUser() {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return profileCard.isNewUser();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 430
    }
  },
  {
    "path": "src/test/java/duke/UiStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class UiStub {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiStub(VBox dialogContainer) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDuplicateTaskException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"NUS\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(event);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        addCommand.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(model.getEvents().contains(event));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(DukeDuplicateTaskException.class, () -\u003e addCommand.execute(model));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event2 \u003d new Event(\"NTU\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AddCommand addCommand2 \u003d new AddCommand(event2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        addCommand2.execute(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(model.getEvents().contains(event));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(model.getEvents().contains(event2));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 32
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/CommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class CommandTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new HelpCommand() instanceof Command);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new ListCommand() instanceof Command);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new ExitCommand() instanceof Command);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new EditorCommand() instanceof Command);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new EditCommand(true, new EventList()) instanceof Command);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new EditCommand(false, new EventList()) instanceof Command);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new PromptCommand(\"hi\") instanceof Command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new ViewScheduleCommand() instanceof Command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 21
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Sentosa\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model.getEvents().add(event);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        deleteCommand.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(model.getEvents().contains(event));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e deleteCommand.execute(model));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        DeleteCommand d2 \u003d new DeleteCommand(99999);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e d2.execute(model));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        DeleteCommand d3 \u003d new DeleteCommand(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e d3.execute(model));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        DeleteCommand d4 \u003d new DeleteCommand(-2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e d4.execute(model));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        DeleteCommand d5 \u003d new DeleteCommand(1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e d5.execute(model));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 11,
      "Jefferson111": 24
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class EditCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void execute() throws FileNotSavedException, CorruptedFileException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(false, new EventList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        CommandResultText resultText \u003d editCommand.execute(modelStub);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(resultText.getMessage(), \"Edit is cancelled. Changes are not saved.\\n\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(resultText.getMessage(), \"Edit is cancelled. Changes are not saved.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditCommand editCommand1 \u003d new EditCommand(true, new EventList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        CommandResultText resultText1 \u003d editCommand1.execute(modelStub);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(resultText1.getMessage(), \"Here are the list of events:\\n\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(resultText1.getMessage(), \"Here are the list of events:\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 27
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class ExitCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Command c \u003d new ExitCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(c.execute(model) instanceof CommandResultExit);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Jefferson111": 18
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Command c \u003d new FindCommand(\"meow\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(c.execute(modelStub) instanceof CommandResultText);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Command b \u003d new FindCommand(\"moo\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(b.execute(modelStub) instanceof CommandResultText);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Jefferson111": 20
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws DukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Command c \u003d new HelpCommand();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(c.execute(modelStub) instanceof CommandResultText);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Jefferson111": 18
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/LocationSearchCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class LocationSearchCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String SENTOSA_MESSAGE"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \u003d \"These are the coordinates of your search:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"SENTOSA\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"1.2498144130047 103.82948052356899\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for a regular search"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        LocationSearchCommand locationSearchCommand1 \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (LocationSearchCommand) Parser.parseComplexCommand(\"search sentosa\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(SENTOSA_MESSAGE, locationSearchCommand1.execute(model).getMessage());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test where the api returns no result"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(ApiNullRequestException.class, () -\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Parser.parseComplexCommand(\"search invalid location\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test where the request times out"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(ApiTimeoutException.class, () -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Parser.parseComplexCommand(\"search #\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 40,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/MarkDoneCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "class MarkDoneCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"NUS\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(event);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        addCommand.execute(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        MarkDoneCommand markDoneCommand \u003d new MarkDoneCommand(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        markDoneCommand.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(model.getEvents().get(0).isDone());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 12,
      "Jefferson111": 14
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/RecommendationsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "class RecommendationsCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime startDate \u003d LocalDateTime.of(2019, 9, 9, 9, 9);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime endDate \u003d LocalDateTime.of(2019, 9, 13, 9, 9);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Venue hotel \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                103.753758637401, 0, 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Itinerary itinerary \u003d new Itinerary(startDate,endDate,hotel, \"Test\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        RecommendationsCommand recommendationsCommand \u003d new RecommendationsCommand(itinerary);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        CommandResultText commandResult \u003d recommendationsCommand.execute(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String result1 \u003d commandResult.getMessage();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertEquals(result1, itinerary.printItinerary());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        File file \u003d new File(\"testSamples.txt\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        file.delete();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 35,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/RouteAddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteAddCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"2113\", null);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteAddCommand) Parser.parseComplexCommand(\"routeAdd 2113\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(route.getName(), model.getRoutes().get(0).getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 26,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/RouteDeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteDeleteCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteAddCommand) Parser.parseComplexCommand(\"routeAdd 2113\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteDeleteCommand routeDeleteCommand1 \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteDeleteCommand) Parser.parseComplexCommand(\"routeDelete 1\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeDeleteCommand1.execute(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, model.getRoutes().size());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for deleting non-existant route"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteDeleteCommand routeDeleteCommand2 \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteDeleteCommand) Parser.parseComplexCommand(\"routeDelete 1\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeDeleteCommand2.execute(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 36,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/RouteEditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.UnknownFieldException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteEditCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteAddCommand) Parser.parseComplexCommand(\"routeAdd 2113\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteEditCommand routeEditCommand1 \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteEditCommand) Parser.parseComplexCommand(\"routeEdit 1 name 2113T\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeEditCommand1.execute(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"2113T\", model.getRoutes().get(0).getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for editing non-existant route"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteEditCommand routeEditCommand2 \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteEditCommand) Parser.parseComplexCommand(\"routeEdit 2 name 2113T\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeEditCommand2.execute(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteEditCommand routeEditCommand3 \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteEditCommand) Parser.parseComplexCommand(\"routeEdit 1 description 2113T\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeEditCommand3.execute(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"2113T\", model.getRoutes().get(0).getDescription());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for editing non-existant field"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteEditCommand routeDeleteCommand4 \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteEditCommand) Parser.parseComplexCommand(\"routeEdit 1 test 2113T\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(UnknownFieldException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeDeleteCommand4.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 48,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/RouteNodeAddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteNodeAddCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"2113\", null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRoutes().add(route);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for ExceptionInInitializerError exception, as it is thrown as a result of the image generated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //after the command has been executed"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(ExceptionInInitializerError.class, () -\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteNodeAddCommand routeNodeAddCommand1 \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    (RouteNodeAddCommand) Parser.parseComplexCommand(\"routeNodeAdd 1 at 66211 by bus\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeAddCommand1.execute(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(model.getRoutes().get(0).getNode(0) instanceof BusStop);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop busStop \u003d new BusStop(\"66211\", null, null, 0.0, 0.0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop newBusStop \u003d (BusStop) model.getRoutes().get(0).getNode(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(busStop.getBusCode(), newBusStop.getBusCode());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        //negative test for adding to non-existent route"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeAddCommand routeNodeAddCommand2 \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeAddCommand) Parser.parseComplexCommand(\"routeNodeAdd 2 at 66211 by bus\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeAddCommand2.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 46,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/RouteNodeDeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteNodeDeleteCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteAddCommand) Parser.parseComplexCommand(\"routeAdd 2113\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop newNode \u003d new BusStop(\"66211\", \"\", \"\", 0, 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        newNode.fetchData(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRoutes().get(0).addNode(newNode);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(model.getRoutes().get(0).getNode(0) instanceof BusStop);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeDeleteCommand routeNodeDeleteCommand \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeDeleteCommand) Parser.parseComplexCommand(\"routeNodeDelete 1 1\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeNodeDeleteCommand.execute(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(model.getRoutes().get(0).getNumNodes() \u003d\u003d 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for deleting non-existant route node"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeDeleteCommand routeNodeDeleteCommand3 \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeDeleteCommand) Parser.parseComplexCommand(\"routeNodeDelete 1 1\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeDeleteCommand3.execute(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteDeleteCommand routeDeleteCommand \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteDeleteCommand) Parser.parseComplexCommand(\"routeDelete 1\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeDeleteCommand.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for deleting non-existant route node in non-existant route"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeDeleteCommand routeNodeDeleteCommand4 \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeDeleteCommand) Parser.parseComplexCommand(\"routeNodeDelete 1 1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeDeleteCommand4.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 53,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/RouteNodeEditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.InputNotDoubleException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.UnknownConstraintException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteNodeEditCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d new RouteAddCommand(\"2113\", \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop newNode \u003d new BusStop(\"66211\", \"\", \"\", 0, 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        newNode.fetchData(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRoutes().get(0).addNode(newNode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(model.getRoutes().get(0).getNode(0) instanceof BusStop);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeEditCommand routeNodeEditCommand1 \u003d new RouteNodeEditCommand(0, 0, \"address\", \"2113T\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeNodeEditCommand1.execute(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"2113T\", model.getRoutes().get(0).getNode(0).getAddress());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeEditCommand routeNodeEditCommand2 \u003d new RouteNodeEditCommand(0, 0, \"description\", \"2113T\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeNodeEditCommand2.execute(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"2113T\", model.getRoutes().get(0).getNode(0).getDescription());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeEditCommand routeNodeEditCommand3 \u003d new RouteNodeEditCommand(0, 0, \"type\", \"BUS\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeNodeEditCommand3.execute(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Constraint.valueOf(\"BUS\"), model.getRoutes().get(0).getNode(0).getType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for a constraint that does not exist"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeEditCommand routeNodeEditCommand4 \u003d new RouteNodeEditCommand(0, 0, \"type\", \"2113T\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(UnknownConstraintException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeEditCommand4.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeEditCommand routeNodeEditCommand5 \u003d new RouteNodeEditCommand(0, 0, \"latitude\", \"2113\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeNodeEditCommand5.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(2113, model.getRoutes().get(0).getNode(0).getLatitude());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for latitude that cannot be converted to a Double"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeEditCommand routeNodeEditCommand6 \u003d new RouteNodeEditCommand(0, 0, \"latitude\", \"NOT_DOUBLE\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(InputNotDoubleException.class, () -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeEditCommand6.execute(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeEditCommand routeNodeEditCommand7 \u003d new RouteNodeEditCommand(0, 0, \"longitude\", \"2113\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeNodeEditCommand7.execute(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(2113, model.getRoutes().get(0).getNode(0).getLongitude());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for longitude that cannot be converted to a Double"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeEditCommand routeNodeEditCommand8 \u003d new RouteNodeEditCommand(0, 0, \"longitude\", \"NOT_DOUBLE\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(InputNotDoubleException.class, () -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeEditCommand8.execute(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 68,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/RouteNodeShowCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteNodeShowCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteAddCommand) Parser.parseComplexCommand(\"routeAdd 2113\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop newNode \u003d new BusStop(\"66211\", \"\", \"\", 0, 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        newNode.fetchData(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRoutes().get(0).addNode(newNode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeListCommand routeNodeListCommand \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeListCommand) Parser.parseComplexCommand(\"routeNodeList 1 1\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        CommandResultText result \u003d routeNodeListCommand.execute(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"Here is the information of the Bus Stop:\\n66211\\nBerwick Dr\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"\\n(BUS, 1.36412138937997, 103.86103467229529)\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, result.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for non-existing route"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeListCommand routeNodeListCommand2 \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeListCommand) Parser.parseComplexCommand(\"routeNodeList 2 1\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeListCommand2.execute(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for non-existing route node in existing route"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeListCommand routeNodeListCommand3 \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeListCommand) Parser.parseComplexCommand(\"routeNodeList 1 2\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeListCommand3.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for negative values in non-existing route"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeListCommand routeNodeListCommand4 \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeListCommand) Parser.parseComplexCommand(\"routeNodeList -2 1\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeListCommand4.execute(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for negative values in non-existing route node in existing route"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeListCommand routeNodeListCommand5 \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeListCommand) Parser.parseComplexCommand(\"routeNodeList 1 -2\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeListCommand5.execute(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 65,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/RouteShowCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteShowCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"Here is the information of the Route:\\n2113\\n\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteAddCommand) Parser.parseComplexCommand(\"routeAdd 2113\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteListCommand routeListCommand1 \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteListCommand) Parser.parseComplexCommand(\"routeList 1\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        CommandResultText result \u003d routeListCommand1.execute(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, result.getMessage());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for non-existing route"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteListCommand routeListCommand2 \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteListCommand) Parser.parseComplexCommand(\"routeList 2\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeListCommand2.execute(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for index 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteListCommand routeListCommand3 \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteListCommand) Parser.parseComplexCommand(\"routeList 0\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeListCommand3.execute(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for negative index"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteListCommand routeListCommand4 \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteListCommand) Parser.parseComplexCommand(\"routeList -1\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeListCommand4.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 53,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/test/java/duke/logic/conversations/ConversationManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.RouteManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.PromptCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class ConversationManagerTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void converse() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"delete\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(conversationManager.getCommand() instanceof PromptCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"Travel the Seven seas\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(conversationManager.getCommand() instanceof PromptCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(conversationManager.getCommand() instanceof DeleteCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void clearContext() throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"done\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(conversationManager.getCommand() instanceof PromptCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.clearContext();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(NullPointerException.class, conversationManager::getCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getCommand() throws DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"delete\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(conversationManager.getCommand() instanceof PromptCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 5,
      "Jefferson111": 37
    }
  },
  {
    "path": "src/test/java/duke/logic/conversations/DeleteConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class DeleteConversationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        DeleteConversation deleteConversation \u003d new DeleteConversation();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        deleteConversation.execute(\"one\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(deleteConversation.isFinished());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void buildResult() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        DeleteConversation deleteConversation \u003d new DeleteConversation();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        deleteConversation.execute(\"1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(deleteConversation.isFinished());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        deleteConversation.buildResult();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(\"delete 1\", deleteConversation.getResult());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 26
    }
  },
  {
    "path": "src/test/java/duke/logic/conversations/RouteAddConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.RouteManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteAddConversationTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void converse() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeAdd\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"test_route\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeAdd test_route desc test_description\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"test_description\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 28
    }
  },
  {
    "path": "src/test/java/duke/logic/conversations/RouteDeleteConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.RouteManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteDeleteConversationTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void converse() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeDelete\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeDelete 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 31
    }
  },
  {
    "path": "src/test/java/duke/logic/conversations/RouteEditConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.RouteManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteEditConversationTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testForName() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeEdit\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-existant field"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_field\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_ROUTE_FIELD, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"name\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeEdit 1 name test_name\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"test_name\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testForDescription() throws DukeException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeEdit\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-existant field"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_field\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_ROUTE_FIELD, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"description\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeEdit 1 description test_description\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"test_description\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 70
    }
  },
  {
    "path": "src/test/java/duke/logic/conversations/RouteGenerateConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.RouteManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteGenerateConversationTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testForBus() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeGenerate\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"amk hub\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"nus\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-existant field"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_field\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.ERROR_CONSTRAINT_UNKNOWN, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeGenerate amk hub to nus by bus\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"bus\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testForTrain() throws DukeException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeGenerate\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"amk hub\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"nus\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-existant field"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_field\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.ERROR_CONSTRAINT_UNKNOWN, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeGenerate amk hub to nus by mrt\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"mrt\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 60
    }
  },
  {
    "path": "src/test/java/duke/logic/conversations/RouteListConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.RouteManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteListConversationTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void converse() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeList\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeList 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 31
    }
  },
  {
    "path": "src/test/java/duke/logic/conversations/RouteNodeAddConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.RouteManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeAddConversationTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testForBus() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeNodeAdd\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer for first index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer for second index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-existant constraint"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_constraint\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.ERROR_CONSTRAINT_UNKNOWN, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"bus\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeNodeAdd 1 1 at 17009 by bus\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"17009\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testForTrain() throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeNodeAdd\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer for first index"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer for second index"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-existant constraint"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_constraint\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.ERROR_CONSTRAINT_UNKNOWN, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"mrt\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeNodeAdd 1 1 at 17009 by mrt\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"17009\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 86
    }
  },
  {
    "path": "src/test/java/duke/logic/conversations/RouteNodeDeleteConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.RouteManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeDeleteConversationTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void converse() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeNodeDelete\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer for first index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer for first index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeNodeDelete 1 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 39
    }
  },
  {
    "path": "src/test/java/duke/logic/conversations/RouteNodeEditConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.RouteManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeEditConversationTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testForAddress() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeNodeEdit\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-existant field"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_field\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_ROUTENODE_FIELD, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"address\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeNodeEdit 1 1 address test_address\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"test_address\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testForDescription() throws DukeException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeNodeEdit\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-existant field"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_field\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_ROUTENODE_FIELD, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"description\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeNodeEdit 1 1 description test_description\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"test_description\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testForType() throws DukeException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeNodeEdit\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-existant field"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_field\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_ROUTENODE_FIELD, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"type\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeNodeEdit 1 1 type test_type\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"test_type\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testForLatitude() throws DukeException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeNodeEdit\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-existant field"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_field\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_ROUTENODE_FIELD, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"latitude\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeNodeEdit 1 1 latitude test_latitude\";"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"test_latitude\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void testForLongitude() throws DukeException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeNodeEdit\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-existant field"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_field\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_ROUTENODE_FIELD, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"longitude\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeNodeEdit 1 1 longitude test_longitude\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"test_longitude\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 194
    }
  },
  {
    "path": "src/test/java/duke/logic/conversations/RouteNodeListConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.RouteManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteNodeListConversationTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void converse() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager(new RouteManager(new RouteList()));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"routeNodeList\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, put in non-integer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"not_an_int\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertFalse(conversationManager.isFinished());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Messages.PROMPT_NOT_INT, conversationManager.getPrompt());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"routeNodeList 1 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(conversationManager.isFinished());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, conversationManager.getResult());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 39
    }
  },
  {
    "path": "src/test/java/duke/logic/edits/EditorManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.edits;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.EmptyVenueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.EventNotSelectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.PromptCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.PanelResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.VenueList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class EditorManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void activate() throws DukeException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(EmptyVenueException.class, () -\u003e EditorManager.activate(new EventList(), new VenueList()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event e \u003d new Event(\"Pulau Tekong\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(e.getLocation());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.activate(events, venues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void deactivate() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.deactivate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(EditorManager.isActive());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void isActive() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.deactivate();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(EditorManager.isActive());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event e \u003d new Event(\"Pulau Tekong\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(e.getLocation());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.activate(events, venues);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.isActive());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void edit() throws DukeException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.deactivate();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event e \u003d new Event(\"Pulau Tekong\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(e.getLocation());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event e2 \u003d new Event(\"Tuas\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(e2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(e2.getLocation());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.activate(events, venues);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.isActive());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(EventNotSelectedException.class, () -\u003e EditorManager.edit(\"Yew Tee\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.edit(KeyCode.ENTER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.edit(\"Yew Tee\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.edit(KeyCode.DOWN);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.edit(\"Mon\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.edit(KeyCode.DOWN);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.edit(\"Mon\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.edit(KeyCode.DOWN);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.edit(\"Boon lay\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.edit(\"x\") instanceof EditCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void testEdit() throws DukeException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.deactivate();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(EditorManager.isActive());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event e \u003d new Event(\"Pulau Tekong\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(e.getLocation());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.activate(events, venues);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        PanelResult result \u003d EditorManager.edit(KeyCode.K);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(result.isReady());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d EditorManager.edit(KeyCode.UP);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(result.isReady());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d EditorManager.edit(KeyCode.ENTER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(result.isReady());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d EditorManager.edit(KeyCode.ENTER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(result.isReady());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d EditorManager.edit(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(result.isReady());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d EditorManager.edit(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(result.isReady());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 103
    }
  },
  {
    "path": "src/test/java/duke/logic/edits/EditorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.edits;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.EventSelectionOutOfBoundsException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class EditorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int DESCRIPTION \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int START_DATE \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int END_DATE \u003d 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void edit() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getDescription(), \"Pulau Ubin\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Editor.edit(\"Geylang\", event, DESCRIPTION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getDescription(), \"Geylang\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Editor.edit(\"Geylang\", event, DESCRIPTION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getDescription(), \"Geylang\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(ApiNullRequestException.class, () -\u003e Editor.edit(\"gwhore\", event, DESCRIPTION));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getDescription(), \"Geylang\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(event.getDescription(), \"gwhore\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(DukeDateTimeParseException.class, () -\u003e Editor.edit(\"non\", event, START_DATE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(DukeDateTimeParseException.class, () -\u003e Editor.edit(\"non\", event, END_DATE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime date \u003d ParserTimeUtil.parseStringToDate(\"01/01/18\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Editor.edit(\"01/01/18\", event, START_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getStartDate().toLocalDate(), date.toLocalDate());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(event.getStartDate(), startDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Editor.edit(\"02/02/18\", event, END_DATE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getEndDate().toLocalDate(), ParserTimeUtil.parseStringToDate(\"02/02/18\").toLocalDate());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(event.getEndDate(), endDate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(EventSelectionOutOfBoundsException.class, () -\u003e Editor.edit(\"meow\", event, -1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(EventSelectionOutOfBoundsException.class, () -\u003e Editor.edit(\"meow\", event, 3));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 48
    }
  },
  {
    "path": "src/test/java/duke/logic/parsers/ConversationParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeUnknownCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.RouteManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.DeleteConversation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.FindConversation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.FindPathConversation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.FreeTimeConversation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.GetBusStopConversation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.MarkDoneConversation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.SearchConversation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class ConversationParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void parse() throws DukeUnknownCommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(ConversationParser.parse(\"done\", new RouteManager(new RouteList()))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                instanceof MarkDoneConversation);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(ConversationParser.parse(\"delete\", new RouteManager(new RouteList()))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                instanceof DeleteConversation);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(ConversationParser.parse(\"find\", new RouteManager(new RouteList()))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                instanceof FindConversation);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(ConversationParser.parse(\"findtime\", new RouteManager(new RouteList()))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                instanceof FreeTimeConversation);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(ConversationParser.parse(\"busStop\", new RouteManager(new RouteList()))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                instanceof GetBusStopConversation);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(ConversationParser.parse(\"findPath\", new RouteManager(new RouteList()))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                instanceof FindPathConversation);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(ConversationParser.parse(\"search\", new RouteManager(new RouteList()))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                instanceof SearchConversation);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(DukeUnknownCommandException.class,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            () -\u003e ConversationParser.parse(\"sdasds\", new RouteManager(new RouteList())));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(DukeUnknownCommandException.class,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            () -\u003e ConversationParser.parse(\"deleteeee\", new RouteManager(new RouteList())));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(DukeUnknownCommandException.class,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            () -\u003e ConversationParser.parse(\"DElete\", new RouteManager(new RouteList())));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 22,
      "Jefferson111": 22
    }
  },
  {
    "path": "src/test/java/duke/logic/parsers/ParserStorageUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "class ParserStorageUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void createTaskFromDate() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"NTU\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event check \u003d ParserStorageUtil.createTaskFromStorage(ParserStorageUtil.toStorageString(event));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(check.isDone());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(check.getDescription(), \"NTU\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 14,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/test/java/duke/logic/parsers/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.MarkDoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void parse() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"bye\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"done 1\") instanceof MarkDoneCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 19
    }
  },
  {
    "path": "src/test/java/duke/logic/parsers/ParserTimeUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "class ParserTimeUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    void parseStringToDate() throws DukeDateTimeParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.of(2019, 9, 9, 9, 9);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(date, ParserTimeUtil.parseStringToDate(\"09/09/2019 0909\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/test/java/duke/logic/parsers/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.InputNotIntException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Todo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class ParserUtilTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void createTodo() throws Exception {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(ParserUtil.createTodo(\"todo Homework\") instanceof Todo);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getFieldInList() throws Exception {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String inputString \u003d \"done 1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, ParserUtil.getFieldInList(0, 1, inputString.strip().split(\" \", 2)[1]));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        expected \u003d \"done\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, ParserUtil.getFieldInList(0, 2, inputString));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        expected \u003d \"1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, ParserUtil.getFieldInList(1, 2, inputString));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getIndexInList() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String inputString \u003d \"done 1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int expected \u003d 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, ParserUtil.getIntegerInList(0, 1, inputString.strip().split(\" \", 2)[1]));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for zero"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        inputString \u003d \"done 0\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        expected \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, ParserUtil.getIntegerInList(0, 1, inputString.strip().split(\" \", 2)[1]));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for negative integers"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        inputString \u003d \"done -1\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        expected \u003d -1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, ParserUtil.getIntegerInList(0, 1, inputString.strip().split(\" \", 2)[1]));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for empty input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(InputNotIntException.class, () -\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserUtil.getIntegerInList(0, 1, \"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, input is not integer"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String inputString3 \u003d \"done NotInt\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(InputNotIntException.class, () -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserUtil.getIntegerInList(0, 1, inputString3.strip().split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void getIntegerIndexInList() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String inputString \u003d \"done 1\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int expected \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, ParserUtil.getIntegerIndexInList(0, 1, inputString.strip().split(\" \", 2)[1]));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for zero"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        inputString \u003d \"done 0\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        expected \u003d -1;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, ParserUtil.getIntegerIndexInList(0, 1, inputString.strip().split(\" \", 2)[1]));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for negative integers"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        inputString \u003d \"done -1\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        expected \u003d -2;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, ParserUtil.getIntegerIndexInList(0, 1, inputString.strip().split(\" \", 2)[1]));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for empty input"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(InputNotIntException.class, () -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserUtil.getIntegerIndexInList(0, 1, \"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, input is not integer"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String inputString3 \u003d \"done NotInt\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(InputNotIntException.class, () -\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserUtil.getIntegerIndexInList(0, 1, inputString3.strip().split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, test for out of bounds"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String finalInputString1 \u003d \"done 1\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserUtil.getIntegerIndexInList(-1, 1, finalInputString1.strip().split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test, test for out of bounds"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String finalInputString2 \u003d \"done 1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserUtil.getIntegerIndexInList(2, 1, finalInputString2.strip().split(\" \", 2)[1]);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 86,
      "Jefferson111": 17
    }
  },
  {
    "path": "src/test/java/duke/logic/parsers/PromptParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.PromptCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class PromptParserTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void parseCommand() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(PromptParser.parseCommand(\"foo\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(PromptParser.parseCommand(\"Nice! I need more.\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 16
    }
  },
  {
    "path": "src/test/java/duke/logic/selectors/EventFieldSelectorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class EventFieldSelectorTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventFieldSelector selector \u003d new EventFieldSelector();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void feedKeyCode() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventFieldSelector selector \u003d new EventFieldSelector();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.UP);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.DOWN);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.DOWN);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 1);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.UP);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 29
    }
  },
  {
    "path": "src/test/java/duke/logic/selectors/LocationHelperTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class LocationHelperTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void checkDirection() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401, 0, 0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Venue v2 \u003d new Venue(\"Tuas Checkpoint\", 1.34942405517095, 103.636127935782, 0, 0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(LocationHelper.checkDirection(KeyCode.UP, v2, v1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(LocationHelper.checkDirection(KeyCode.DOWN, v1, v2));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(LocationHelper.checkDirection(KeyCode.RIGHT, v2, v1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(LocationHelper.checkDirection(KeyCode.LEFT, v1, v2));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 22
    }
  },
  {
    "path": "src/test/java/duke/logic/selectors/LocationSelectorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.EmptyVenueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.VenueList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class LocationSelectorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401, 0, 0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue v2 \u003d new Venue(\"Tuas Checkpoint\", 1.34942405517095, 103.636127935782, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getIndex() throws EmptyVenueException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(EmptyVenueException.class, () -\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            new LocationSelector(new VenueList());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocationSelector selector \u003d new LocationSelector(venues);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void feedKeyCode() throws EmptyVenueException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocationSelector selector \u003d new LocationSelector(venues);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.LEFT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.LEFT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.RIGHT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.RIGHT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.DOWN);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.DOWN);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.UP);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.UP);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void unlock() throws EmptyVenueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocationSelector selector \u003d new LocationSelector(venues);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(selector.isLock());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.unlock();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(selector.isLock());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.ENTER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(selector.isLock());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.unlock();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(selector.isLock());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void isLock() throws EmptyVenueException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocationSelector selector \u003d new LocationSelector(venues);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(selector.isLock());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.K);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(selector.isLock());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.UP);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(selector.isLock());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.ENTER);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(selector.isLock());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.ENTER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(selector.isLock());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.K);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(selector.isLock());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.UP);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(selector.isLock());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 91
    }
  },
  {
    "path": "src/test/java/duke/model/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401, 0, 0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue v2 \u003d new Venue(\"Tuas Checkpoint\", 1.34942405517095, 103.636127935782, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void testToString() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.toString(), \"[E][✘] Pulau Ubin between \" + startDate + \" and \" + endDate);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(event.toString(), \"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getLocation() throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(event.getLocation(), v1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setLocation(v1);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getLocation(), v1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setLocation() throws DukeException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setLocation(v1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getLocation(), v1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setLocation(v1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getLocation(), v1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setLocation(v2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(event.getLocation(), v2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void isSameTask() throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event1 \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(event.isSameTask(event1));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(event1.isSameTask(event));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setLocation(v1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(event.isSameTask(event1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(event1.isSameTask(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event1.setLocation(v1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(event.isSameTask(event1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(event1.isSameTask(event));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 67
    }
  },
  {
    "path": "src/test/java/duke/model/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Task task \u003d new Task(\"Go hotel\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setDescription() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDescription(\"SMU\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(task.getDescription(), \"SMU\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDescription(\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(task.getDescription(), \"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDescription(\"\\\\\\\\\\\\\\\\\\\\\\\\\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(task.getDescription(), \"\\\\\\\\\\\\\\\\\\\\\\\\\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(task.getDescription(), \"Go hotel\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(task.getDescription(), \"go hotel\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(task.getDescription(), \"Go Hotel\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(task.getDescription(), \"\\\\\\\\\\\\\\\\\\\\\\\\\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(task.getDescription(), \"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void isDone() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(task.isDone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(task.isDone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setDone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(task.isDone());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(task.isDone());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(task.isDone());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDone(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(task.isDone());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDone(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(task.isDone());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void isSameTask() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(task.isSameTask(task));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(task.isSameTask(new Task(\"Go hotel\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(task.isSameTask(new Task(\"\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(task.isSameTask(new Task(\"\\\\\\\\\\\\\\\\\\\\\\\\\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(task.toString(), \"[✘] Go hotel\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(task.toString(), \"[✓] Go hotel\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setDone(true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(task.toString(), \"[✓] Go hotel\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(task.toString(), \"[✘] Go hotel\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(task.toString(), \"letoh oG ]✘[\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 69
    }
  },
  {
    "path": "src/test/java/duke/model/lists/EventListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDuplicateTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class EventListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void add() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(DukeDuplicateTaskException.class, () -\u003e events.add(event));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void isEmpty() throws DukeException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(events.isEmpty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(events.isEmpty());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event1 \u003d new Event(\"Orchard\", startDate, endDate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(events.isEmpty());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void contains() throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(events.contains(event));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(events.contains(event));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void size() throws DukeException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.size(), 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.size(), 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.remove(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.size(), 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void get() throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        final Event event \u003d new Event(\"Pulau Ubin\", startDate, endDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e events.get(0));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e events.get(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e events.get(-1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(0), event);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e events.get(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e events.get(-1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void sort() throws DukeException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate.plusDays(5), endDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event1 \u003d new Event(\"Woodlands\", startDate.minusDays(2), endDate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event2 \u003d new Event(\"Jurong east\", startDate, endDate.plusDays(5));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event3 \u003d new Event(\"Kranji\", startDate, endDate.minusDays(2));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event4 \u003d new Event(\"Tampines mrt\", startDate, endDate);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event2);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event3);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event4);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.sort();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(0), event1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(1), event3);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(2), event4);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(3), event2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(4), event);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.sort();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(0), event1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(1), event3);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(2), event4);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(3), event2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(4), event);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event5 \u003d new Event(\"City Hall mrt\", startDate.minusDays(10), endDate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event5);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.sort();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(0), event5);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(1), event1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(2), event3);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(3), event4);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(4), event2);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(5), event);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getSortedList() throws DukeException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate.plusDays(5), endDate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event1 \u003d new Event(\"Woodlands\", startDate.minusDays(2), endDate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event2 \u003d new Event(\"Jurong east\", startDate, endDate.plusDays(5));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event3 \u003d new Event(\"Kranji\", startDate, endDate.minusDays(2));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event4 \u003d new Event(\"Tampines mrt\", startDate, endDate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event2);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event3);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event4);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events1 \u003d events.getSortedList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(0), event1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(1), event3);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(2), event4);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(3), event2);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(4), event);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events2 \u003d events.getSortedList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(events2, events1);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event5 \u003d new Event(\"City Hall mrt\", startDate.minusDays(10), endDate);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event5);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events1 \u003d events.getSortedList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(0), event5);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(1), event1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(2), event3);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(3), event4);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(4), event2);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events1.get(5), event);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(0), event);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(1), event1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(2), event2);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(3), event3);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(4), event4);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(events.get(5), event5);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void iterator() throws DukeException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event e: events) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            assertEquals(e, events.get(i));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate.plusDays(5), endDate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event1 \u003d new Event(\"Woodlands\", startDate.minusDays(2), endDate);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event2 \u003d new Event(\"Jurong east\", startDate, endDate.plusDays(5));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event3 \u003d new Event(\"Kranji\", startDate, endDate.minusDays(2));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event4 \u003d new Event(\"Tampines mrt\", startDate, endDate);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event2);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event3);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event4);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        i \u003d 0;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event e: events) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            assertEquals(e, events.get(i));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setEvents() throws DukeException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        List\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate.plusDays(5), endDate);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event1 \u003d new Event(\"Woodlands\", startDate.minusDays(2), endDate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event2 \u003d new Event(\"Jurong east\", startDate, endDate.plusDays(5));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event3 \u003d new Event(\"Kranji\", startDate, endDate.minusDays(2));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event4 \u003d new Event(\"Tampines mrt\", startDate, endDate);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event1);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event2);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event3);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event4);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList eventList \u003d new EventList();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        eventList.setEvents(events);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event2);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(DukeDuplicateTaskException.class, () -\u003e eventList.setEvents(events));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void remove() throws DukeException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime startDate \u003d ParserTimeUtil.parseStringToDate(\"12/12/12\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime endDate \u003d ParserTimeUtil.parseStringToDate(\"06/06/18\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Pulau Ubin\", startDate.plusDays(5), endDate);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event1 \u003d new Event(\"Woodlands\", startDate.minusDays(2), endDate);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event2 \u003d new Event(\"Jurong east\", startDate, endDate.plusDays(5));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event3 \u003d new Event(\"Kranji\", startDate, endDate.minusDays(2));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event4 \u003d new Event(\"Tampines mrt\", startDate, endDate);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event1);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event2);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event3);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(event4);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(events.contains(event));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.remove(0);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(events.contains(event));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.remove(0);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(events.contains(event1));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.remove(0);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(events.contains(event2));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e events.remove(-1));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e events.remove(2));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 236
    }
  },
  {
    "path": "src/test/java/duke/model/locations/VenueTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class VenueTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401, 0, 0);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue v2 \u003d new Venue(\"Tuas Checkpoint\", 1.34942405517095, 103.636127935782, 0, 0);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getAddress() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v1.getAddress(), \"YEW TEE INDUSTRIAL ESTATE\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(v2.getAddress(), \"YEW TEE INDUSTRIAL ESTATE\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getLatitude() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v1.getLatitude(), 1.3973210291170202);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(v2.getLatitude(), 1.3973210291170202);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getLongitude() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v1.getLongitude(), 103.753758637401);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(v2.getLongitude(), 103.753758637401);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getDistX() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v1.getDistX(), 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getDistY() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v2.getDistY(), 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getDistance() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(v2.getDistance(v1) \u003c 15000);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(v1.getDistance(v2) \u003e 1000);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v1.getDistance(v2), v2.getDistance(v1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setLatitude() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        v1.setLatitude(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v1.getLatitude(), 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setLongitude() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        v2.setLongitude(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v2.getLongitude(), 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v1.toString(), \"YEW TEE INDUSTRIAL ESTATE | 1.3973210291170202 | 103.753758637401 | 0.0 | 0.0\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Venue v \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401, 0, 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(v.equals(v1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(v2.equals(v1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 72
    }
  },
  {
    "path": "src/test/java/duke/model/planning/TodoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.model.planning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        Todo todo \u003d new Todo(\"Homework\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertEquals(todo.toString(), \"Homework\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 2,
      "-": 12
    }
  },
  {
    "path": "src/test/java/duke/model/profile/ProfileCardTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.model.profile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class ProfileCardTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ProfileCard profileCard \u003d new ProfileCard();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    void execute() throws DukeDateTimeParseException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        LocalDateTime birthday \u003d ParserTimeUtil.parseStringToDate(\"01/01/01\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        profileCard.setPerson(\"Danny\", birthday);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertEquals(profileCard.getPersonName(), \"Danny\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assertEquals(profileCard.getPersonBirthday(), birthday);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hongchuan97": 22
    }
  }
]
