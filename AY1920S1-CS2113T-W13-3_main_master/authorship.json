[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.4\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.jvm.convert\u0027 version \u00272.3.0\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "mainClassName \u003d \u0027duke.Launcher\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    modules \u003d ["
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0027javafx.controls\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            , \u0027javafx.base\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            , \u0027javafx.graphics\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            , \u0027javafx.fxml\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            , \u0027javafx.web\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        })"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.15-alpha\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.5.0\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.google.code.gson\u0027, name: \u0027gson\u0027, version: \u00272.8.5\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-web\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.9.9.3\u0027"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.9.9\u0027"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-11+26\u0027"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    archiveVersion \u003d \"1.1\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027duke/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027coveralls\u0027"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "run {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 4,
      "-": 155,
      "Jefferson111": 32
    }
  },
  {
    "path": "src/main/java/duke/Launcher.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Launches the SGTravel Application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Launcher {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Main.main(args);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.ui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * An app called SGTravel."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main extends Application {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Starts SGTravel GUI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param stage the stage for GUI."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage stage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.INFO, \"SGTravel starting up...\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            MainWindow mainWindow \u003d new MainWindow(stage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.initialise(this);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stops the GUI."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws Exception The exception thrown."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super.stop();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        launch();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 2,
      "-": 38,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/duke/commons/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines messages used by SGTravel."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Error messages."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Format is ERROR_TYPE_DESCRIPTION"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_COMMAND_UNKNOWN \u003d \"☹ I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_CONSTRAINT_UNKNOWN \u003d \"☹ I\u0027m sorry, but I don\u0027t know what constraint this is :-(\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_DESCRIPTION_EMPTY \u003d \"⛔ The description cannot be empty. :-(\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_FIELD_UNKNOWN \u003d \"☹ I\u0027m sorry, but I don\u0027t know what you want to edit :-(\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_INPUT_INVALID_FORMAT \u003d \"⚡ Invalid format. Refer to help for command formats. :-(\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_INDEX_OUT_OF_BOUNDS \u003d \"⚠ Index requested is out of bounds! :-(\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_DATA_CORRUPTED \u003d \"☢ Data cannot be converted! :-( \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_FILE_NOT_FOUND \u003d \"☢ File not found! \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_FILE_NOT_SAVED \u003d \"✋ File not saved! :-(\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_RESOURCE_NOT_FOUND \u003d \"☢ Resource not found! :-( Missing: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_TASK_CORRUPTED \u003d \"✇ Task cannot be converted to String! :-(\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_TASK_DUPLICATED \u003d \"✇ Task already exists! :-(\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_TASK_NOT_FOUND \u003d \"☢ Task not found! :-(\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_ROUTE_CORRUPTED \u003d \"✇ Route cannot be converted to String! :-(\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_ROUTE_DUPLICATE \u003d \"✇ Route already exists! :-(\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_ROUTE_NOT_FOUND \u003d \"☢ Route not found! :-(\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_ROUTE_NODE_CORRUPTED \u003d \"✇ Route Node cannot be converted to String! :-(\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_ROUTE_NODE_DUPLICATE \u003d \"✇ Node already exists! :-(\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_ROUTE_NODE_NOT_FOUND \u003d \"☢ Route not found! :-(\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ANOMALY_FOUND \u003d \"⚡ Anomaly detected! Please check your tasks. :-(\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_API_REQUEST_FAILED \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \"☹ I\u0027m sorry, something went wrong while fetching data. :-(\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_API_DATA_NULL \u003d \"☹ I\u0027m sorry, but nothing could be found. :-(\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_API_TIMEOUT \u003d \"☹ I\u0027m sorry, but the request has timed out... :-(\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_TASK_NOT_HOLIDAY \u003d \"Sorry, the numbers you entered are not a holiday destination.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_RECOMMENDATION_FAIL \u003d \"☹ I\u0027m sorry, our recommendation services are down\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_PARSER_FAIL \u003d \"Parsing failed.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_FORMAT_INVALID \u003d \"☹ I\u0027m sorry, numbers or words cannot be formatted.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String ERROR_LOCATION_SELECTOR_NULL \u003d \"There is no locations to be selected!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_VENUE_EMPTY \u003d \"There are no Venues. VenueList is empty.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_EVENT_OUT_OF_BOUND \u003d \"The index is out of bounds for the EventList.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static final String ERROR_EVENT_NOT_SELECTED \u003d \"There are no events selected.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Messages sent via Prompt by Duke."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Format is PROMPT_TYPE_DESCRIPTION"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_UNKNOWN \u003d \"Sorry, but I do not understand that.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ERROR \u003d \"Sorry, but something went wrong...\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_TOO_MANY_ATTEMPTS \u003d \"Sorry, but you have exceeded 5 attempts...\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_SPACES \u003d \"Please do not include spaces in your search!\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_NOT_INT \u003d \"Please use a number!\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_NOT_DOUBLE \u003d \"Please use a number!\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_NOT_STRING \u003d \"Please use a string!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_NOT_DATE \u003d \"Please use a proper date!\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_SEARCH_STARTER \u003d \"Where would you like to find?\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_SEARCH_SUCCESS \u003d \"These are the coordinates of your search:\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ADD_STARTER \u003d \"What would you like to add?\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ADD_SUCCESS \u003d \"Task added!\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_DEADLINE_STARTER \u003d \"What deadline would you like to add?\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_DEADLINE_DATE \u003d \"Please key in the date that you want it done by\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_DEADLINE_SUCCESS \u003d \"Deadline added!\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_EVENT_STARTER \u003d \"What event would you like to add?\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_EVENT_DATE \u003d \"When is the event?\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_EVENT_SUCCESS \u003d \"Event added!\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FIND_STARTER \u003d \"What task would you like to find?\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FIND_SUCCESS \u003d \"Here are the tasks:\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FIXED_STARTER \u003d \"What task would you like it to be done by?\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FIXED_HOUR \u003d \"How many hours must it be done by?\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FIXED_MIN \u003d \" How many minutes must it be done by?\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FIXED_SUCCESS \u003d \"Fixed task added!\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_HOLIDAY_STARTER \u003d \"What holiday would you like to add?\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_HOLIDAY_STARTDATE \u003d \"When does it start?\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_HOLIDAY_ENDDATE \u003d \"When does it end?\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_HOLIDAY_SUCCESS \u003d \"Event added!\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_TODO_STARTER \u003d \"What would you like to do?\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_TODO_SUCCESS \u003d \"To Do added!\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_WITHIN_STARTER \u003d \"What task with a fixed timing would you like to add?\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_WITHIN_ENDDATE \u003d \"When must it be done by?\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_WITHIN_SUCCESS \u003d \"Within added!\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_REPEAT_STARTER \u003d \"What task that repeats every X days would you like to add?\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_REPEAT_DATE \u003d \"When does the task start?\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_REPEAT_REPEAT \u003d \"How many days does it repeat?\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_REPEAT_SUCCESS \u003d \"Repeating task added!\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_DELETE_STARTER \u003d \"What would you like to delete?\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_DELETE_SUCCESS \u003d \"Trying to delete task...\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FINDPATH_STARER \u003d \"Where do you want to go?\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FINDPATH_SUCCESS \u003d \"Here is the path:\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FREETIME_STARTER \u003d \"How long of free time are you looking for?\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_FREETIME_SUCCESS \u003d \"Here are the results:\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_GETBUSROUTE_STARTER \u003d \"Which bus route do you want to get?\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_GETBUSROUTE_SUCCESS \u003d \"Here is the bus route:\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_GETBUSSTOP_STARTER \u003d \"Which bus stop do you want to find?\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_GETBUSSTOP_SUCCESS \u003d \"Here is the bus stop\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_MARKDONE_STARTER \u003d \"Which task have you completed?\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_MARKDONE_SUCCESS \u003d \"The task has been marked as done!\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_RESCHEDULE_STARTER \u003d \"Which event would you like to reschedule?\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_RESCHEDULE_SUCCESS \u003d \"Rescheduled!\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_VIEWSCHEDULE_STARTER \u003d \"Which date would you like to find?\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_VIEWSCHEDULE_SUCCESS \u003d \"Here are the events happening in this day:\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_RECOMMEND_STARTER \u003d \"How many days will you be visiting SG?\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_RECOMMEND_SUCCESS \u003d \"Recommended Attractions:\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_CANCEL \u003d \"Current conversation has ended.\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_STARTING_POINT \u003d \"Choose your starting point.\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static final String PROMPT_ROUTE_ENDING_POINT \u003d \"Choose your end point.\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 127,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/java/duke/commons/enumerations/Constraint.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.commons.enumerations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Enumerates different findPath constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public enum Constraint {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    MRT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    BUS,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    MIXED,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    CAR;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 11
    }
  },
  {
    "path": "src/main/java/duke/commons/enumerations/TimePatternType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.enumerations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Enumerates specificity of time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public enum TimePatternType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    DAY_OF_WEEK, DATE_TIME, DATE, TIME"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "-": 6,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/ApiFailedRequestException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when API request fails."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class ApiFailedRequestException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ApiFailedRequestException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_API_REQUEST_FAILED);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/ApiNullRequestException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when API request returns no data."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class ApiNullRequestException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ApiNullRequestException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_API_DATA_NULL);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/ApiTimeoutException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when API request timeouts."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class ApiTimeoutException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ApiTimeoutException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_API_TIMEOUT);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/CorruptedFileException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when file cannot be read."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class CorruptedFileException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String fileType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param fileType The file being loaded."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CorruptedFileException(String fileType) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_DATA_CORRUPTED);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.fileType \u003d fileType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getFileType() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return fileType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the error message depending on the file specified in constructor."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The error message."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getErrorMessage() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (fileType) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"ROUTE\":"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return Messages.ERROR_ROUTE_CORRUPTED;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"ROUTE_NODE\":"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return Messages.ERROR_ROUTE_NODE_CORRUPTED;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"TASK\":"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return Messages.ERROR_TASK_CORRUPTED;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return Messages.ERROR_DATA_CORRUPTED;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 42
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeApiException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when an API call fails."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class DukeApiException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public DukeApiException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 7
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeDateTimeParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when date / time parsing fails."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DukeDateTimeParseException extends DukeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DukeDateTimeParseException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 1,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeDuplicateRouteException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when a duplicate route is found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class DukeDuplicateRouteException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public DukeDuplicateRouteException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_ROUTE_DUPLICATE);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 9
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeDuplicateTaskException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when a duplicate task is detected."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DukeDuplicateTaskException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DukeDuplicateTaskException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_TASK_DUPLICATED);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 1,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeEmptyFieldException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when a field is left empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class DukeEmptyFieldException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public DukeEmptyFieldException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 7
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when an operation fails in SGTravel."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "-": 9,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeRouteNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when a route is not found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class DukeRouteNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public DukeRouteNotFoundException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_ROUTE_NOT_FOUND);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 9
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeTaskNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when a task is not found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DukeTaskNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DukeTaskNotFoundException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_TASK_NOT_FOUND);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 1,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/DukeUnknownCommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Displays an error when an unknown command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DukeUnknownCommandException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DukeUnknownCommandException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_COMMAND_UNKNOWN);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 7,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/EmptyVenueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EmptyVenueException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EmptyVenueException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.ERROR_VENUE_EMPTY);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/EventNotSelectedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EventNotSelectedException extends DukeException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventNotSelectedException() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.ERROR_EVENT_NOT_SELECTED);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/EventSelectionOutOfBoundsException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EventSelectionOutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventSelectionOutOfBoundsException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(Messages.ERROR_EVENT_OUT_OF_BOUND);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/FileLoadFailException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when file cannot be loaded."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class FileLoadFailException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String file;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param file The file being loaded."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public FileLoadFailException(String file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getFile() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return file;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 24
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/FileNotSavedException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when file is not saved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class FileNotSavedException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public FileNotSavedException(String fileName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_FILE_NOT_SAVED + \"(\" + fileName + \")\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return fileName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 22
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/InputNotDoubleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when file is not saved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class InputNotDoubleException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public InputNotDoubleException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.PROMPT_NOT_DOUBLE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/InputNotIntException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when file is not saved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class InputNotIntException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public InputNotIntException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.PROMPT_NOT_INT);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/NullResultException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when nothing is found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class NullResultException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public NullResultException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_ROUTE_NODE_DUPLICATE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/QueryOutOfBoundsException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when index query is out of bounds."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class QueryOutOfBoundsException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String queriedItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public QueryOutOfBoundsException(String queriedItem) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.queriedItem \u003d queriedItem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getQueriedItem() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return queriedItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 22
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/RouteNodeDuplicateException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when duplicate route is found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeDuplicateException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeDuplicateException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_ROUTE_NODE_DUPLICATE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/StorageFileNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when file is not found."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class StorageFileNotFoundException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public StorageFileNotFoundException(String fileName) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_FILE_NOT_FOUND + \"(\" + fileName + \")\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getFileName() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return fileName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 22
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/UnknownConstraintException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when file is not saved."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class UnknownConstraintException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public UnknownConstraintException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_CONSTRAINT_UNKNOWN);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/main/java/duke/commons/exceptions/UnknownFieldException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Exception thrown when an invalid field is queried."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class UnknownFieldException extends DukeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the Exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public UnknownFieldException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Messages.ERROR_FIELD_UNKNOWN);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/main/java/duke/logic/CreateMap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents the transportation map of the Singapore transport network."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class CreateMap {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashMap\u003cString, BusService\u003e busMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashMap\u003cString, BusStop\u003e busStopMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashMap\u003cString, TrainStation\u003e trainMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e northEastLine;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e northSouthLine;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e circleLine;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e circleLineSub;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e downtownLine;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e eastWestLine;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e eastWestLineSub;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Initialise createMap object with both busStopMap and busMap."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param busStopMap Map of busStop object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param busMap Map of BusService object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CreateMap(HashMap\u003cString, BusStop\u003e busStopMap, HashMap\u003cString, BusService\u003e busMap) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.busMap \u003d busMap;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.busStopMap \u003d busStopMap;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public HashMap\u003cString, BusService\u003e getBusMap() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return this.busMap;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public HashMap\u003cString, BusStop\u003e getBusStopMap() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return this.busStopMap;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void setTrainMap(HashMap\u003cString, TrainStation\u003e trainMap) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.trainMap \u003d trainMap;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        setTrainLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void setTrainLine() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e northEastLine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e northSouthLine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e circleLine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e circleLineSub \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e downtownLine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e eastWestLine \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cTrainStation\u003e eastWestLineSub \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (Map.Entry mapElement : this.trainMap.entrySet()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            TrainStation trainStation \u003d (TrainStation)mapElement.getValue();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (String trainCode : trainStation.getTrainCodes()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (trainCode.contains(\"NE\")) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    northEastLine.add(trainStation);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (trainCode.contains(\"NS\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    northSouthLine.add(trainStation);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (trainCode.contains(\"EW\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    eastWestLine.add(trainStation);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (trainCode.contains(\"CG\")) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    eastWestLineSub.add(trainStation);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (trainCode.contains(\"CC\")) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    circleLine.add(trainStation);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (trainCode.contains(\"CE\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    circleLineSub.add(trainStation);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (trainCode.contains(\"DT\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    downtownLine.add(trainStation);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.northEastLine \u003d sortTrainLine(northEastLine, \"NE\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.northSouthLine \u003d sortTrainLine(northSouthLine, \"NS\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.circleLine \u003d sortTrainLine(circleLine, \"CC\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.circleLineSub \u003d sortTrainLine(circleLineSub, \"CE\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.downtownLine \u003d sortTrainLine(downtownLine, \"DT\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.eastWestLine \u003d sortTrainLine(eastWestLine, \"EW\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.eastWestLineSub \u003d sortTrainLine(eastWestLineSub, \"CG\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cTrainStation\u003e sortTrainLine(ArrayList\u003cTrainStation\u003e trainLine, String trainLineCode) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        trainLine.sort(new SortByTrainCode(trainLineCode));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return trainLine;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Return mrt line of corresponding code."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param lineCode Code of mrt line"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return mrt line"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ArrayList\u003cTrainStation\u003e getTrainLine(String lineCode) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        switch (lineCode) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"NE\":"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.northEastLine;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"NS\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.northSouthLine;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"CC\":"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.circleLine;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"CE\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.circleLineSub;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"EW\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.eastWestLine;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"CG\":"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.eastWestLineSub;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case \"DT\":"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return this.downtownLine;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    static class SortByTrainCode implements Comparator\u003cTrainStation\u003e {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        private String trainLine;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        SortByTrainCode(String trainLine) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.trainLine \u003d trainLine;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        public int compare(TrainStation o1, TrainStation o2) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            int trainCodeNumber \u003d getTrainCodeNumber(o1, this.trainLine);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            int trainCodeNumber2 \u003d getTrainCodeNumber(o2, this.trainLine);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            assert trainCodeNumber !\u003d -1 : \"Train Station in wrong line\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            assert trainCodeNumber2 !\u003d -1 : \"Train Station in wrong line\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return trainCodeNumber - trainCodeNumber2;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        private int getTrainCodeNumber(TrainStation o1, String trainLine) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (String trainCode : o1.getTrainCodes()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (trainCode.contains(trainLine)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    return Integer.parseInt(trainCode.substring(2));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public HashMap\u003cString, TrainStation\u003e getTrainMap() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return trainMap;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 2,
      "hongchuan97": 152
    }
  },
  {
    "path": "src/main/java/duke/logic/EditorManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.EmptyVenueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.EventNotSelectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.PanelResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.EditorParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.PromptParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.selectors.EventFieldSelector;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.selectors.LocationSelector;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.VenueList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Manages editing operations of the EventList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EditorManager {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static LocationSelector eventSelector;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static EventFieldSelector fieldSelector;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static EventList events;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static VenueList venues;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static Event currentEvent;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static int eventField;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static boolean isActive \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Activates the EditorManager."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static void activate(EventList events, VenueList venues) throws EmptyVenueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.INFO, \"Activating editor...\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.events \u003d events;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.venues \u003d venues;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        eventSelector \u003d new LocationSelector(venues);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        fieldSelector \u003d new EventFieldSelector();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isActive \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selectEvent();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static void deactivate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isActive \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static boolean isActive() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isActive;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Edits the EventList."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The input string from user."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return Command object for logic to execute."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Command edit(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!eventSelector.isLock()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new EventNotSelectedException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (currentEvent !\u003d null) : \"currentEvent must always exist when the lock is on\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorParser.parse(userInput, eventField, currentEvent);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isActive) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return PromptParser.parseCommand(\"editing...\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new EditCommand();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Edits the EventList."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static PanelResult edit(KeyCode keyCode) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (keyCode.equals(KeyCode.ESCAPE)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            eventSelector.unlock();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (eventSelector.isLock()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            fieldSelector.feedKeyCode(keyCode);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            selectEventField();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            eventSelector.feedKeyCode(keyCode);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            selectEvent();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new PanelResult(currentEvent, venues, eventSelector.isLock(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                eventSelector.getIndex(), eventField);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static void selectEventField() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        eventField \u003d fieldSelector.getIndex();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static void selectEvent() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentEvent \u003d events.get(eventSelector.getIndex());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 97
    }
  },
  {
    "path": "src/main/java/duke/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Class which contains the main logic of SGTravel."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Logic {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/duke/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeApiException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeUnknownCommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.PanelResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.ConversationManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * The main logic of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LogicManager extends Logic {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private ConversationManager conversationManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates LogicManager instance."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public LogicManager() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets response from LogicManager."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The input string from user."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return CommandResult Object containing information for Ui to display."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResult execute(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Command c;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (EditorManager.isActive()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            logger.log(Level.INFO, \"editing...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            c \u003d EditorManager.edit(userInput);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                c \u003d Parser.parseComplexCommand(userInput);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                conversationManager.clearContext();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } catch (DukeApiException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new DukeException((e.getMessage()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            } catch (DukeUnknownCommandException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                c \u003d getCommandFromConversationManager(userInput);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return (CommandResult) c.execute(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets response from LogicManager."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public PanelResult execute(KeyCode keyCode) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (EditorManager.isActive()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return EditorManager.edit(keyCode);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new PanelResult();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets a command from ConversationManager."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Command getCommandFromConversationManager(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(userInput);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return conversationManager.getCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 5,
      "Jefferson111": 71
    }
  },
  {
    "path": "src/main/java/duke/logic/PathFinder.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.api.ApiConstraintParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines an algorithm to find a path between 2 Venues."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class PathFinder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private CreateMap map;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashSet\u003cBusStop\u003e visited;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private HashMap\u003cString, String\u003e path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private boolean found \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Initialise Pathfinder object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public PathFinder(CreateMap map) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.map \u003d map;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.visited \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.path \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Find path between start and end."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param start starting location."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param end ending location."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ArrayList\u003cVenue\u003e execute(Venue start, Venue end, Constraint constraint) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        found \u003d false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        switch (constraint) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case BUS:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return findBusRoute(start, end);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        case MRT:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return findTrainRoute(start, end);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return findMixedRoute(start, end);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cVenue\u003e findMixedRoute(Venue start, Venue end) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Venue startTransport \u003d ApiConstraintParser.getNearestTransport(start, this.map);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Venue endTransport \u003d ApiConstraintParser.getNearestTransport(end, this.map);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cVenue\u003e ans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (startTransport instanceof TrainStation \u0026\u0026 endTransport instanceof TrainStation) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            System.out.println(\"onlyMrt\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return findTrainRoute(start, end);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (startTransport instanceof BusStop \u0026\u0026 endTransport instanceof TrainStation) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            TrainStation middleTrain \u003d ApiConstraintParser.getNearestTrainStation(start, this.map.getTrainMap());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BusStop middleBus \u003d ApiConstraintParser.getNearestBusStop(middleTrain, this.map.getBusStopMap());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans \u003d findBusRoute(start, middleBus);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans.addAll(Objects.requireNonNull(findTrainRoute(middleTrain, end)));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (startTransport instanceof TrainStation \u0026\u0026 endTransport instanceof BusStop) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            TrainStation middleTrain \u003d ApiConstraintParser.getNearestTrainStation(end, this.map.getTrainMap());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BusStop middleBus \u003d ApiConstraintParser.getNearestBusStop(middleTrain, this.map.getBusStopMap());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans \u003d findTrainRoute(start, middleTrain);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans.addAll(Objects.requireNonNull(findBusRoute(middleBus, end)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (startTransport instanceof BusStop \u0026\u0026 endTransport instanceof BusStop) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            TrainStation startTrain \u003d ApiConstraintParser.getNearestTrainStation(start, this.map.getTrainMap());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            TrainStation endTrain \u003d ApiConstraintParser.getNearestTrainStation(end, this.map.getTrainMap());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BusStop startMiddleBus \u003d ApiConstraintParser.getNearestBusStop(startTrain, this.map.getBusStopMap());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BusStop endMiddleBus \u003d ApiConstraintParser.getNearestBusStop(endTrain, this.map.getBusStopMap());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans \u003d findBusRoute(start, startMiddleBus);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans.addAll(Objects.requireNonNull(findTrainRoute(startTrain, endTrain)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans.addAll(Objects.requireNonNull(findBusRoute(endMiddleBus, end)));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return ans;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cVenue\u003e findTrainRoute(Venue start, Venue end) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.found \u003d false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        TrainStation startTrainStation \u003d ApiConstraintParser.getNearestTrainStation(start, this.map.getTrainMap());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        TrainStation endTrainStation \u003d ApiConstraintParser.getNearestTrainStation(end, this.map.getTrainMap());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cVenue\u003e path \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (isSameLocation(startTrainStation, endTrainStation)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            path.add(start);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            path.add(end);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return path;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (!isSameLocation(start, startTrainStation)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            path.add(start);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        path.add(startTrainStation);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (!onSameLine(startTrainStation, endTrainStation)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ArrayList\u003cTrainStation\u003e curTrainLine;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (String line : startTrainStation.getTrainCodes()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                curTrainLine \u003d this.map.getTrainLine(line.substring(0,2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                assert curTrainLine !\u003d null : \"Train Code does not exist\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                for (TrainStation trainStation : curTrainLine) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    if (onSameLine(trainStation, endTrainStation)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        path.add(trainStation);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        found \u003d true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (found) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        path.add(endTrainStation);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (!isSameLocation(end, endTrainStation)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            path.add(end);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (found) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return path;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private boolean isSameLocation(Venue start, Venue end) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return start.equals(end);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private boolean onSameLine(TrainStation cur, TrainStation endTrainStation) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (String code : cur.getTrainCodes()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (String code2 : endTrainStation.getTrainCodes()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (code2.contains(code.substring(0,2))) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cVenue\u003e findBusRoute(Venue start, Venue end) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.found \u003d false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop startBusStop \u003d ApiConstraintParser.getNearestBusStop(start, this.map.getBusStopMap());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop endBusStop \u003d ApiConstraintParser.getNearestBusStop(end, this.map.getBusStopMap());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cVenue\u003e ans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (isSameLocation(startBusStop, endBusStop)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans.add(start);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans.add(end);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return ans;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop cur \u003d startBusStop;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        int depthLimit \u003d 0;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        while (!found \u0026\u0026 depthLimit \u003c 3) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.visited.clear();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            this.path.clear();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            depthFirstSearch(cur, endBusStop, depthLimit);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            depthLimit +\u003d 1;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (!this.found) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            cur \u003d endBusStop;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (!isSameLocation(end, endBusStop)) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                ans.add(end);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            while (!cur.getBusCode().equals(startBusStop.getBusCode())) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                ans.add(cur);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                cur \u003d this.map.getBusStopMap().get(path.get(cur.getBusCode()));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ans.add(cur);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (!isSameLocation(start, startBusStop)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                ans.add(start);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return ans;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void depthFirstSearch(BusStop cur, BusStop endBusStop, int depthLimit) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (depthLimit \u003d\u003d 0 || this.visited.contains(cur)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.visited.add(cur);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (String bus : cur.getBuses()) { //loop through all bus in bus stop"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            int direction;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (this.map.getBusMap().get(bus).getDirection(1).contains(cur.getBusCode())) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                direction \u003d 1;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                direction \u003d 2;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            for (String busCode : this.map.getBusMap().get(bus).getDirection(direction)) { // depth search the bus route"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (this.found) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (busCode.equals(cur.getBusCode())) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                path.put(busCode, cur.getBusCode());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (haveSameBus(this.map.getBusStopMap().get(busCode), endBusStop)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    path.put(endBusStop.getBusCode(), busCode);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    this.found \u003d true;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    depthFirstSearch(this.map.getBusStopMap().get(busCode), endBusStop, depthLimit - 1);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private boolean haveSameBus(BusStop cur, BusStop endBusStop) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (String bus : cur.getBuses()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (endBusStop.getBuses().contains(bus)) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 3,
      "hongchuan97": 224,
      "Jefferson111": 6
    }
  },
  {
    "path": "src/main/java/duke/logic/api/ApiConstraintParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.api;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.CreateMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles all API constraint parsing."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class ApiConstraintParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Get nearest Bus Stop to location."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param place Starting location."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busStopMap Map of all Bus Stop."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The nearest Bus Stop."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static BusStop getNearestBusStop(Venue place, HashMap\u003cString, BusStop\u003e busStopMap) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double minimumDisplacement \u003d 1000;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop nearestBusStop \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (Map.Entry mapElement : busStopMap.entrySet()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BusStop cur \u003d (BusStop)mapElement.getValue();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            double displacement \u003d getDisplacement(place, cur);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (displacement \u003c minimumDisplacement) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                minimumDisplacement \u003d displacement;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                nearestBusStop \u003d cur;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return nearestBusStop;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static double getDisplacement(Venue start, Venue end) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double displacement \u003d Math.pow(Math.abs(start.getLatitude() - end.getLatitude()), 2)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                + Math.pow(Math.abs(start.getLongitude() - end.getLongitude()), 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        displacement \u003d Math.sqrt(displacement);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return displacement;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Get nearest Train Station to location."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param place Starting location."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainMap Map of all Train Station."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The nearest Train Station."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static TrainStation getNearestTrainStation(Venue place, HashMap\u003cString, TrainStation\u003e trainMap) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double minimumDisplacement \u003d 1000;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        TrainStation nearestTrainStation \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (Map.Entry mapElement : trainMap.entrySet()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            TrainStation cur \u003d (TrainStation)mapElement.getValue();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            double displacement \u003d getDisplacement(place, cur);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (displacement \u003c minimumDisplacement) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                minimumDisplacement \u003d displacement;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                nearestTrainStation \u003d cur;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return nearestTrainStation;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Return the nearest transportation from the starting location."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param start The  starting location"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param map All transportation location"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return Nearest transportation"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static Venue getNearestTransport(Venue start, CreateMap map) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        TrainStation nearestTrain \u003d getNearestTrainStation(start, map.getTrainMap());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusStop nearestBus \u003d getNearestBusStop(start, map.getBusStopMap());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return nearestTransport(start, nearestTrain, nearestBus);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static Venue nearestTransport(Venue start, TrainStation nearestTrain, BusStop nearestBus) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double displacementTrain;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double displacementBus;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        displacementTrain \u003d getDisplacement(start, nearestTrain);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        displacementBus \u003d getDisplacement(start, nearestBus);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (displacementTrain \u003c\u003d displacementBus) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return  nearestTrain;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            return nearestBus;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 8,
      "Inno97": 10,
      "hongchuan97": 70,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/duke/logic/api/ApiParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.api;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiFailedRequestException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.api.requests.LocationSearchUrlRequest;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.api.requests.DataMallHttpRequest;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.api.requests.StaticMapUrlRequest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles all API requests."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class ApiParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns names and coordinates of location search."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param param The query location."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The location found."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiNullRequestException If the request returns no valid result."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiTimeoutException If the request times out."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static Venue getLocationSearch(String param) throws ApiNullRequestException, ApiTimeoutException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        LocationSearchUrlRequest req \u003d new LocationSearchUrlRequest(param);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return req.execute();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Return all bus stops in Singapore."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return List of Bus Stops."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static HashMap\u003cString, BusStop\u003e getBusStop() throws DukeException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String path \u003d \"BusStops\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        int skip \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, BusStop\u003e allBus \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        while (skip \u003c 5500) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            DataMallHttpRequest req \u003d new DataMallHttpRequest(\"BusStops\", path, Integer.toString(skip));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            skip +\u003d 500;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            JsonObject jsonRes \u003d req.execute();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            JsonArray arr \u003d jsonRes.getAsJsonArray(\"value\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            for (int i \u003d 0; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                BusStop busstop \u003d new BusStop("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        arr.get(i).getAsJsonObject().get(\"BusStopCode\").getAsString(),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        arr.get(i).getAsJsonObject().get(\"RoadName\").getAsString(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        arr.get(i).getAsJsonObject().get(\"Description\").getAsString(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        arr.get(i).getAsJsonObject().get(\"Latitude\").getAsDouble(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                        arr.get(i).getAsJsonObject().get(\"Longitude\").getAsDouble());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                allBus.put(arr.get(i).getAsJsonObject().get(\"BusStopCode\").getAsString(), busstop);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return allBus;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns all bus routes in Singapore."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Bus routes."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static HashMap\u003cString, BusService\u003e getBusRoute() throws DukeException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String path \u003d \"BusRoutes\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        int skip \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, BusService\u003e busMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        while (skip \u003c 26000) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            DataMallHttpRequest req \u003d new DataMallHttpRequest(\"BusRoutes\", path, Integer.toString(skip));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            skip +\u003d 500;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            JsonObject jsonRes \u003d req.execute();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            JsonArray arr \u003d jsonRes.getAsJsonArray(\"value\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            for (int i \u003d 0; i \u003c arr.size(); i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                String serviceNo \u003d arr.get(i).getAsJsonObject().get(\"ServiceNo\").getAsString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                if (!busMap.containsKey(serviceNo)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    BusService bus \u003d new BusService(serviceNo);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    busMap.put(serviceNo, bus);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    bus.addRoute(arr.get(i).getAsJsonObject().get(\"BusStopCode\").getAsString(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                            arr.get(i).getAsJsonObject().get(\"Direction\").getAsInt());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    busMap.get(serviceNo).addRoute(arr.get(i).getAsJsonObject().get(\"BusStopCode\").getAsString(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                            arr.get(i).getAsJsonObject().get(\"Direction\").getAsInt());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return busMap;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets Static Map from StaticMap API."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param param String formatted parameters"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The image from API"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiFailedRequestException If the request fails."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiNullRequestException If the request returns no valid result."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static Image getStaticMap(String param) throws ApiFailedRequestException, ApiNullRequestException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        StaticMapUrlRequest req \u003d new StaticMapUrlRequest(param);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return req.execute();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates Param in String format for StaticMapUrlRequest."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param imageLength The length of StaticImage."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param imageWidth The width of StaticImage."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param zoomLvl The zoom level."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param centerLat The latitude coordinates of center."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param centerLong The longitude coordinates of center."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param polygonRegion The polygon regions to highlight."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param lineCoord The line coordinates to highlight."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param pointCoord The point coordinates to show."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The String param to parse."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String generateStaticMapParams(String imageLength, String imageWidth, String zoomLvl,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                     String centerLat, String centerLong, String polygonRegion, String lineCoord, String pointCoord) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String result \u003d \"layerchosen\u003ddefault\u0026\" + \"lat\u003d\" + centerLat + \"\u0026lng\u003d\" + centerLong + \"\u0026zoom\u003d\" + zoomLvl"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"\u0026height\u003d\" + imageLength + \"\u0026width\u003d\" + imageWidth;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result +\u003d \"\u0026polygons\u003d\" + polygonRegion;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result +\u003d \"\u0026lines\u003d\" + lineCoord;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result +\u003d \"\u0026points\u003d\" + pointCoord + \"\u0026color\u003d\u0026fillColor\u003d\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Create polygonRegion or lineCoord in String format for StaticMap."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The String result."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String createStaticMapArea(String latitude, String longitude) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return \"[\" +  latitude + \",\" + longitude + \"]\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generate parameters in String format for polygonRegion or lineCoord in StaticMap."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param points The ArrayList of points in format X,Y ."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param rgb The color of the region, in format r,g,b ."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The String param."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String generateStaticMapPolygon(ArrayList\u003cString\u003e points, String rgb) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String result \u003d \"[\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (String point: points) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result +\u003d \"[\" + point + \"]\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (point.equals(points.get(points.size() - 1))) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result +\u003d \",\";"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (!rgb.isEmpty()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result +\u003d \":\" + rgb + \":2\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result +\u003d \":0,0,0:2\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates parameter in String format for polygonRegion or lineCoord in StaticMap."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param points The ArrayList of points."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param rgb The color of the region or line."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The String param."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String generateStaticMapLines(ArrayList\u003cString\u003e points, String rgb) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String result \u003d \"[\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (String point: points) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result +\u003d \"[\" + point + \"]\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (point.equals(points.get(points.size() - 1))) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result +\u003d \",\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (!rgb.isEmpty()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result +\u003d \":\" + rgb;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result +\u003d \":0,0,0\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates Point in String format for StaticMap."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param r The R value in RGB."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param g The G value in RGB."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param b The B value in RGB."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param label The text label for the point."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The String result."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String createStaticMapPoint(String latitude, String longitude,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                                              String r, String g, String b, String label) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return \"[\" + latitude + \",\" + longitude + \",\\\"\" + r + \",\" + g + \",\" + b + \"\\\",\\\"\""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + (Character.toString(label.charAt(0))).toUpperCase() + \"\\\"]\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Generates parameters in String format for polygonRegion or lineCoord in StaticMap."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param points The ArrayList of points."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return result The String param."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String generateStaticMapPoints(ArrayList\u003cString\u003e points) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String result \u003d \"[\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (String point: points) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result +\u003d \"[\" + point + \"]\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (point.equals(points.get(points.size() - 1))) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                result +\u003d \",\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 163,
      "hongchuan97": 56,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/duke/logic/api/requests/DataMallHttpRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.api.requests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeApiException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles Data Mall URL request."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class DataMallHttpRequest extends HttpRequest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String URL \u003d \"http://datamall2.mytransport.sg/ltaodataservice/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public DataMallHttpRequest(String reqType, String path, String param) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(reqType, URL + path, param);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public JsonObject execute() throws DukeApiException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            URL url \u003d new URL(this.url + \"?$skip\u003d\" + this.param);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            HttpURLConnection con \u003d (HttpURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            con.setRequestMethod(\"GET\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            con.setRequestProperty(\"accept\", \"application/json\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            con.setRequestProperty(\"AccountKey\", \"LuhGHYG6Tmu5TdcJm1g8nQ\u003d\u003d\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            con.setConnectTimeout(5000);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            con.setReadTimeout(5000);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BufferedReader in \u003d new BufferedReader(new InputStreamReader(con.getInputStream()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            response \u003d in.readLine();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeApiException(Messages.ERROR_API_REQUEST_FAILED);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        JsonObject result;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            assert (response !\u003d null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            JsonParser jp \u003d new JsonParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            JsonElement root \u003d jp.parse(response);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d root.getAsJsonObject();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeApiException(Messages.ERROR_API_DATA_NULL);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 13,
      "hongchuan97": 38,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/duke/logic/api/requests/HttpRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.api.requests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeApiException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Abstract class handling individual HTTP requests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public abstract class HttpRequest\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    protected String reqType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    protected String url;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    protected String param;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Initialises HTTP Request parameters."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param reqType The request type"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param url The request URL"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param param The parameters of the request"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public HttpRequest(String reqType, String url, String param) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.reqType \u003d reqType;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.url \u003d url;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.param \u003d param;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes the HTTP Request."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return response The response from request"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public abstract T execute() throws DukeApiException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 23,
      "hongchuan97": 4,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/main/java/duke/logic/api/requests/LocationSearchUrlRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.api.requests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonArray;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.net.URLConnection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import com.google.gson.JsonParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles URL requests to OneMap API to get coordinates of location."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LocationSearchUrlRequest extends UrlRequest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String PARAM_TYPE \u003d \"searchVal\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String OPTIONAL_VARIABLES \u003d \"\u0026returnGeom\u003dY\u0026getAddrDetails\u003dY\u0026pageNum\u003d1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String API_LINK \u003d \"https://developers.onemap.sg/commonapi/search?\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the URL Request."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param param The query."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public LocationSearchUrlRequest(String param) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(param.replace(\" \", \"+\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes the URL request to OneMap API."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return JSONObject The response from OneMap API."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiNullRequestException If the request gives no valid result."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiTimeoutException If the request times out."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Venue execute() throws ApiNullRequestException, ApiTimeoutException  {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String response;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            URL url \u003d new URL(API_LINK + PARAM_TYPE + \"\u003d\" + param + OPTIONAL_VARIABLES);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            URLConnection connection \u003d url.openConnection();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            connection.setConnectTimeout(5000);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            connection.setReadTimeout(5000);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            BufferedReader in \u003d new BufferedReader(new InputStreamReader(connection.getInputStream()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            response \u003d in.readLine();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            in.close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new ApiTimeoutException();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (response !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            JsonParser jp \u003d new JsonParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            JsonElement root \u003d jp.parse(response);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            JsonObject result \u003d root.getAsJsonObject();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            JsonArray arr \u003d result.getAsJsonArray(\"results\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (Integer.parseInt(String.valueOf(result.getAsJsonPrimitive(\"found\"))) \u003e 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return new Venue(arr.get(0).getAsJsonObject().get(\"ADDRESS\").getAsString(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        arr.get(0).getAsJsonObject().get(\"LATITUDE\").getAsDouble(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        arr.get(0).getAsJsonObject().get(\"LONGITUDE\").getAsDouble(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        arr.get(0).getAsJsonObject().get(\"X\").getAsDouble(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        arr.get(0).getAsJsonObject().get(\"Y\").getAsDouble());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new ApiNullRequestException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 65,
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/java/duke/logic/api/requests/StaticMapUrlRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.api.requests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiFailedRequestException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Handles static, map URL requests to OneMap StaticMap API."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class StaticMapUrlRequest extends UrlRequest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String API_LINK \u003d \"https://developers.onemap.sg/commonapi/staticmap/getStaticImage?\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Construct the URL Request."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param param The location query."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public StaticMapUrlRequest(String param) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(param.replace(\" \", \"+\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes the URL request to StaticMap API."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return image The static map image"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiFailedRequestException If request fails."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiNullRequestException If request gives no valid results."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Image execute() throws ApiFailedRequestException, ApiNullRequestException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Image image;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            URL url \u003d new URL(API_LINK + param);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            image \u003d new Image(url.toExternalForm(), true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new ApiFailedRequestException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (image !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new ApiNullRequestException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 45,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/api/requests/UrlRequest.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.api.requests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiFailedRequestException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Abstract class representing individual URL requests."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public abstract class UrlRequest\u003cT\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected String param;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public UrlRequest(String param) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.param \u003d param;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes and sends the given URL request."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return response The response from the request."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception ApiFailedRequestException If the request fails."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception ApiNullRequestException If the request does not return a valid result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception ApiTimeoutException If the request times out."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public abstract T execute() throws ApiFailedRequestException, ApiNullRequestException, ApiTimeoutException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 25,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Adds a new event to users EventList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private final Event event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_ADDITION \u003d \"Got it. I\u0027ve added this task:\\n  \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new AddCommand with the given task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param event The event to add."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public AddCommand(Event event) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing task list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model.getEvents().add(event);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultText(MESSAGE_ADDITION + event);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 1,
      "Jefferson111": 34
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/AddSampleItineraryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Adds the given recommended list to users itineraries."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class AddSampleItineraryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Itinerary itinerary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs the command with the given sample itinerary."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws DukeDateTimeParseException If the datetime cannot be parsed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileLoadFailException If the file cannot be loaded."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public AddSampleItineraryCommand() throws DukeDateTimeParseException, FileLoadFailException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.itinerary \u003d Storage.readRecommendations();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        // Add to the list of Itineraries"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new CommandResultText(\"Successfully added this itinerary: \" + \"\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                + itinerary.printItinerary());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 27,
      "Inno97": 10
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Abstract class representing individual duke.logic.commands."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public abstract class Command\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The Model object containing task list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public abstract T execute(Model model) throws DukeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 2,
      "Jefferson111": 14
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Deletes a task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_DELETE \u003d \"Alright! I\u0027ve removed this task:\\n  \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new DeleteCommand with the given index."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Event event \u003d model.getEvents().remove(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new CommandResultText(MESSAGE_DELETE + event);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(Messages.ERROR_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 2,
      "Jefferson111": 37
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws FileNotSavedException, CorruptedFileException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.INFO, \"Event list is saved.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultText(model.getEvents());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 26
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/EditorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.EmptyVenueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.EditorManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EditorCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_EDITOR \u003d \"Editor mode is turned on. Please press any key to begin. \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"Enter new information to edit. Enter x to save changes and exit Editor mode.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText execute(Model model) throws EmptyVenueException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.activate(model.getEvents(), model.getEventVenues());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultText(MESSAGE_EDITOR);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 22
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultExit;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Exits SGTravel."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_BYE \u003d \"Bye. Hope to see you again soon!\\n\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultExit execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultExit(MESSAGE_BYE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 1,
      "Jefferson111": 19
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Finds a task by keyword."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new FindCommand with the given keyword."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param keyword The keyword to find."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d model.getEvents();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList result \u003d new EventList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event event: events) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (event.toString().contains(keyword)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                result.add(event);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(result);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 2,
      "Jefferson111": 37
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/FindPathCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.PathFinder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Finds a path between two Venues."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class FindPathCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Constraint constraint;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int startPointIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int endPointIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_FIND_PATH \u003d \"Path is found, map is opening...\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Constructor to initialise FindPathCommand."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param constraint The constraint of the location request."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param startPointIndex Index of starting location of trip."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param endPointIndex Index of ending location of trip."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FindPathCommand(String constraint, int startPointIndex, int endPointIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        switch (constraint) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"onlyMRT\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            this.constraint \u003d Constraint.MRT;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"onlyBus\":"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            this.constraint \u003d Constraint.BUS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"Hybrid\":"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            this.constraint \u003d Constraint.MIXED;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            this.constraint \u003d Constraint.CAR;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.endPointIndex \u003d endPointIndex;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.startPointIndex \u003d startPointIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.FINE, constraint + startPointIndex + \" \" + endPointIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultMap execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Event startPoint \u003d model.getEvents().get(startPointIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Venue startLocation \u003d startPoint.getLocation();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Event endPoint \u003d model.getEvents().get(endPointIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Venue endLocation \u003d endPoint.getLocation();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            // calculate the shortest path using algorithm with 2 locations as parameters"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            PathFinder pathFinder \u003d new PathFinder(model.getMap());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            ArrayList\u003cVenue\u003e route \u003d pathFinder.execute(startLocation, endLocation, this.constraint);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            CommandResultMap commandResult \u003d new CommandResultMap(MESSAGE_FIND_PATH);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            commandResult.setRoute(route);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new QueryOutOfBoundsException(\"EVENT\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 40,
      "Inno97": 2,
      "hongchuan97": 6,
      "Jefferson111": 30
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/FreeTimeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Retrieves the number of free hours."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class FreeTimeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int duration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new FreeTimeCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param duration The number of hours of free time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FreeTimeCommand(int duration) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.duration \u003d duration + 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new DukeException(Messages.ERROR_FILE_NOT_FOUND + \"Write the code!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 3,
      "Jefferson111": 27
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/GetBusRouteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Retrieves the bus route of a given bus."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class GetBusRouteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String bus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_BUS_ROUTE \u003d \"Here is the bus route:\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public GetBusRouteCommand(String bus) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.bus \u003d bus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            assert (this.bus.matches(\"-?\\\\d+(\\\\.\\\\d+)?\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            HashMap\u003cString, BusService\u003e busMap \u003d model.getMap().getBusMap();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            BusService bus \u003d busMap.get(this.bus);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            String result \u003d \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            for (String busCode : bus.getDirection(1)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                result \u003d result.concat(busCode + \"\\n\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(MESSAGE_BUS_ROUTE + result);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(Messages.PROMPT_NOT_INT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 9,
      "hongchuan97": 19,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/GetBusStopCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Retrieves all the bus stops."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "public class GetBusStopCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String buscode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public GetBusStopCommand(String busCode) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.buscode \u003d busCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, BusStop\u003e allBus \u003d model.getMap().getBusStopMap();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        if (allBus.containsKey(this.buscode)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(\"This is the information for this Bus Stop:\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    + allBus.get(this.buscode).getAddress() + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    + allBus.get(this.buscode).getLatitude() + \"\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                    + allBus.get(this.buscode).getLongitude());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new DukeException(Messages.ERROR_API_REQUEST_FAILED);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 3,
      "hongchuan97": 21,
      "Jefferson111": 6
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Shows the help message."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_HELP \u003d \"Here is the list of commands:\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"Add Tasks:\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    To Do: todo \u003cdesc\u003e\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Event: event \u003cdesc\u003e /at \u003ctime\u003e\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Deadline: deadline \u003cdesc\u003e /by \u003ctime\u003e\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Recurring Task: repeat \u003cdesc\u003e /by \u003ctime\u003e /every \u003cnum of days\u003e\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Do Within Task: within \u003cdesc\u003e /between \u003ctime\u003e /and \u003ctime\u003e\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"Modifying Tasks:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Snooze: snooze \u003cindex\u003e /to \u003cdate\u003e\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"Task Querying\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    Reminder: reminder\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            + \"    View by Date: fetch \u003cdate\u003e\\n\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(MESSAGE_HELP);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 14,
      "Jefferson111": 19
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Lists items in a task list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CommandResultText(model.getEvents());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 1,
      "Jefferson111": 18
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/LocationSearchCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.api.ApiParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Tests the URL connection."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class LocationSearchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue result;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *  Creates a new LocationSearchCommand with the given location."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param location The location to search."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiNullRequestException If the request fails."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiTimeoutException If the request times out."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public LocationSearchCommand(String location) throws ApiNullRequestException, ApiTimeoutException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        result \u003d ApiParser.getLocationSearch(location);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command with given param."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(\"These are the coordinates of your search:\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                + result.getAddress() + \"\\n\" + result.getLatitude() + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                + result.getLongitude());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 28,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/MarkDoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Marks a task as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class MarkDoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_MARK_DONE \u003d \"Nice! I\u0027ve marked this task as done:\\n  \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new MarkDoneCommand with the given index."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param index The index of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public MarkDoneCommand(int index) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Task task \u003d model.getEvents().get(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            task.setDone(true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(MESSAGE_MARK_DONE + task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(Messages.ERROR_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 2,
      "Inno97": 3,
      "Jefferson111": 36
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/NewItineraryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Creates a new custom itinerary."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class NewItineraryCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new CommandResultText(\"New Itinerary Created\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 21
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/PromptCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Class representing a command to handle a Prompt."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class PromptCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String prompt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new PromptCommand with the given prompt."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param prompt The prompt to display."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public PromptCommand(String prompt) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.prompt \u003d prompt;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command with given prompt."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The Model object containing task list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResult"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(prompt);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 16,
      "Jefferson111": 14
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RecommendationsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Agenda;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Recommends an itinerary based on number of trip days entered by user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class RecommendationsCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Itinerary itinerary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public RecommendationsCommand(Itinerary itinerary) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.itinerary \u003d itinerary;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cAgenda\u003e list \u003d model.getRecommendations(itinerary.getNumberOfDays(), itinerary);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assert (!list.isEmpty()) : \"list should not be null\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        itinerary.setTasks(list);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String result \u003d itinerary.printItinerary();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        // Until more locations are added"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (itinerary.getNumberOfDays() \u003e 7) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new DukeException(\"Too many days, enter less than 8 \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new CommandResultText(result);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 40,
      "Inno97": 1,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeDuplicateRouteException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.RouteNodeDuplicateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Adds a Route to RouteList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteAddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String MESSAGE_ADDITION \u003d \"Got it. I\u0027ve added this route:\\n  \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteAddCommand with the given name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param name The index of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteAddCommand(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given Route List and user interface."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws DukeDuplicateRouteException If there is a duplicate route."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws RouteNodeDuplicateException If there is a duplicate route node."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws DukeDuplicateRouteException, RouteNodeDuplicateException,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            FileNotSavedException, CorruptedFileException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteList routes \u003d model.getRoutes();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routes.add(new Route(name, \"\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(MESSAGE_ADDITION + name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 43
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Deletes a Route from RouteList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteDeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String MESSAGE_DELETION \u003d \"Got it. I\u0027ve deleted this Route:\\n  \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Deletes a Route at the given index in Route List."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the Route."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteDeleteCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws CorruptedFileException If the file is corrupted."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws CorruptedFileException, FileNotSavedException,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteList routes \u003d model.getRoutes();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String routeName \u003d routes.get(index).getName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routes.remove(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(MESSAGE_DELETION + routeName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(\"ROUTE\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 47
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.UnknownFieldException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Edits a Route in RouteList."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteEditCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String field;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String newValue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Edited the Route!\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteEditCommand with the given parameters."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of Route in RouteList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param field The variable of Route to edit."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param newValue The value to assign"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteEditCommand(int index, String field, String newValue) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.field \u003d field;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.newValue \u003d newValue;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given Route."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws CorruptedFileException If the file is corrupted."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file is not saved."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws UnknownFieldException If the queried field is not valid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws CorruptedFileException, FileNotSavedException,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            UnknownFieldException, QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Route route \u003d model.getRoutes().get(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            switch (field.toLowerCase()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            case \"name\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                route.setName(newValue);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            case \"description\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                route.setDescription(newValue);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new UnknownFieldException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(\"ROUTE\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 64
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteListAllCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Lists all Routes in RouteList."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteListAllCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given Route List and user interface."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(model.getRoutes());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 19
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Lists a given Route in RouteList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteListCommand with the given index."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the Route in RouteList."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteListCommand(int index) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given Route List and user interface."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(model.getRoutes().get(index));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(\"ROUTE\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 36
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteNodeAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.RouteNodeDuplicateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Adds a RouteNode to RouteList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeAddCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private RouteNode node;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexRoute;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexNode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private boolean isEmptyIndexNode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String MESSAGE_ADDITION \u003d \"Got it. I\u0027ve added this route node:\\n  \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteNodeAddCommand with the given node."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param node The node to add."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeAddCommand(RouteNode node, int indexRoute, int indexNode, boolean isEmptyIndexNode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.node \u003d node;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexRoute \u003d indexRoute;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexNode \u003d indexNode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.isEmptyIndexNode \u003d isEmptyIndexNode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.FINE, ((BusStop) node).getBusCode() + \" \" + indexRoute + \" \" + indexNode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws CorruptedFileException If the file is corrupted."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file is not saved."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws RouteNodeDuplicateException If there is a duplicate RouteNode."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws CorruptedFileException, FileNotSavedException,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteNodeDuplicateException, QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d model.getRoutes().get(indexRoute);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isEmptyIndexNode) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.addNode(node);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else if (indexNode \u003e\u003d 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                route.addNode(node, indexNode);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            } catch (QueryOutOfBoundsException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                route.addNode(node);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(\"ROUTE_NODE\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.save();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultText(MESSAGE_ADDITION + node.toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 59,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteNodeDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Deletes a RouteNode from RouteList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeDeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexRoute;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexNode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String MESSAGE_DELETION \u003d \"Got it. I\u0027ve deleted this Route Node:\\n  \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Deletes a Route Node at the given index and given Route."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexRoute The index of the Route."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexNode The index of the Route Node."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeDeleteCommand(int indexRoute, int indexNode) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexRoute \u003d indexRoute;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexNode \u003d indexNode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws CorruptedFileException If the file is corrupted."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file is not saved."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws CorruptedFileException, FileNotSavedException,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Route route \u003d model.getRoutes().get(indexRoute);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String address \u003d route.getNode(indexNode).getAddress();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            route.remove(indexNode);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(MESSAGE_DELETION + address);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(\"ROUTE_NODE\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 50
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteNodeEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.InputNotDoubleException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.UnknownConstraintException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.UnknownFieldException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Edits a RouteNode in RouteList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeEditCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexRoute;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexNode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String var;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String val;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"Edited the Route Node!\\n  \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteNodeEditCommand with the given parameters."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexRoute The index of Route in RouteList."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexNode The index of Node in RouteList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param var The variable of Route to edit."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param val The value to assign"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeEditCommand(int indexRoute, int indexNode, String var, String val) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexRoute \u003d indexRoute;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexNode \u003d indexNode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.var \u003d var;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.val \u003d val;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws CorruptedFileException If the file is corrupted."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file is not saved."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws InputNotDoubleException If the input is not an integer."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws UnknownFieldException If the field is unknown."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws UnknownConstraintException If the constraint is unknown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws CorruptedFileException, FileNotSavedException,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            InputNotDoubleException, QueryOutOfBoundsException, UnknownFieldException, UnknownConstraintException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            RouteNode node \u003d model.getRoutes().get(indexRoute).getNode(indexNode);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            switch (var.toLowerCase()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            case \"address\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                node.setAddress(val);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            case \"description\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                node.setDescription(val);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            case \"type\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                node.setType(Constraint.valueOf(val));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            case \"latitude\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                node.setLatitude(Integer.parseInt(val));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            case \"longitude\":"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                node.setLongitude(Integer.parseInt(val));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new UnknownFieldException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            model.save();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new InputNotDoubleException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new UnknownConstraintException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(\"ROUTE_NODE\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 84
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/RouteNodeListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Lists a given RouteNode in RouteList."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteNodeListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexRoute;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private int indexNode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteNodeListCommand with the given parameters."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexRoute The index of the Route in RouteList."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param indexNode The index of the Route Node in Route."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNodeListCommand(int indexRoute, int indexNode) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexRoute \u003d indexRoute;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.indexNode \u003d indexNode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given Route and user interface."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResultText."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws QueryOutOfBoundsException If the query is out of bounds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText execute(Model model) throws QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new CommandResultText(model.getRoutes().get(indexRoute).getNode(indexNode));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new QueryOutOfBoundsException(\"ROUTE_NODE\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 39
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/StaticMapCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiFailedRequestException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultImage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.api.ApiParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Shows a map of location from StaticMap API."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class StaticMapCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String DIMENSIONS \u003d \"512\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String ZOOM_LEVEL \u003d \"18\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String RED_VALUE \u003d \"255\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String GREEN_VALUE \u003d \"122\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String BLUE_VALUE \u003d \"0\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String param;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Image image;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new StaticMapCommand for the given location query."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param location The location to query."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiNullRequestException If request fails."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiTimeoutException If request times out."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public StaticMapCommand(String location) throws ApiNullRequestException, ApiTimeoutException,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ApiFailedRequestException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.param \u003d location;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Venue query \u003d ApiParser.getLocationSearch(location);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.image \u003d ApiParser.getStaticMap(ApiParser.generateStaticMapParams(DIMENSIONS, DIMENSIONS, ZOOM_LEVEL,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                String.valueOf(query.getLatitude()), String.valueOf(query.getLongitude()), \"\", \"\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                ApiParser.createStaticMapPoint(String.valueOf(query.getLatitude()),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                String.valueOf(query.getLongitude()), RED_VALUE, GREEN_VALUE, BLUE_VALUE, location)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Executes this command on the given user interface."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The Model object containing task list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The CommandResult containing the image from StaticMap."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiNullRequestException If request fails."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws ApiTimeoutException If request times out."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultImage execute(Model model) throws ApiNullRequestException, ApiTimeoutException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new CommandResultImage(\"Showing map of \" + param, image);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Inno97": 53,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/ViewScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultCalender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Command to allow users to view their calender."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ViewScheduleCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String MESSAGE_SHOW_CALENDAR \u003d \"Calendar is launching...\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes this command on the given task list and user interface."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param model The model object containing information about the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultCalender execute(Model model) throws DukeException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        CommandResultCalender commandResult \u003d new CommandResultCalender(MESSAGE_SHOW_CALENDAR);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        commandResult.setEvents(model.getEvents());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 2,
      "Jefferson111": 19
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/Calenderable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Interface representing a calender."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public interface Calenderable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    EventList getEvents();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setEvents(EventList events);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Abstract class which represents the result of a commands execution as a string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public abstract class CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 8,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/CommandResultCalender.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines the command result of any calender command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class CommandResultCalender extends CommandResult implements Calenderable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a basic CommandResultCalender object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message Message for ui to display."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultCalender(String message) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setEvents(EventList events) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventList getEvents() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 24,
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/CommandResultExit.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines the command result of an exit command as a string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class CommandResultExit extends CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultExit(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 13,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/CommandResultImage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines the command result of any command containing an image."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class CommandResultImage extends CommandResult implements Imageable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Image image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a basic CommandResultImage object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message Message for ui to display."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultImage(String message, Image image) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.image \u003d image;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Image getImage() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return image;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return message;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 27,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/CommandResultMap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines the command result of a command needing a map."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class CommandResultMap extends CommandResult implements Routeable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private ArrayList\u003cVenue\u003e route;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a basic CommandResultMap object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message Message for ui to display."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultMap(String message) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public ArrayList\u003cVenue\u003e getRoute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return route;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public void setRoute(ArrayList\u003cVenue\u003e route) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.route \u003d route;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 23,
      "hongchuan97": 4,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/CommandResultText.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines the result of various commands as a string."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class CommandResultText extends CommandResult {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a basic CommandResultImage object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message Message for ui to display."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText(String message) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Alternative constructor that helps to create text for a list of events."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public CommandResultText(EventList events) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        message \u003d \"Here are the list of events:\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event t : events) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            message +\u003d (i + \". \" + t + \"\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            i +\u003d 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor that helps to create text for a list of Routes."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText(RouteList routes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        message \u003d \"Here is the information of Routes:\\n\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (Route route: routes.getRoutes()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            message +\u003d route.getDescription() + \"\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor that helps to create text for a Route."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText(Route route) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        message \u003d \"Here is the information of the Route:\\n\" + route.getName() + \"\\n\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (RouteNode node: route.getNodes()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (node instanceof BusStop) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                message +\u003d ((BusStop) node).getBusCode() + \" \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else if (node instanceof TrainStation) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                message +\u003d ((TrainStation) node).getTrainCodes() + \" \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            message +\u003d node.getAddress() + \"\\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor that helps to create text for a Route Node."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CommandResultText(RouteNode node) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        message \u003d \"Here is the information of the \";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (node instanceof BusStop) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            message +\u003d \"Bus Stop:\\n\" + ((BusStop) node).getBusCode() + \"\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else if (node instanceof TrainStation) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            message +\u003d \"Train Station:\\n\" + ((TrainStation) node).getTrainCodes() + \"\\n\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        message +\u003d  node.getAddress() + \"\\n\" + node.getDescription() + \"\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + \"(\" + node.getType().toString() + \", \" + node.getCoordinate() + \")\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 67,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/Eventable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Interface representing an event list."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public interface Eventable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    EventList getEvents();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setEvents(EventList events);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 13
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/Imageable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Interface representing an image."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public interface Imageable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    Image getImage();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 7,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/PanelResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.VenueList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Represents the information that is to be displayed in side panel."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class PanelResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private VenueList venues;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isLock;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isReady;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int field;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public PanelResult() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isReady \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs a PanelResult object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param event The event to be displayed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param venues The venues to be displayed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param isLock Whether an event is locked on."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param index The index of the event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param field The index of the field that is selected."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public PanelResult(Event event, VenueList venues, boolean isLock, int index, int field) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venues \u003d venues;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.isLock \u003d isLock;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.field \u003d field;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isReady \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Checks if the result is ready."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isReady() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isReady;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to get the description of the event."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (event \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return event.getLocation().getAddress();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the start date of the Event."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getStartDate() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return event.getStartDate().toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the end date of the Event."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getEndDate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return event.getEndDate().toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the color of the venues."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Paint getVenueColor(int index) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (this.index \u003d\u003d index) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (isLock) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                return Paint.valueOf(\"orange\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return Paint.valueOf(\"green\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return Paint.valueOf(\"blue\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Venue getVenue(int index) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return venues.get(index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return venues.size();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the index of the field that is currently selected."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public int getField() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!isLock) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return field;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 101
    }
  },
  {
    "path": "src/main/java/duke/logic/commands/results/Routeable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands.results;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Interface representing a route."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public interface Routeable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    ArrayList\u003cVenue\u003e getRoute();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    void setRoute(ArrayList\u003cVenue\u003e route);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 9,
      "hongchuan97": 3,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/Conversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Abstract class representing individual Conversation."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public abstract class Conversation {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected String result;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected String prompt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected int state;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isFinished;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected int attempts;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected static final int ATTEMPTS_LIMIT \u003d 3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Initialises the Prompt object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Conversation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isFinished \u003d false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        attempts \u003d 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        state \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Executes Prompt and returns a String reply."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public abstract void execute(String input);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Builds the result of the conversation string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected abstract void buildResult();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getPrompt() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return prompt;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets result of prompt."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return result The result"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getResult() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (result !\u003d null) : \"result should not be null\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks and sets input if is int."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return String The input if is int"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected Boolean isIntInput(String input) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserUtil.getIndex(input);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_NOT_INT;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks and sets input if is dateTime."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input The input"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return String The input if is dateTime"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected Boolean isDateInput(String input) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            ParserTimeUtil.parseStringToDate(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (DukeDateTimeParseException e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_NOT_DATE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to cancel the conversation."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The userInput from UI object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void tryCancelConversation(String userInput) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (attempts \u003e ATTEMPTS_LIMIT || \"cancel\".equals(userInput)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d \"cancel\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            isFinished \u003d true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isFinished() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isFinished;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void setFinished(boolean finished) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isFinished \u003d finished;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 37,
      "Jefferson111": 68
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/ConversationManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.ConversationParser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.PromptParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Manages two-way communications between SGTravel and the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ConversationManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isFinished;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Conversation conversation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ConversationManager() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isFinished \u003d true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Starts or continues a conversation with Duke."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input The user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void converse(String input) throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (tryStartConversation(input)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversation.execute(input);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryEndConversation();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to end a conversation. If the conversation is still ongoing, nothing happens."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void tryEndConversation() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (conversation.isFinished()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            isFinished \u003d true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to start a conversation. If the conversation is still ongoing, nothing happens."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input The user input from ui."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return true if a conversation is started, false otherwise."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeException If no conversation could be started."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean tryStartConversation(String input) throws DukeException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isFinished) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            startConversation(input);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            isFinished \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a Conversation object based on input."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input The words from user input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void startConversation(String input) throws DukeException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversation \u003d ConversationParser.parse(input);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets a command from the ConversationManager."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return Command for logic to execute."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeException If the result could not be parse by parser."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Command getCommand() throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isFinished) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return Parser.parseComplexCommand(getResult());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return PromptParser.parseCommand(getPrompt());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the result of the conversation."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return result The String result made from Conversation."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String getResult() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String result \u003d conversation.getResult();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        clearContext();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the prompt from Conversation object if applicable."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The prompt."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String getPrompt() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (conversation !\u003d null) : \"Conversation should not be null\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return conversation.getPrompt();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Clears the current context of the conversation."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void clearContext() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isFinished \u003d true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversation \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Jefferson111": 106
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/DeleteConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a delete command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class DeleteConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"delete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public DeleteConversation() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_DELETE_STARTER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            index \u003d input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (index !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 10,
      "Jefferson111": 23
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/FindConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a find command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class FindConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"find\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FindConversation() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_FIND_STARTER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        keyword \u003d input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        buildResult();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (keyword !\u003d null) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + keyword;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 7,
      "Jefferson111": 22
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/FindPathConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a findPath command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class FindPathConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"findPath\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String constraint;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String startPointIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String endPointIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FindPathConversation() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_FIND_STARTER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (state) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ROUTE_STARTING_POINT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            constraint \u003d input;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            state++;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                startPointIndex \u003d input;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                prompt \u003d Messages.PROMPT_ROUTE_ENDING_POINT;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                state++;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                attempts \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (isIntInput(input)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                endPointIndex \u003d input;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                buildResult();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                setFinished(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            prompt \u003d Messages.PROMPT_ERROR;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (constraint !\u003d null \u0026\u0026 startPointIndex !\u003d null \u0026\u0026 endPointIndex !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + constraint + \" \" + startPointIndex + \" \" + endPointIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 11,
      "Jefferson111": 43
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/FreeTimeConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a findTime command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class FreeTimeConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"findtime\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public FreeTimeConversation() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_FREETIME_STARTER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            duration \u003d input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (duration !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + duration;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 8,
      "Jefferson111": 24
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/GetBusStopConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a busStop command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class GetBusStopConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"busStop\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String busCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public GetBusStopConversation() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_GETBUSROUTE_STARTER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            busCode \u003d input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (busCode !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + busCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 8,
      "Jefferson111": 24
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/MarkDoneConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a mark done command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class MarkDoneConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String command \u003d \"done\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public MarkDoneConversation() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_MARKDONE_STARTER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (isIntInput(input)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            index \u003d input;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            buildResult();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        tryCancelConversation(input);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (index !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result \u003d command + \" \" + index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 9,
      "Jefferson111": 24
    }
  },
  {
    "path": "src/main/java/duke/logic/conversations/SearchConversation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Handles the conversation occurring when a search command is entered."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class SearchConversation extends Conversation {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String command \u003d \"search\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public SearchConversation() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_SEARCH_STARTER;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void execute(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        prompt \u003d Messages.PROMPT_SEARCH_SUCCESS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        location \u003d input.replace(\" \", \"+\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        buildResult();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        setFinished(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected void buildResult() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (location !\u003d null) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            result \u003d command + \" \" + location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            setFinished(true);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            attempts++;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 31
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/ConversationParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeUnknownCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.Conversation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.DeleteConversation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.FindConversation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.FindPathConversation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.FreeTimeConversation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.GetBusStopConversation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.MarkDoneConversation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.SearchConversation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Parser for conversations. Selects conversation based on user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ConversationParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the input and returns a Conversation object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input The user input from Ui."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return A conversation object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeUnknownCommandException If input is undefined."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Conversation parse(String input) throws DukeUnknownCommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new MarkDoneConversation();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new DeleteConversation();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"findtime\":"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new FreeTimeConversation();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"busStop\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new GetBusStopConversation();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"findPath\":"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new FindPathConversation();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new FindConversation();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"search\":"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new SearchConversation();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 43
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/EditorParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.EventSelectionOutOfBoundsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.EditorManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.api.ApiParser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Parser for editing an Event object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EditorParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int DESCRIPTION \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int START_DATE \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int END_DATE \u003d 2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the user input and eventField and edits the Event object accordingly."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The user input from the Ui."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param eventField The index of the field."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param event The Event object that is to be modified."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeException If the Event cannot be edited."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static void parse(String userInput, int eventField, Event event) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.FINE, \"Editing: \" + userInput + \" \" + event);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (userInput) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"end\": case \"close\": case \"x\":"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            EditorManager.deactivate();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (eventField) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case DESCRIPTION:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            event.setLocation(ApiParser.getLocationSearch(userInput));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            event.setDescription(userInput);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case START_DATE:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            event.setStartDate(ParserTimeUtil.parseStringToDate(userInput));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case END_DATE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            event.setEndDate(ParserTimeUtil.parseStringToDate(userInput));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new EventSelectionOutOfBoundsException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 51
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeUnknownCommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.commands.AddSampleItineraryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.EditorCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.FindPathCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.FreeTimeCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.GetBusRouteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.GetBusStopCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.LocationSearchCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.MarkDoneCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.PromptCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.RecommendationsCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteAddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteDeleteCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteEditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteNodeDeleteCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteNodeEditCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteNodeListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.StaticMapCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.ViewScheduleCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Parser for commands entered by the user. It reads from standard input and returns Command objects."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the userInput and return a Command object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param input Input created by the ConversationManager object or user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The corresponding Command object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeException If userInput is undefined."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Command parseComplexCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String commandWord \u003d getCommandWord(input);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"fetch\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new ViewScheduleCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new EditorCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new MarkDoneCommand(ParserUtil.getIndex(getWord(input)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new DeleteCommand(ParserUtil.getIndex(getWord(input)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new FindCommand(getWord(input));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"findtime\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new FreeTimeCommand(ParserUtil.getIndex(input));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"search\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new LocationSearchCommand(getWord(input));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"busStop\":"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new GetBusStopCommand(getWord(input));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"busRoute\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new GetBusRouteCommand(getWord(input));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new AddCommand(ParserUtil.createEvent(input));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"findPath\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new FindPathCommand(input.strip().split(\" \")[1], ParserUtil.getFirstIndex(input),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    ParserUtil.getSecondIndex(input));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"recommend\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            return new RecommendationsCommand(ParserUtil.createRecommendation(input));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case \"cancel\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new PromptCommand(Messages.PROMPT_CANCEL);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"map\":"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new StaticMapCommand(getWord(input));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeAdd\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteAddCommand(getWord(input));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeAdd\":"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return ParserUtil.createRouteNodeAddCommand(getWord(input));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeEdit\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new RouteEditCommand(ParserUtil.getFirstIndex(input), getEventIndexInList(1, input),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    getEventIndexInList(0, input));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeEdit\":"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new RouteNodeEditCommand(ParserUtil.getFirstIndex(input),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    ParserUtil.getSecondIndex(input), ParserUtil.getFieldInList(3, 4, getWord(input)),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    ParserUtil.getFieldInList(4, 4, getWord(input)));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeDelete\":"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteDeleteCommand(ParserUtil.getIndex(getWord(input)));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeDelete\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return new RouteNodeDeleteCommand(ParserUtil.getFirstIndex(input),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    ParserUtil.getSecondIndex(input));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeShow\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteListCommand(ParserUtil.getIndex(getWord(input)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"routeNodeShow\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteNodeListCommand(ParserUtil.getFirstIndex(getWord(input)),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    ParserUtil.getSecondIndex(getWord(input)));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        case \"addThisList\":"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            return new AddSampleItineraryCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets command word from the userInput."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The command word."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static String getCommandWord(String userInput) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return userInput.strip().split(\" \")[0];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets word from the userInput."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The word."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static String getWord(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return userInput.strip().split(\" \", 2)[1];"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the field at a given index in a String, delimited by whitespace."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the field."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The field."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static String getEventIndexInList(int index, String userInput) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (index \u003d\u003d 1) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return userInput.strip().split(\" \", 4)[2];"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return userInput.strip().split(\" \", 4)[3];"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 6,
      "Inno97": 40,
      "Jefferson111": 103
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/ParserStorageUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Parser for Storage related operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ParserStorageUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses a Event from String format back to Event."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param line The String description of an Event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The corresponding Event object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Event createTaskFromStorage(String line) throws DukeDateTimeParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String[] eventParts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String type \u003d eventParts[0].strip();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String status \u003d eventParts[1].strip();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String description \u003d eventParts[2].strip();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (\"E\".equals(type)) : \"There should only be events.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(eventParts[3].strip());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(eventParts[4].strip());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Venue location \u003d getLocationFromStorage(eventParts);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event \u003d new Event(description, start, end, location);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        event.setDone(\"true\".equals(status));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses part of a task back to a Location."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static Venue getLocationFromStorage(String[] taskParts) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String address \u003d taskParts[5].strip();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double longitude \u003d Double.parseDouble(taskParts[7].strip());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double latitude \u003d Double.parseDouble(taskParts[6].strip());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double distX \u003d Double.parseDouble(taskParts[7].strip());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double distY \u003d Double.parseDouble(taskParts[8].strip());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new Venue(address, latitude, longitude, distX, distY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses an Event from Event to String format."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param event The Event."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The corresponding String format of the task object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static String toStorageString(Event event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return \"E | \" + event.isDone() + \" | \" + event.getDescription() + \" | \" + event.getStartDate()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                + \" | \" + event.getEndDate() + \" | \" + event.getLocation();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Parses a route with its nodes from routes to String format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param route The route."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return routeString The corresponding String format of the route object."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String toRouteStorageString(Route route) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String routeString \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeString +\u003d \"route | \" + route.getName() + \" | \" + route.getDescription() + \"\\n\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (RouteNode node: route.getNodes()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (node instanceof BusStop) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                routeString +\u003d \"node | BUS | \" + ((BusStop) node).getBusCode() + \" | \" + node.getAddress() + \" | \""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        + node.getDescription() + \" | \" + node.getLatitude() + \" | \" + node.getLongitude() + \"\\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            } else if (node instanceof TrainStation) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                routeString +\u003d \"node | MRT | \" + ((TrainStation) node).getTrainCodes() + \" | \" + node.getAddress()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        + \" | \" + node.getDescription() + \" | \" + node.getLatitude() + \" | \" + node.getLongitude()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        + \"\\n\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return routeString;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses a bus stop from String format back to BusStop."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param line The String description of a bus stop."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return The corresponding BusStop object."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static BusStop createBusStopDataFromStorage(String line) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String[] busStopData \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String busCode \u003d busStopData[0].strip();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String description \u003d busStopData[1].strip();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String address \u003d busStopData[2].strip();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double latitude \u003d Double.parseDouble(busStopData[3].strip());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double longitude \u003d Double.parseDouble(busStopData[4].strip());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop busStop \u003d new BusStop(busCode, address, description, latitude, longitude);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (int i \u003d 5; i \u003c busStopData.length; i++) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            busStop.addBuses(busStopData[i].strip());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return busStop;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses a bus from String format back to BusService."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param line The String description of a bus."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return The corresponding BusService object."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static BusService createBusFromStorage(String line) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String[] busData \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        boolean changedDirection \u003d false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        BusService busService \u003d new BusService(busData[0].strip());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (int i \u003d 1; i \u003c busData.length; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            String buffer \u003d busData[i].strip();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (\"change\".equals(buffer)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                changedDirection \u003d true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (changedDirection) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                busService.addRoute(buffer, 2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                busService.addRoute(buffer, 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return busService;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Parses part of a task back to a Location."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static Venue getVenueFromStorage(String line) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String[] taskParts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String address \u003d taskParts[0].strip();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        double longitude \u003d Double.parseDouble(taskParts[1].strip());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        double latitude \u003d Double.parseDouble(taskParts[2].strip());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        double distX \u003d Double.parseDouble(taskParts[3].strip());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        double distY \u003d Double.parseDouble(taskParts[4].strip());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new Venue(address, latitude, longitude, distX, distY);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Parses a train station from String format back to Train."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @param line The String description of a train station."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * @return The corresponding Train object."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public static TrainStation createTrainFromStorage(String line) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String[] trainParts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        String address \u003d trainParts[0].strip();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double longitude \u003d Double.parseDouble(trainParts[2].strip());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        double latitude \u003d Double.parseDouble(trainParts[1].strip());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        ArrayList\u003cString\u003e trainCode \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        for (int i \u003d 3; i \u003c trainParts.length; i++) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            trainCode.add(trainParts[i].strip());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new TrainStation(trainCode, null, address, latitude, longitude);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Parses a route from String format back to route."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param line The String description of a route."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The corresponding Route object."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static Route createRouteFromStorage(String line) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String[] details \u003d line.split(\"\\\\|\", 3);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new Route(new ArrayList\u003c\u003e(), details[1].strip(), details[2].strip());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Parses a route node from String format back to a route node."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param line The String description of a route node."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The corresponding RouteNode object."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static RouteNode createNodeFromStorage(String line) throws CorruptedFileException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String[] details \u003d line.split(\"\\\\|\", 7);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        switch (details[1].strip()) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"BUS\":"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new BusStop(details[2].strip(), details[3].strip(), details[4].strip(),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    Double.parseDouble(details[5].strip()),  Double.parseDouble(details[6].strip()));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        case \"MRT\":"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new TrainStation(new ArrayList\u003cString\u003e(), details[3].strip(), details[4].strip(),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    Double.parseDouble(details[5].strip()),  Double.parseDouble(details[6].strip()));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new CorruptedFileException(\"ROUTE.TXT\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns a list of todo\u0027s from a text file."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The List of todo\u0027s."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static List\u003cTodo\u003e getTodoListFromStorage(String line) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cTodo\u003e todoList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String[] todoParts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (String todoPart : todoParts) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Todo todo \u003d new Todo(todoPart);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            todoList.add(todo);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return todoList;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public static int getNumberFromStorage(String line) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String[] recommendParts \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return Integer.parseInt(recommendParts[1]);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 36,
      "Inno97": 57,
      "hongchuan97": 66,
      "Jefferson111": 55
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/ParserTimeUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.enumerations.TimePatternType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.TemporalAccessor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parser for Time related operations."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ParserTimeUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a String into a LocalDateTime object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param line The input String for Date extraction."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The date and time, missing information wil be padded with current time information."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DukeDateTimeParseException If the format is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static LocalDateTime parseStringToDate(String line) throws DukeDateTimeParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] patterns \u003d {\"[\u0027next \u0027][\u0027this \u0027]E\", \"[\u0027this \u0027][\u0027next \u0027]EEEE\", \"dd/MM/yyyy HHmm\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                             \"dd/MM/yy HHmm\", \"HHmm\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                             \"dd/MM/yy\", \"yyyy-MM-dd\u0027T\u0027HH:mm[:ss.n]\"};"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        TimePatternType[] types \u003d {TimePatternType.DAY_OF_WEEK, TimePatternType.DAY_OF_WEEK,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            TimePatternType.DATE_TIME, TimePatternType.DATE_TIME, TimePatternType.TIME, TimePatternType.DATE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            TimePatternType.DATE_TIME};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c patterns.length;) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                TemporalAccessor accessor \u003d DateTimeFormatter.ofPattern(patterns[i]).parse(line);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                switch (types[i]) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                case DAY_OF_WEEK:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalDateTime localDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    return localDateTime.with(TemporalAdjusters.nextOrSame(DayOfWeek.from(accessor)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                case DATE_TIME:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    return LocalDateTime.from(accessor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                case TIME:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalDate localDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    return localDate.atTime(LocalTime.from(accessor));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                case DATE:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    LocalTime localTime \u003d LocalTime.now();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    return localTime.atDate(LocalDate.from(accessor));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                ++i;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new DukeDateTimeParseException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 1,
      "-": 51,
      "Jefferson111": 4
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeEmptyFieldException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeUnknownCommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.RouteNodeAddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.api.ApiParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Todo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Defines parsing methods for utility functions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the userInput and return a new to-do constructed from it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The new to-do object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected static Todo createTodo(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String description \u003d userInput.substring(\"todo\".length()).strip();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new Todo(description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the userInput and return a new Event constructed from it."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The new Event object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected static Event createEvent(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String[] withinDetails \u003d userInput.substring(\"event\".length()).strip().split(\"between| and\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (withinDetails.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (withinDetails.length !\u003d 3 || withinDetails[1] \u003d\u003d null || withinDetails[2] \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (withinDetails[0].strip().isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(Messages.ERROR_DESCRIPTION_EMPTY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(withinDetails[1].strip());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(withinDetails[2].strip());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new Event(withinDetails[0].strip(), start, end);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    protected static RouteNode createRouteNode(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String[] withinDetails \u003d userInput.strip().split(\"at |with \", 2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (withinDetails.length !\u003d 2) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String[] indexes \u003d withinDetails[0].split(\" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String type \u003d userInput.substring(withinDetails[0].length()).strip().substring(0, 4);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (!(\"with\".equals(type) || \"at\".equals(type.substring(0, 2)))) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String[] details;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (type.substring(0, 2).equals(\"at\")) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            details \u003d withinDetails[1].strip().split(\"by \");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            switch (details[1].toUpperCase()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            case \"BUS\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                BusStop result \u003d new BusStop(details[0].strip(), null, null, 0, 0);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new DukeException(Messages.ERROR_COMMAND_UNKNOWN);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            details \u003d withinDetails[1].split(\"by \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String[] coordinateStrings \u003d details[0].strip().split(\" \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            assert (coordinateStrings.length \u003d\u003d 2);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            double[] coordinates \u003d new double[2];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (int i \u003d 0; i \u003c coordinates.length; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                coordinates[i] \u003d Double.parseDouble(coordinateStrings[i].strip());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Parses the userInput and return a new Itinerary constructed from it."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return The new Itinerary object."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    protected static Itinerary createRecommendation(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String[] itineraryDetails \u003d userInput.substring(\"recommend\".length()).strip().split(\"between| and\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (itineraryDetails.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (itineraryDetails.length !\u003d 3 || itineraryDetails[1] \u003d\u003d null || itineraryDetails[2] \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        if (itineraryDetails[0].strip().isEmpty()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(Messages.ERROR_DESCRIPTION_EMPTY);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(itineraryDetails[1].strip());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(itineraryDetails[2].strip());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Venue hotelLocation \u003d ApiParser.getLocationSearch(itineraryDetails[0].strip());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.FINE, hotelLocation.getAddress());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return new Itinerary(start, end, hotelLocation);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the userInput and return an index extracted from it."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The index."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static int getIndex(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            int index \u003d Integer.parseInt(userInput.strip());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return index - 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Parses the userInput and return an index extracted from it safely."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The index."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected static int getSafeIndex(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            String index \u003d userInput.split(\" \")[1].strip();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return Integer.parseInt(index) - 1;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(Messages.ERROR_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Parses the userInput with 2 indexes and return the first index extracted from it."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The index."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static int getFirstIndex(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Matcher matcher \u003d Pattern.compile(\"\\\\d+\").matcher(userInput);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (matcher.find()) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                return Integer.parseInt(matcher.group()) - 1;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeEmptyFieldException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeUnknownCommandException();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Parses the userInput with 2 indexes and return the second index extracted from it."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The index."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static int getSecondIndex(String userInput) throws DukeException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Matcher matcher \u003d Pattern.compile(\"\\\\d+\").matcher(userInput);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (!matcher.find()) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                throw new DukeEmptyFieldException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (matcher.find()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                return Integer.parseInt(matcher.group()) - 1;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeEmptyFieldException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeException(Messages.ERROR_INPUT_INVALID_FORMAT);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new RouteNodeAddCommand from input, factoring for empty indexNode field."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param input Input created by the ConversationManager object or user input."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return RouteNodeAddCommand The command."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static RouteNodeAddCommand createRouteNodeAddCommand(String input) throws DukeException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteNodeAddCommand(ParserUtil.createRouteNode(input),"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    ParserUtil.getFirstIndex(input), ParserUtil.getSecondIndex(input), false);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (DukeEmptyFieldException e) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return new RouteNodeAddCommand(ParserUtil.createRouteNode(input),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    ParserUtil.getFirstIndex(input), 0, true);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the field at index in a String list delimited by whitespace."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of field."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param listSize The total size of String list."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param userInput The userInput read by the user interface."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The field."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static String getFieldInList(int index, int listSize, String userInput) throws DukeException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String[] fields \u003d userInput.split(\" \", listSize);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (index \u003e\u003d 0 \u0026\u0026 index \u003c\u003d listSize) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return fields[index - 1].strip();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new DukeException(Messages.ERROR_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 38,
      "Inno97": 95,
      "Jefferson111": 90
    }
  },
  {
    "path": "src/main/java/duke/logic/parsers/PromptParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.PromptCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Parser for a prompt command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class PromptParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static Command parseCommand(String prompt) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new PromptCommand(prompt);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 13
    }
  },
  {
    "path": "src/main/java/duke/logic/selectors/EventFieldSelector.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class EventFieldSelector implements Selector {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int FIELD_SIZE \u003d 3;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int index \u003d 0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void feedKeyCode(KeyCode keyCode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (keyCode.equals(KeyCode.DOWN)) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (keyCode.equals(KeyCode.UP)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            index--;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            index +\u003d FIELD_SIZE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        index %\u003d FIELD_SIZE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 24
    }
  },
  {
    "path": "src/main/java/duke/logic/selectors/LocationHelper.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Helper class to check the relationship between 2 Venues."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LocationHelper {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Checks if the one venue is above/below/left/right of another venue."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param keyCode The keyCode to decide up/down/left/right."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param currentVenue The current venue."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param v The other venue."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return true if v is indeed above/below/left/right of currentVenue."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static boolean checkDirection(KeyCode keyCode, Venue currentVenue, Venue v) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (keyCode.equals(KeyCode.UP)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return isUp(currentVenue, v);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (keyCode.equals(KeyCode.DOWN)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return isDown(currentVenue, v);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (keyCode.equals(KeyCode.LEFT)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return isLeft(currentVenue, v);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return isRight(currentVenue, v);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static boolean isRight(Venue currentVenue, Venue v) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return v.getLongitude() \u003e\u003d currentVenue.getLongitude();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static boolean isLeft(Venue currentVenue, Venue v) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return v.getLongitude() \u003c\u003d currentVenue.getLongitude();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static boolean isDown(Venue currentVenue, Venue v) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return v.getLatitude() \u003c\u003d currentVenue.getLatitude();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Checks if v is above currentVenue."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static boolean isUp(Venue currentVenue, Venue v) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return v.getLatitude() \u003e\u003d currentVenue.getLatitude();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 48
    }
  },
  {
    "path": "src/main/java/duke/logic/selectors/LocationSelector.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.EmptyVenueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.VenueList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Iterates through locations using proximity of Venue via arrow keys."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LocationSelector implements Selector {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private VenueList venues;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isLock;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs a new Location Selector object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param venues The venues to be iterated through."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws EmptyVenueException If there is no venues in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public LocationSelector(VenueList venues) throws EmptyVenueException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (venues.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new EmptyVenueException();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venues \u003d venues;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        index \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isLock \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Feeds key event to location selector to determine the next location selected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param keyCode The keyCode of the key pressed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void feedKeyCode(KeyCode keyCode) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isLock) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (keyCode.equals(KeyCode.ENTER)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            lock();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else if (keyCode.isArrowKey()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            index \u003d find(keyCode);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Finds the next nearest Venue given the KeyCode."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param keyCode KeyCode indicating up/down/left/right."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The index of the nearest Venue in the given keycode direction."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int find(KeyCode keyCode) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Venue currentVenue \u003d venues.get(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double min \u003d Double.POSITIVE_INFINITY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int nextIndex \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (int i \u003d 0; i \u003c venues.size(); ++i) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (i \u003d\u003d index) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Venue v \u003d venues.get(i);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (LocationHelper.checkDirection(keyCode, currentVenue, v)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u0026\u0026 v.getDistance(currentVenue) \u003c min) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                nextIndex \u003d i;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                min \u003d v.getDistance(currentVenue);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return nextIndex;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Locks the Location Selector."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void lock() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isLock \u003d true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Unlocks the Location Selector."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void unlock() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isLock \u003d false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isLock() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return isLock;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 94
    }
  },
  {
    "path": "src/main/java/duke/logic/selectors/Selector.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * The API of selectors."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public interface Selector {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    int getIndex();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void feedKeyCode(KeyCode keyCode);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 12
    }
  },
  {
    "path": "src/main/java/duke/model/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.api.ApiParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents an event occurring at a particular venue between a certain time."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Event extends TaskWithDates {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Initializes a event task with location."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param locationDescription A description of this task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param startDate Starting date of task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param endDate Ending date of task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Event(String locationDescription, LocalDateTime startDate, LocalDateTime endDate) throws DukeException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(locationDescription, startDate, endDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venue \u003d ApiParser.getLocationSearch(locationDescription);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Initializes a event task from persistent storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param locationDescription A description of this task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param startDate Starting date of task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param endDate Ending date of task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param venue location of the holiday object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Event(String locationDescription, LocalDateTime startDate, LocalDateTime endDate, Venue venue) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(locationDescription, startDate, endDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return \"[E]\" + super.toString() + \" between \" + super.getStartDate() + \" and \" + super.getEndDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets the Venue of the event."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Venue getLocation() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (venue !\u003d null) : \"Event can only be created with a venue\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setLocation(Venue venue) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 otherTask instanceof Event"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 ((TaskWithDates) otherTask).getStartDate().isEqual(getStartDate())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 ((TaskWithDates) otherTask).getEndDate().isEqual(getEndDate())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 ((Event) otherTask).getLocation().equals(getLocation());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 4,
      "hongchuan97": 2,
      "Jefferson111": 64
    }
  },
  {
    "path": "src/main/java/duke/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.CreateMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.VenueList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Agenda;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Interface which grants other components access to information from persistent storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the list of events."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    EventList getEvents();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Return map object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    CreateMap getMap();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the list of events that is sorted chronologically."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    EventList getSortedList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the list of all bus stops."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    List\u003cBusStop\u003e getBusStops();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the list of all bus routes."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    List\u003cBusService\u003e getBusService();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns the list of all attractions."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param numberOfDays Number of days."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param itinerary The itinerary to store in persistent storage."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return List of Days."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws DukeException If number of days exceeds 7."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    List\u003cAgenda\u003e getRecommendations(int numberOfDays, Itinerary itinerary) throws DukeException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the list of Routes."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    RouteList getRoutes();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Saves the Model data in storage."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws CorruptedFileException If the file is corrupted."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void save() throws CorruptedFileException, FileNotSavedException;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns a list of event venues."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    VenueList getEventVenues();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 4,
      "Inno97": 26,
      "hongchuan97": 6,
      "Jefferson111": 38
    }
  },
  {
    "path": "src/main/java/duke/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.CreateMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.VenueList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Agenda;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Implements the methods defined in the Model Interface."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private RouteList routes;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private CreateMap map;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs a new ModelManager object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events \u003d storage.getEvents();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        map \u003d storage.getMap();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routes \u003d storage.getRoutes();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CreateMap getMap() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventList getEvents() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteList getRoutes() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return routes;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventList getSortedList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return events.getSortedList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public List\u003cBusStop\u003e getBusStops() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public List\u003cBusService\u003e getBusService() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cAgenda\u003e getRecommendations(int numDays, Itinerary itinerary) throws DukeException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cAgenda\u003e recommendations \u003d storage.readVenues(numDays);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        itinerary.setTasks(recommendations);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        storage.writeRecommendations(itinerary);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return recommendations;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public VenueList getEventVenues() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new VenueList(events);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Saves the file to local storage."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void save() throws FileNotSavedException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        storage.write();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 9,
      "Inno97": 23,
      "hongchuan97": 8,
      "Jefferson111": 50
    }
  },
  {
    "path": "src/main/java/duke/model/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a generic task, which can be marked as done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a task not yet done with the given description."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description A description of this task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Sets the description of the task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param description The new description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the description associated with this task."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return This task\u0027s description."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the status of the task, true/false."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return True/false."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets this task as done or undone."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both tasks are the same."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string representation of this task."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The desired string representation."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return (isDone ? \"[✓] \" : \"[✘] \") + description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 2,
      "-": 64,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/java/duke/model/TaskWithDates.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents Tasks with a date field."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class TaskWithDates extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private LocalDateTime startDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private LocalDateTime endDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Constructs a TaskWithDates object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param description The description of the task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param startDate The start date of the task."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param endDate The end date of the task."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected TaskWithDates(String description, LocalDateTime startDate, LocalDateTime endDate) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setStartDate(LocalDateTime startDate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public LocalDateTime getEndDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setEndDate(LocalDateTime endDate) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return otherTask !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 otherTask instanceof TaskWithDates"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 ((TaskWithDates) otherTask).getStartDate().isEqual(getStartDate())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 ((TaskWithDates) otherTask).getEndDate().isEqual(getEndDate());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 2,
      "Jefferson111": 52
    }
  },
  {
    "path": "src/main/java/duke/model/lists/AgendaList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.model.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Agenda;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a list of Agendas (Things to do in a day) and contains its related accessor methods."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class AgendaList implements Iterable\u003cAgenda\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private List\u003cAgenda\u003e list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public AgendaList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cAgenda\u003e getList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Adds a Day to the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * The Task must not already exist in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void add(Agenda toAdd) throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //            throw new DukeDuplicateTaskException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //        } else if (hasAnomaly(toAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //            throw new DukeException(Messages.ANOMALY_FOUND);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        list.add(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Replaces the Day {@code target} in the list with {@code editedDay}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setTask(Agenda target, Agenda editedAgenda) throws DukeException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        int index \u003d list.indexOf(target);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //            throw new DukeTaskNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //            throw new DukeDuplicateTaskException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        //        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        list.set(index, editedAgenda);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Removes the equivalent Task from the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * The Day must exist in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void remove(Agenda toRemove) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        list.remove(toRemove);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setTasks(AgendaList replacement) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        list \u003d replacement.list;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Replaces the contents of this list with {@code Days}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * {@code Tasks} must not contain duplicate Tasks."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setTasks(List\u003cAgenda\u003e agenda) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        list \u003d agenda;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Iterator\u003cAgenda\u003e iterator() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return list.listIterator();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 83,
      "Inno97": 1
    }
  },
  {
    "path": "src/main/java/duke/model/lists/EventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.model.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDuplicateTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.TaskWithDates;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a list of Events and contains its related accessor methods."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class EventList implements Iterable\u003cEvent\u003e, Listable\u003cEvent\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private List\u003cEvent\u003e events;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public EventList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void add(Event e) throws DukeDuplicateTaskException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (contains(e)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeDuplicateTaskException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return events.isEmpty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return events.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return events.size();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Event get(int index) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return events.get(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void sort() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        events.sort(Comparator.comparing(TaskWithDates::getStartDate));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventList getSortedList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new EventList(events.stream().sorted("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                Comparator.comparing(TaskWithDates::getStartDate)).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Iterator\u003cEvent\u003e iterator() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return events.iterator();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Replaces the contents of this list with {@code Events}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * {@code Events} must not contain duplicate Events."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void setEvents(List\u003cEvent\u003e events) throws DukeDuplicateTaskException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!eventsAreUnique(events)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            throw new DukeDuplicateTaskException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns true if {@code Events} contains only unique Events."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean eventsAreUnique(List\u003cEvent\u003e events) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (int i \u003d 0; i \u003c events.size() - 1; i++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            for (int j \u003d i + 1; j \u003c events.size(); j++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (events.get(i).isSameTask(events.get(j))) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Event remove(int index) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return events.remove(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 5,
      "Inno97": 48,
      "Jefferson111": 44
    }
  },
  {
    "path": "src/main/java/duke/model/lists/Listable.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.model.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Interface - Models a List of planning objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "interface Listable\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void add(T item) throws DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    boolean isEmpty();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    boolean contains(T item);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    int size();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    T get(int index);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 15
    }
  },
  {
    "path": "src/main/java/duke/model/lists/RouteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.model.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeRouteNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.RouteNodeDuplicateException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Manages and handles Route manipulation."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class RouteList implements Iterable\u003cRoute\u003e, Listable\u003cRoute\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private List\u003cRoute\u003e list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a RouteList object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Route get(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public List\u003cRoute\u003e getRoutes() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the size of the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Size of list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns true if the list contains an equivalent Route as the given argument."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean contains(Route toCheck) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.stream().anyMatch(toCheck::isSameRoute);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a unique Route to the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param toAdd the Route to add."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception RouteNodeDuplicateException If there is a duplicate route."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void add(Route toAdd) throws RouteNodeDuplicateException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new RouteNodeDuplicateException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list.add(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Replaces an existing Route with a new different Route."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param target The existing route."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param editedRoute The new route."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception RouteNodeDuplicateException If there is a duplicate route."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception DukeRouteNotFoundException If the route is not found."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setRoute(Route target, Route editedRoute) throws RouteNodeDuplicateException,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            DukeRouteNotFoundException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        int index \u003d list.indexOf(target);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeRouteNotFoundException();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (!target.isSameRoute(editedRoute) \u0026\u0026 contains(editedRoute)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new RouteNodeDuplicateException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list.set(index, editedRoute);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Removes an existing Route from the list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param toRemove The route to remove."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception DukeRouteNotFoundException If the route is not found."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void remove(Route toRemove) throws DukeRouteNotFoundException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (!list.remove(toRemove)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new DukeRouteNotFoundException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Removes an existing Route from the list and returns it."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the Route."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return route The queried Route."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception IndexOutOfBoundsException If the query is out of bound."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Route remove(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.remove(index);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns whether the list is empty."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Whether the list is empty."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.isEmpty();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Replaces the contents of this list with a list of Routes."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param routes The list of Routes to replace."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception RouteNodeDuplicateException If there is a duplicate route."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setRoutes(List\u003cRoute\u003e routes) throws RouteNodeDuplicateException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (!isUniqueRoutes(routes)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new RouteNodeDuplicateException();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list \u003d routes;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns an iterator to the list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The iterator to the list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Iterator\u003cRoute\u003e iterator() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.iterator();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Checks if an object is equal to this."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param other The other object."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Whether this object is equal to the other object."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                || (other instanceof RouteList // instanceof handles nulls"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                \u0026\u0026 list.equals(((RouteList) other).list));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns the hash code of the list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The hash code of the list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.hashCode();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns true if all Routes in list are unique."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param routes The routes to check."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Whether the routes are unique."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private boolean isUniqueRoutes(List\u003cRoute\u003e routes) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (int i \u003d 0; i \u003c routes.size() - 1; i++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (int j \u003d i + 1; j \u003c routes.size(); j++) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (routes.get(i).isSameRoute(routes.get(j))) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 183
    }
  },
  {
    "path": "src/main/java/duke/model/lists/VenueList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.model.lists;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a list of Venues (Locations)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class VenueList implements Iterable\u003cVenue\u003e, Listable\u003cVenue\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private List\u003cVenue\u003e list;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public VenueList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor given a list of tasks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public VenueList(EventList events) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event e : events) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            list.add(e.getLocation());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void add(Venue venue) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list.add(venue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cVenue\u003e getVenueList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return this.list;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setVenueList(Venue venue, int index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        list.set(index,venue);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void addList(List\u003cVenue\u003e venueList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.list \u003d venueList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Venue get(int index) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void remove(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        list.remove(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.isEmpty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean contains(Venue venue) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.contains(venue);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Iterator\u003cVenue\u003e iterator() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return list.iterator();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 17,
      "Inno97": 56,
      "Jefferson111": 3
    }
  },
  {
    "path": "src/main/java/duke/model/locations/BusStop.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a bus stop."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class BusStop extends RouteNode {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String busCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Set\u003cString\u003e buses;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a BusStop object."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busCode The bus code."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param address The address."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The description."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public BusStop(String busCode, String address, String description, double latitude, double longitude) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Constraint.valueOf(\"BUS\"), address, description, latitude, longitude);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.busCode \u003d busCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.buses \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Set\u003cString\u003e getBuses() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return buses;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String getBusCode() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return busCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a bus in the form of a String to buses."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param bus The bus to add."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void addBuses(String bus) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        buses.add(bus);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Fetches data from model and updates the bus stop."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param model The model."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void fetchData(Model model) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        HashMap\u003cString, BusStop\u003e allBus \u003d model.getMap().getBusStopMap();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (allBus.containsKey(this.busCode)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.setAddress(allBus.get(this.busCode).getAddress());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.setLatitude(allBus.get(this.busCode).getLatitude());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.setLongitude(allBus.get(this.busCode).getLongitude());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 36,
      "Jefferson111": 25
    }
  },
  {
    "path": "src/main/java/duke/model/locations/RouteNode.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents one transportation node - bus stop / train station."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public abstract class RouteNode extends Venue {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Constraint type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a RouteNode object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param type The type of transport of node."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude of node."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude of node."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param address The name of node."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The description of node."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNode(Constraint type, String address, String description, double latitude, double longitude) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(address, latitude, longitude, 0, 0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Constraint getType() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getCoordinate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return getLatitude() + \", \" + getLongitude();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public double getLatitude() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return super.getLatitude();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public double getLongitude() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return super.getLongitude();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the latitude of the RouteNode."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude to set."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setLatitude(int latitude) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super.setLatitude(latitude);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the longitude of the RouteNode."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The latitude to set."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setLongitude(int longitude) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super.setLongitude(longitude);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the address of the RouteNode."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param address The latitude to set."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setAddress(String address) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the type of the RouteNode."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param type The latitude to set."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setType(Constraint type) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the description of the RouteNode."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The latitude to set."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Converts the RouteNode to a String format."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The RouteNode in String format."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return address + \" (\" + getLatitude() + \", \" + getLongitude() + \")\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 106
    }
  },
  {
    "path": "src/main/java/duke/model/locations/TrainStation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "package duke.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a train station."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class TrainStation extends RouteNode {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private ArrayList\u003cString\u003e trainCodes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a TrainStation object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param trainCode The ArrayList of train code Strings."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The description of the train station."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param address The name of train station."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude of train station."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude of train station."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public TrainStation(ArrayList\u003cString\u003e trainCode, String description, String address,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                double latitude, double longitude) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(Constraint.valueOf(\"MRT\"), address, description, latitude, longitude);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.trainCodes \u003d trainCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ArrayList\u003cString\u003e getTrainCodes() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return trainCodes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 17,
      "hongchuan97": 12
    }
  },
  {
    "path": "src/main/java/duke/model/locations/Venue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a location of an attraction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class Venue {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private double latitude;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private double longitude;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private double distX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private double distY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final int RADIUS_EARTH \u003d 6371;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a Venue object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param address The address."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param distX The distance in x-axis."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param distY The distance in y-axis."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Venue(String address, double latitude, double longitude, double distX, double distY) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.latitude \u003d latitude;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.longitude \u003d longitude;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.distX \u003d distX;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.distY \u003d distY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public double getLatitude() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return latitude;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public double getLongitude() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return longitude;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public double getDistX() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return distX;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public double getDistY() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return distY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Calculates flat earth distance (in metres) between 2 points based on latitude \u0026 longitude."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param otherVenue The other venue."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The absolute flat earth distance between the 2 venues."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public double getDistance(Venue otherVenue) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double latDistance \u003d Math.toRadians(otherVenue.getLatitude() - getLatitude());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double lonDistance \u003d Math.toRadians(otherVenue.getLongitude() - getLongitude());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double a \u003d Math.sin(latDistance / 2) * Math.sin(latDistance / 2)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                + Math.cos(Math.toRadians(getLatitude())) * Math.cos(Math.toRadians(otherVenue.getLatitude()))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                * Math.sin(lonDistance / 2) * Math.sin(lonDistance / 2);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        double c \u003d 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return Math.abs(RADIUS_EARTH * c * 1000);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the latitude of the venue."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param latitude The latitude value to set."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setLatitude(double latitude) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.latitude \u003d latitude;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the longitude of the venue."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param longitude The longitude value to set."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setLongitude(double longitude) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.longitude \u003d longitude;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Converts the venue to a String format."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return The venue as a String."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return getAddress() + \" | \" + getLatitude() + \" | \" + getLongitude() + \" | \" + getDistX() + \" | \" + getDistY();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Compares a given venue with this object."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param otherVenue The query venue."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return Whether the venues are equal."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean equals(Venue otherVenue) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (otherVenue \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return getLatitude() \u003d\u003d otherVenue.getLatitude()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                \u0026\u0026 getLongitude() \u003d\u003d otherVenue.getLongitude()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                \u0026\u0026 getAddress().equals(otherVenue.getAddress())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                \u0026\u0026 getDistX() \u003d\u003d otherVenue.getDistX()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                \u0026\u0026 getDistY() \u003d\u003d otherVenue.getDistY();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 71,
      "Jefferson111": 42
    }
  },
  {
    "path": "src/main/java/duke/model/planning/Agenda.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.model.planning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.lists.VenueList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents an Agenda - places to go and things to do within a day."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class Agenda extends VenueList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private List\u003cTodo\u003e todoList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private int number;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Constructor to initialise new Day object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Agenda(List\u003cTodo\u003e todoList, List\u003cVenue\u003e venueList, int number) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        addList(venueList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.number \u003d number;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.todoList \u003d todoList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public int getNumber() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cTodo\u003e getTodoList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return this.todoList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cVenue\u003e getVenueList() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return super.getVenueList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setTodo(int index, Todo todo) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        todoList.set(index,todo);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setVenueList(Venue venue, int index) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        super.setVenueList(venue, index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public void setNumber(int newNum) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.number \u003d newNum;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        result.append(\"Agenda |\").append(this.getNumber()).append(\"\\n\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (Venue venue : this.getVenueList()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(venue.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"\\n\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (Todo todo : this.getTodoList()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(todo.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\" | \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        result.append(\"\\n\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 66
    }
  },
  {
    "path": "src/main/java/duke/model/planning/Itinerary.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.model.planning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.lists.AgendaList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents an Itinerary and its contained information."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "public class Itinerary extends AgendaList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private LocalDateTime startDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private LocalDateTime endDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Venue hotelLocation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Constructor to initialise new Itinerary."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Itinerary(LocalDateTime startDate, LocalDateTime endDate, Venue hotelLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        this.hotelLocation \u003d hotelLocation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public LocalDateTime getEndDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public Venue getHotelLocation() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return hotelLocation;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns number of days of the trip based on entered start and end dates."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return The number of days of the trip"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public int getNumberOfDays() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime tempDateTime \u003d LocalDateTime.from(startDate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        long days \u003d tempDateTime.until(endDate, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return Integer.parseInt(String.valueOf(days));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Prints the itinerary list in entirety."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * @return The String which lists the itinerary in full"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public String printItinerary() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        int days \u003d this.getNumberOfDays();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        StringBuilder result \u003d new StringBuilder(\"Here are the list of Recommended Locations in \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                +  days + \" days around \" + this.getHotelLocation().getAddress() + \": \\n\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        for (int i \u003d 0; i \u003c days; i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Agenda list1 \u003d this.getList().get(i);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"Day \").append(list1.getNumber()).append(\":\").append(\"\\n \\n\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"Venues: \").append(\"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            for (Venue venue : list1.getVenueList()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                result.append(venue.getAddress()).append(\"\\n\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"\\n\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            result.append(\"Todo List: \").append(\"\\n\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            for (Todo todo : list1.getTodoList()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                result.append(\" - \").append(todo.getDescription()).append(\"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return result.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 80
    }
  },
  {
    "path": "src/main/java/duke/model/planning/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.model.planning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a to-do."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a to-do not yet done with the given description."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param description A description of this to-do."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a string representation of this to-do."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The desired string representation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return getDescription();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 5,
      "-": 22,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/main/java/duke/model/transports/BusService.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.transports;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Class representing a Bus Service."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a Bus and its route."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e 20921c7839efb1481af98f3b5c7e0465ff5bb57e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class BusService {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private String bus;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private ArrayList\u003cString\u003e direction1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private ArrayList\u003cString\u003e direction2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Create bus object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public BusService(String bus) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.bus \u003d bus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.direction1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.direction2 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * get the route of bus in direction indicated."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param direction direction of travel"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return All bus stop in direction of travel"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ArrayList\u003cString\u003e getDirection(int direction) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (direction \u003d\u003d 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return direction1;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return direction2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public String getBus() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return bus;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Add the bus stop code to the route which the bus would travel to."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param busCode Code of bus stop"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param direction Direction of travel to next bus stop"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void addRoute(String busCode, int direction) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (direction \u003d\u003d 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.direction1.add(busCode);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            this.direction2.add(busCode);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 21,
      "hongchuan97": 7,
      "Jefferson111": 29
    }
  },
  {
    "path": "src/main/java/duke/model/transports/Route.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.model.transports;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.NullResultException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.RouteNodeDuplicateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.RouteNode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a route between 2 locations as a list of route nodes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class Route {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private ArrayList\u003cRouteNode\u003e nodes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs an empty route object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param name The name of the route."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The description of the route."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Route(String name, String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.nodes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternative constructor with predefined nodes."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param nodes The nodes of the route."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param name The name of the route."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param description The description of the route."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public Route(ArrayList\u003cRouteNode\u003e nodes, String name, String description) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.nodes \u003d nodes;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the node at index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of node."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return node The node at index."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws IndexOutOfBoundsException The exception when index is out of bounds."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNode getNode(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return nodes.get(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the Arraylist of Route Nodes."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return nodes The ArrayList of Route Nodes."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public ArrayList\u003cRouteNode\u003e getNodes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return nodes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the starting node of the route."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return node The start node."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNode getStartNode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (nodes.size() \u003e 0) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return nodes.get(0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Gets the starting node of the route."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return node The start node."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNode getEndNode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (nodes.size() \u003e 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return nodes.get(nodes.size() - 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public int getNumNodes() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return nodes.size();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void remove(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        nodes.remove(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Adds a new node to the route at a given index."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param newNode The new node to add."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param index The index of the node to add to."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception QueryOutOfBoundsException If the index is out of bounds."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception RouteNodeDuplicateException If the route is a duplicate."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void addNode(RouteNode newNode, int index) throws RouteNodeDuplicateException, QueryOutOfBoundsException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (index \u003e\u003d 0 \u0026\u0026 index \u003c nodes.size()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (RouteNode node : nodes) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (node instanceof BusStop \u0026\u0026 newNode instanceof BusStop"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        \u0026\u0026 ((BusStop) node).getBusCode().equals(((BusStop) newNode).getBusCode())) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    throw new RouteNodeDuplicateException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (node instanceof TrainStation \u0026\u0026 newNode instanceof TrainStation"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        \u0026\u0026 ((TrainStation) node).getTrainCodes().equals(((TrainStation) newNode).getTrainCodes())) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    throw new RouteNodeDuplicateException();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            nodes.add(index, newNode);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new QueryOutOfBoundsException(\"NODE\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Alternate method to add a node at the end of the Route."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param newNode The new node to add."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception RouteNodeDuplicateException If the route is a duplicate."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void addNode(RouteNode newNode) throws RouteNodeDuplicateException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (RouteNode node: nodes) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (node instanceof BusStop \u0026\u0026 newNode instanceof BusStop"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    \u0026\u0026 ((BusStop) node).getBusCode().equals(((BusStop) newNode).getBusCode())) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new RouteNodeDuplicateException();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (node instanceof TrainStation \u0026\u0026 newNode instanceof TrainStation"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    \u0026\u0026 ((TrainStation) node).getTrainCodes().equals(((TrainStation) newNode).getTrainCodes())) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                throw new RouteNodeDuplicateException();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        nodes.add(newNode);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Fetches a node with the given name."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param name The query name."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @return node The queried node."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws NullResultException The exception when nothing is found."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteNode fetchNode(String name) throws NullResultException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        for (RouteNode node: nodes) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (node.getAddress().equals(name.toLowerCase())) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                return node;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        throw new NullResultException();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns true if both routes are the same."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean isSameRoute(Route otherRoute) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (otherRoute \u003d\u003d this) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return otherRoute !\u003d null \u0026\u0026 otherRoute.getName().equals(getName());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 192
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeDuplicateTaskException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileLoadFailException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.RouteNodeDuplicateException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.StorageFileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.parsers.ParserStorageUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.parsers.ParserTimeUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.CreateMap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.locations.TrainStation;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Agenda;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Todo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Manages storage of Duke data in local storage."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private RouteList routes;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private CreateMap map;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String BUS_FILE_PATH \u003d \"/data/bus.txt\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String RECOMMENDATIONS_FILE_PATH \u003d \"/data/recommendations.txt\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private static final String SAMPLE_RECOMMENDATIONS_FILE_PATH \u003d \"samples.txt\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private static final String TRAIN_FILE_PATH \u003d \"/data/train.txt\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String EVENTS_FILE_PATH \u003d \"events.txt\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String ROUTES_FILE_PATH \u003d \"routes.txt\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Constructs a Storage object that contains information from the model."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events \u003d new EventList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routes \u003d new RouteList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            read();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            logger.log(Level.WARNING, e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Reads all storage file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void read() throws RouteNodeDuplicateException, CorruptedFileException, StorageFileNotFoundException,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            DukeDuplicateTaskException, DukeDateTimeParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        readBus();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        readTrain();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        readEvent();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        readRoutes();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Reads train from filepath."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void readTrain() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        assert this.map !\u003d null : \"Map must be created first\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, TrainStation\u003e trainMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        Scanner s \u003d new Scanner(getClass().getResourceAsStream(TRAIN_FILE_PATH));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            TrainStation newTrain \u003d ParserStorageUtil.createTrainFromStorage(s.nextLine());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            trainMap.put(newTrain.getAddress(), newTrain);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.map.setTrainMap(trainMap);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     * Reads bus from filepath."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void readBus() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, BusStop\u003e busStopData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        HashMap\u003cString, BusService\u003e busData \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Scanner s \u003d new Scanner(getClass().getResourceAsStream(BUS_FILE_PATH));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        boolean isBusData \u003d false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            String line \u003d s.nextLine();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\".equals(line)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                isBusData \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            if (isBusData) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                BusService busService \u003d ParserStorageUtil.createBusFromStorage(line);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                busData.put(busService.getBus(), busService);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                BusStop busStop \u003d ParserStorageUtil.createBusStopDataFromStorage(line);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "                busStopData.put(busStop.getBusCode(), busStop);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        this.map \u003d new CreateMap(busStopData, busData);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Reads events from filepath. Creates empty events if file cannot be read."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeDateTimeParseException If the datetime of an event cannot be parsed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws DukeDuplicateTaskException If there is a duplicate event."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws StorageFileNotFoundException If the file cannot be read."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void readEvent() throws DukeDuplicateTaskException, DukeDateTimeParseException,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            StorageFileNotFoundException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        List\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            File f \u003d new File(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                events.add(ParserStorageUtil.createTaskFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new StorageFileNotFoundException(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events.setEvents(events);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Reads routes from filepath. Creates empty routes if file cannot be read."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception RouteNodeDuplicateException If there is a duplicate route that is read."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception CorruptedFileException If the reading has failed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @exception StorageFileNotFoundException If the storage file cannot be found."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void readRoutes() throws RouteNodeDuplicateException, CorruptedFileException, StorageFileNotFoundException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        List\u003cRoute\u003e newRoutes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            File f \u003d new File(ROUTES_FILE_PATH);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Route newRoute \u003d new Route(new ArrayList\u003c\u003e(), \"\", \"\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                String input \u003d s.nextLine();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (input.split(\"\\\\|\", 2)[0].strip().equals(\"route\")) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    if (newRoute.getNumNodes() !\u003d 0) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                        newRoutes.add(newRoute);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    newRoute \u003d ParserStorageUtil.createRouteFromStorage(input);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    newRoute.addNode(ParserStorageUtil.createNodeFromStorage(input));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            if (!newRoute.getName().equals(\"\")) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                newRoutes.add(newRoute);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new StorageFileNotFoundException(ROUTES_FILE_PATH);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routes.setRoutes(newRoutes);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Returns Venues fetched from stored memory."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @return The List of all Venues in Recommendations list."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cAgenda\u003e readVenues(int numDays) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cAgenda\u003e recommendations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Scanner s \u003d new Scanner(getClass().getResourceAsStream(RECOMMENDATIONS_FILE_PATH));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        int i \u003d 1;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        while (s.hasNext() \u0026\u0026 i \u003c\u003d numDays) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            List\u003cVenue\u003e venueList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            venueList.add(ParserStorageUtil.getVenueFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            List\u003cTodo\u003e todoList \u003d ParserStorageUtil.getTodoListFromStorage(s.nextLine());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            venueList.add(ParserStorageUtil.getVenueFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            todoList.addAll(ParserStorageUtil.getTodoListFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Agenda agenda \u003d new Agenda(todoList, venueList, i++);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            recommendations.add(agenda);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        s.close();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return recommendations;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Writes the tasks into a file of the given filepath."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If a file cannot be saved."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void write() throws FileNotSavedException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        writeEvents();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        writeRoutes();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Writes the events to local storage."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void writeEvents() throws FileNotSavedException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            FileWriter writer \u003d new FileWriter(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            for (Event event : events) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                writer.write(ParserStorageUtil.toStorageString(event) + \"\\n\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new FileNotSavedException(EVENTS_FILE_PATH);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Writes the events to local storage."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void writeRoutes() throws FileNotSavedException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            FileWriter writer \u003d new FileWriter(ROUTES_FILE_PATH);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            String routesString \u003d \"\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            for (Route route : routes) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                routesString +\u003d ParserStorageUtil.toRouteStorageString(route);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            writer.write(routesString);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new FileNotSavedException(ROUTES_FILE_PATH);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Writes recommendations to filepath."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileNotSavedException If the file cannot be saved."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void writeRecommendations(Itinerary itinerary) throws FileNotSavedException {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            FileWriter writer \u003d new FileWriter(SAMPLE_RECOMMENDATIONS_FILE_PATH);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writer.write(itinerary.getStartDate().toString() + \"\\n\" + itinerary.getEndDate().toString() + \"\\n\""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                    + itinerary.getHotelLocation().toString() + \"\\n\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            for (Agenda agenda : itinerary.getList()) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                writer.write(agenda.toString() + \"\\n\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new FileNotSavedException(RECOMMENDATIONS_FILE_PATH);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     * Reads recommendations from filepath."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws DukeDateTimeParseException If the datetime cannot be parsed."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws FileLoadFailException If the file fails to load."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static Itinerary readRecommendations() throws DukeDateTimeParseException, FileLoadFailException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        List\u003cAgenda\u003e agendaList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Itinerary itinerary;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            File f \u003d new File(SAMPLE_RECOMMENDATIONS_FILE_PATH);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            LocalDateTime start \u003d ParserTimeUtil.parseStringToDate(s.nextLine());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            LocalDateTime end \u003d ParserTimeUtil.parseStringToDate(s.nextLine());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            Venue hotel \u003d ParserStorageUtil.getVenueFromStorage(s.nextLine());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            itinerary \u003d new Itinerary(start,end,hotel);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                List\u003cVenue\u003e venueList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                List\u003cTodo\u003e todoList;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                final int number \u003d ParserStorageUtil.getNumberFromStorage(s.nextLine());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                venueList.add(ParserStorageUtil.getVenueFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                venueList.add(ParserStorageUtil.getVenueFromStorage(s.nextLine()));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                todoList \u003d ParserStorageUtil.getTodoListFromStorage(s.nextLine());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                Agenda agenda \u003d new Agenda(todoList, venueList, number);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                agendaList.add(agenda);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            s.close();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "            itinerary.setTasks(agendaList);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            throw new FileLoadFailException(RECOMMENDATIONS_FILE_PATH);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return itinerary;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventList getEvents() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CreateMap getMap() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return this.map;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteList getRoutes() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return routes;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 69,
      "Inno97": 85,
      "hongchuan97": 54,
      "-": 44,
      "Jefferson111": 58
    }
  },
  {
    "path": "src/main/java/duke/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultCalender;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultExit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultImage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.LogicManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.PanelResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.calendar.CalendarWindow;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ui.dialogbox.DialogBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ui.dialogbox.DialogBoxImage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.map.MapWindow;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ScrollPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for MainWindow. Provides the layout for the other controls."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ScrollPane scrollPane;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox dialogContainer;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField userInput;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button sendButton;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private AnchorPane sidePanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private LogicManager logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Main main;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duke.png\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Initialises the MainWindow."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        primaryStage.getScene().getStylesheets().addAll("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                this.getClass().getResource(\"/css/mainStyle.css\").toExternalForm());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.INFO, \"Starting user interface up...\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the application."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initialises the logic and Ui component of Duke."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void initialise(Main main) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.main \u003d main;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logic \u003d new LogicManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        dukeShow(\"Hi, welcome to SGTravel.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleUserInput() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String input \u003d getUserInput();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (isEmpty(input)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        echoUserInput(input);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dukeResponse(input);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        panelResponse(keyEvent);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void panelResponse(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        PanelResult result \u003d logic.execute(keyEvent.getCode());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        panelShow(result);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void dukeResponse(String input) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                CommandResult result \u003d logic.execute(input);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                dukeShow(result);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                if (result instanceof CommandResultExit) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    tryExitApp();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (result instanceof CommandResultCalender) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    new CalendarWindow((CommandResultCalender) result).show();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (result instanceof CommandResultMap) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                    new MapWindow((CommandResultMap) result).show();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            } catch (DukeException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                dukeShow(e.getMessage());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Shows message(s) to the user."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void dukeShow(CommandResult commandResult) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        if (commandResult instanceof CommandResultImage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            dukeShow(commandResult.getMessage(), ((CommandResultImage) commandResult).getImage());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (commandResult !\u003d null);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        dukeShow(commandResult.getMessage());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void dukeShow(String msg) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                DialogBox.getDukeDialog(msg, dukeImage)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        );"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Shows an image in dialogBoxImage to the user."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param message The message to show."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param image The image to show."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void dukeShow(String message, Image image) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                DialogBoxImage.getDukeDialog(message, dukeImage, image)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        );"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void panelShow(PanelResult result) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        sidePanel.getChildren().clear();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        sidePanel.getChildren().add(SidePanel.getPanel(result));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void tryExitApp() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            main.stop();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            dukeShow(\"Exit app failed\" + e.getMessage());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void echoUserInput(String input) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogContainer.getChildren().addAll("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogBox.getUserDialog(input, userImage)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String getUserInput() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        String input \u003d userInput.getText().strip();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        userInput.clear();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isEmpty(String input) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return \"\".equals(input);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 28,
      "-": 58,
      "Jefferson111": 99
    }
  },
  {
    "path": "src/main/java/duke/ui/SidePanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.PanelResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.map.PointCard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Represents the side panel of the main window."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class SidePanel extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private StackPane taskContainer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private AnchorPane miniMap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label endDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"SidePanel.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private SidePanel(PanelResult result) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (result.isReady()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            for (int i \u003d 0; i \u003c result.size(); ++i) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                miniMap.getChildren().add("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        PointCard.getCard(result.getVenue(i), result.getVenueColor(i)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            description.setText(result.getDescription());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            startDate.setText(result.getStartDate());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            endDate.setText(result.getEndDate());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            setHighlight(result);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void setHighlight(PanelResult result) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        switch (result.getField()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            description.getStyleClass().add(\"highlight\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            startDate.getStyleClass().add(\"highlight\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            endDate.getStyleClass().add(\"highlight\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static AnchorPane getPanel(PanelResult result) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new SidePanel(result).getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 60
    }
  },
  {
    "path": "src/main/java/duke/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        URL fxmlFileUrl \u003d Main.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/main/java/duke/ui/calendar/CalendarCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a calender card as a part of the UI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class CalendarCard extends UiPart\u003cStackPane\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label day;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private StackPane calendarCard;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private final EventList events;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"CalendarCard.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String CLASSNAME \u003d \"class duke.model.events.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static int currentIndex \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isCalendarCardClass \u003d true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private CalendarCard(int day, EventList events) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.day.setText(Integer.toString(day));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.events \u003d events;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        calendarCard.getStyleClass().add(\"calendarCard\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assert (events !\u003d null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!events.isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            loadInfoOnToCard();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void loadInfoOnToCard() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        task.setText(events.get(currentIndex).getClass().toString().replace(CLASSNAME, \"\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        description.setText(events.get(currentIndex).getDescription());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event t : events) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            result.append(t.toString()).append(\"\\n\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip tooltip \u003d new Tooltip(result.toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip.install(getRoot(), tooltip);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    protected static StackPane getCalendarCard(int day, EventList events) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new CalendarCard(day, events).getRoot();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void onClick() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!events.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            currentIndex \u003d (currentIndex + 1) % events.size();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            loadInfoOnToCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void onMouseEnter() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        calendarCard.getStyleClass().add(\"calendarCardHover\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        calendarCard.getStyleClass().remove(\"calendarCard\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        isCalendarCardClass \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void onMouseExit() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        if (!isCalendarCardClass) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            calendarCard.getStyleClass().add(\"calendarCard\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            calendarCard.getStyleClass().remove(\"calendarCardHover\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            isCalendarCardClass \u003d true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 4,
      "Jefferson111": 75
    }
  },
  {
    "path": "src/main/java/duke/ui/calendar/CalendarWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.ui.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDuplicateTaskException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultCalender;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.YearMonth;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a calender window in the UI."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class CalendarWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"CalendarWindow.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private YearMonth currentYearMonth;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int numOfDays;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private int dayOfTheFirstDay;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private String currentMonth;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private List\u003cEventList\u003e filteredEvents;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static EventList events;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int MAX_ROW \u003d 6;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final int MAX_COL \u003d 7;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private VBox pane;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Text calendarTitle;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private GridPane gridCalendar;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void previousMonth() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.minusMonths(1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        refreshCalendar();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void nextMonth() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentYearMonth \u003d currentYearMonth.plusMonths(1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        refreshCalendar();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Refreshes the calendar."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void refreshCalendar() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        updateVariables();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setCalendarTitle(currentYearMonth.getYear(), currentMonth);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        fillCalendarDays();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Sets the title of the calendar according to a specific month and year."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void setCalendarTitle(int year, String month) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        calendarTitle.setText(\"♒\" + month + \" \" + year + \"♒\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        pane.setId(currentMonth);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Fills up the calendar with the necessary information."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void fillCalendarDays() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        gridCalendar.getChildren().clear();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        boolean flag \u003d false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        int day \u003d 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (int i \u003d 0; i \u003c MAX_ROW \u0026\u0026 day \u003c\u003d numOfDays; i++) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            for (int j \u003d 0; j \u003c MAX_COL \u0026\u0026 day \u003c\u003d numOfDays; j++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (dayOfTheFirstDay \u003d\u003d j) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    flag \u003d true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                if (flag) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    gridCalendar.add(CalendarCard.getCalendarCard(day, filteredEvents.get(day)), j, i);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    ++day;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Updates the relevant variables to contain information of the particular month."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void updateVariables() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setCalendarTitle(currentYearMonth.getYear(), currentMonth);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentMonth \u003d currentYearMonth.getMonth().toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        numOfDays \u003d currentYearMonth.lengthOfMonth();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        findRelevantTasks();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dayOfTheFirstDay \u003d currentYearMonth.atDay(1).getDayOfWeek().getValue() % 7;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Finds the tasks that needs to be displayed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void findRelevantTasks() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        filteredEvents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (int i \u003d 0; i \u003c\u003d numOfDays; ++i) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            filteredEvents.add(new EventList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.sort();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        for (Event event : events) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            tryAddingTask(event);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Tries to add a task to the current calendar."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param t A task from the Duke\u0027s task list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void tryAddingTask(Event t) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDate startDate \u003d t.getStartDate().toLocalDate();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocalDate endDate \u003d t.getEndDate().toLocalDate();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        while (!startDate.isAfter(endDate)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            if (isSameYearMonth(startDate)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    filteredEvents.get(startDate.getDayOfMonth()).add(t);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                } catch (DukeDuplicateTaskException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    logger.log(Level.WARNING, \"Duplicated tasks should not exists.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            startDate \u003d startDate.plusDays(1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private boolean isSameYearMonth(Object date) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return currentYearMonth.getYear() \u003d\u003d ((LocalDate) date).getYear()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u0026\u0026 currentYearMonth.getMonth() \u003d\u003d ((LocalDate) date).getMonth();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Sets the calendar layout."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param events The EventList from SGTravel containing all the events."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void setCalendarLayout(EventList events) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setCalendarBasics(events);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        refreshCalendar();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Sets the basic information of the calendar; current month, year and tasks."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void setCalendarBasics(EventList events) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ZoneId zoneId \u003d ZoneId.systemDefault(); //GMT +8"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        currentYearMonth \u003d YearMonth.now(zoneId).minusMonths(0);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        CalendarWindow.events \u003d events;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new CalendarWindow."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param root Stage to use as the root of the CalendarWindow."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private CalendarWindow(Stage root, EventList events) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.getScene().getStylesheets().addAll(this.getClass().getResource(\"/css/calendarStyle.css\").toExternalForm());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setCalendarLayout(events);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new CalendarWindow."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public CalendarWindow(CommandResultCalender commandResult) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this(new Stage(), commandResult.getEvents());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Shows the Calendar window."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns true if the Calendar window is currently being shown."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Focuses on the Calendar window."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 4,
      "Inno97": 1,
      "Jefferson111": 210
    }
  },
  {
    "path": "src/main/java/duke/ui/dialogbox/DialogBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.ui.dialogbox;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An example of a custom control using FXML."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * containing text from the speaker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class DialogBox extends UiPart\u003cHBox\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"DialogBox.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private HBox dialogBox;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private HBox miniBox;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private DialogBox(String text, Image img) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dialog.setMinHeight(Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        roundImageView(img);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Rounds an image."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void roundImageView(Image img) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ImagePattern pattern \u003d new ImagePattern(img);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        circle.setFill(pattern);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        miniBox.getStyleClass().remove(\"dialog\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        miniBox.getStyleClass().add(\"dialogFlip\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getRoot().getChildren());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        flipNode(tmp, this.getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ObservableList\u003cNode\u003e tmp2 \u003d FXCollections.observableArrayList(miniBox.getChildren());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        flipNode(tmp2, miniBox);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void flipNode(ObservableList\u003cNode\u003e tmp, HBox root) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets a User Dialog box for display."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HBox getUserDialog(String text, Image img) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new DialogBox(text, img).getRoot();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets a Duke Dialog box for display."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HBox getDukeDialog(String text, Image img) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        DialogBox db \u003d new DialogBox(text, img);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return db.getRoot();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 3,
      "-": 46,
      "Jefferson111": 32
    }
  },
  {
    "path": "src/main/java/duke/ui/dialogbox/DialogBoxImage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.ui.dialogbox;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": " * Dialog Box containing image."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class DialogBoxImage extends UiPart\u003cHBox\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String FXML \u003d \"DialogBoxImage.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private Label dialog;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private HBox dialogBox;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private HBox miniBox;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private ImageView imageBox;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private DialogBoxImage(String text, Image user, Image picture) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        dialog.setText(text);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        dialog.setMinHeight(Label.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        roundImageView(user);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        setPictureView(picture);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Rounds an image."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void roundImageView(Image image) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ImagePattern pattern \u003d new ImagePattern(image);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        circle.setFill(pattern);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Sets the image to display in the imageBox."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param image The image to display"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void setPictureView(Image image) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        imageBox.setImage(image);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Flips the dialog box such that the ImageView is on the left and text on the right."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private void flip() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        miniBox.getStyleClass().remove(\"dialog\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        miniBox.getStyleClass().add(\"dialogFlip\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getRoot().getChildren());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        flipNode(tmp, this.getRoot());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ObservableList\u003cNode\u003e tmp2 \u003d FXCollections.observableArrayList(miniBox.getChildren());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        flipNode(tmp2, miniBox);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void flipNode(ObservableList\u003cNode\u003e tmp, HBox root) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Collections.reverse(tmp);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.getChildren().setAll(tmp);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.setAlignment(Pos.TOP_LEFT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Gets a Duke Dialog box for display."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public static HBox getDukeDialog(String text, Image user, Image picture) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        DialogBoxImage db \u003d new DialogBoxImage(text, user, picture);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        db.flip();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return db.getRoot();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 2,
      "Inno97": 54,
      "Jefferson111": 29
    }
  },
  {
    "path": "src/main/java/duke/ui/map/LocationCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.ui.map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a location card in the UI."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class LocationCard extends UiPart\u003cStackPane\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"LocationCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private LocationCard(Venue location) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double offsetY \u003d 600 - ((location.getLatitude() - 1.218) * 600 / (1.486 - 1.218));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double offsetX \u003d (location.getLongitude() - 103.622) * 800  / (104.021 - 103.622);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AnchorPane.setLeftAnchor(getRoot(), offsetX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AnchorPane.setTopAnchor(getRoot(), offsetY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip tooltip \u003d new Tooltip(location.getAddress());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip.install(getRoot(), tooltip);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        logger.log(Level.FINE, \"Relative location: \" + offsetX + \" \" + offsetY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static StackPane getCard(Venue location) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new LocationCard(location).getRoot();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Jefferson111": 30
    }
  },
  {
    "path": "src/main/java/duke/ui/map/MapWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.ui.map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a generic Map Window in the UI."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class MapWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private AnchorPane map;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"MapWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private ObservableList\u003cVenue\u003e locations \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private void generateNodes(List\u003cVenue\u003e routes) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        locations.addAll(routes);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void attachListener() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        locations.addListener((ListChangeListener\u003cVenue\u003e) c -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            map.getChildren().clear();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            for (Venue location : locations) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                map.getChildren().add(LocationCard.getCard(location));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new MapWindow."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @param root Stage to use as the root of the CalendarWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private MapWindow(Stage root, List\u003cVenue\u003e routes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        root.getScene().getStylesheets().addAll(this.getClass().getResource(\"/css/mapStyle.css\").toExternalForm());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        attachListener();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        generateNodes(routes);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Creates a new MapWindow."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public MapWindow(CommandResultMap commandResult) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this(new Stage(), commandResult.getRoute());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Shows the Map window."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Returns true if the Map window is currently being shown."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     * Focuses on the Map window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 1,
      "hongchuan97": 2,
      "Jefferson111": 86
    }
  },
  {
    "path": "src/main/java/duke/ui/map/PointCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.ui.map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.paint.Paint;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " * Represents a point on the map."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class PointCard extends UiPart\u003cStackPane\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private static final String FXML \u003d \"PointCard.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue venue;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private PointCard(Venue venue, Paint color) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        circle.setFill(color);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        setLocation();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private void setLocation() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double offsetY \u003d 230 - ((venue.getLatitude() - 1.218) * 240 / (1.486 - 1.218));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        double offsetX \u003d 30 + (venue.getLongitude() - 103.630) * 288  / (104.028 - 103.630);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AnchorPane.setLeftAnchor(getRoot(), offsetX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AnchorPane.setTopAnchor(getRoot(), offsetY);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip tooltip \u003d new Tooltip(venue.getAddress());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Tooltip.install(getRoot(), tooltip);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public static StackPane getCard(Venue venue, Paint color) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return new PointCard(venue, color).getRoot();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 42
    }
  },
  {
    "path": "src/main/java/duke/ui/map/StaticMapWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.ui.map;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ui.UiPart;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " * Represents a static map window in the UI."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "public class StaticMapWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private AnchorPane map;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String FXML \u003d \"StaticMapWindow.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new MapWindow."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @param root Stage to use as the root of the CalendarWindow."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private StaticMapWindow(Stage root, Image image) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        root.getScene().getStylesheets().addAll("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                this.getClass().getResource(\"/css/staticMapStyle.css\").toExternalForm());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        ImageView iv1 \u003d new ImageView();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        iv1.setImage(image);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        map.getChildren().add(iv1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Creates a new MapWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public StaticMapWindow(Image image) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        this(new Stage(), image);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Shows the Map window."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Returns true if the Map window is currently being shown."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Focuses on the Map window."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "Inno97": 72
    }
  },
  {
    "path": "src/main/resources/css/calendarStyle.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".calendar {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-repeat: stretch;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: 750 600;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-position: center center;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#JANUARY {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Jan.jpg\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#FEBRUARY {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Feb.jpg\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#MARCH {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Mar.jpg\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#APRIL {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Apr.jpg\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#MAY {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/May.jpg\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#JUNE {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Jun.jpg\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#JULY {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Jul.jpg\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#AUGUST {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Aug.jpg\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#SEPTEMBER {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Sep.jpg\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#OCTOBER {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Oct.jpg\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#NOVEMBER {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Nov.png\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#DECEMBER {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/Dec.jpg\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".arrow-button {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-shape: \"M 0 50 L 50 0 L 50 100 z\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".calendarCard {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: rgba(100, 100, 100, 0.5);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: grey;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.3), 10, 0.5, 0.0, 0.0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".calendarCardHover {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius: 10;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: rgba(150, 150, 150, 0.5);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius: 10;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.2), 10, 0.5, 0.0, 0.0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#day {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-weight: bolder;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#task {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#description {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dayOfWeek {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-size: 16;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-fill: linear-gradient(to bottom right, red, springgreen);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#calendarTitle {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-family: \u0027Helvetica\u0027, Arial, sans-serif;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-size: 24;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-fill: gold;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-stroke: black;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-stroke-width: 1;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 108
    }
  },
  {
    "path": "src/main/resources/css/mainStyle.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dialog {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: lightblue;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius: 20;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-insets: 5;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: blue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-insets: 5;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dialogFlip {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: lightgreen;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius: 20;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius: 20;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-insets: 5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: green;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-insets: 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#circle {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 5;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#dialogContainer {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/wallpaper.jpg\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: 400 600;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-repeat: repeat-y;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color : black;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar:vertical .track{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color : linear-gradient(to top left, mediumseagreen, midnightblue);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color : black;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar:vertical .increment-button ,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar:vertical .decrement-button {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color :transparent;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius : 0.0em;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-padding :0.0 10.0 0.0 0.0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar .increment-arrow,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar .decrement-arrow{"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-shape : \" \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-padding :0.00em 0.0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".scroll-bar:vertical .thumb {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color : linear-gradient(to bottom right, mediumseagreen, midnightblue);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-insets : 2.0, 0.0, 0.0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius : 2.0em;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color : honeydew;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius : 2.0em;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".mainPane {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color: rgba(0, 30, 15, 0.8);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".sidePane {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/sg.png\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: 400 300;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".highlight {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#LocationCard {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/two.png\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: contain;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-color : linear-gradient(to bottom right, mediumseagreen, midnightblue);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-color : linear-gradient(to top left, mediumseagreen, midnightblue);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-radius : 2.0em;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-border-radius : 2.0em;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#userInput {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "  -fx-control-inner-background: rgba(10, 50, 100, 0.75);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "  -fx-text-inner-color: lightseagreen;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dialog .label {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "     -fx-text-fill: mediumblue;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".dialogFlip .label {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-text-fill: seagreen;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 103
    }
  },
  {
    "path": "src/main/resources/css/mapStyle.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ".mainPane {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/SGmap.jpg\");"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: 800 600;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "#LocationCard {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-image: url(\"../images/two.png\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    -fx-background-size: contain;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 9
    }
  },
  {
    "path": "src/main/resources/css/staticMapStyle.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": ".mainPane {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    -fx-background-size: 512 512;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 3
    }
  },
  {
    "path": "src/main/resources/view/CalendarCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cStackPane fx:id\u003d\"calendarCard\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "           onMouseClicked\u003d\"#onClick\" onMouseEntered\u003d\"#onMouseEnter\" onMouseExited\u003d\"#onMouseExit\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    \u003cLabel fx:id\u003d\"agenda\" text\u003d\"1\" StackPane.alignment\u003d\"TOP_RIGHT\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cLabel fx:id\u003d\"task\" StackPane.alignment\u003d\"TOP_LEFT\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cLabel fx:id\u003d\"description\" StackPane.alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Jefferson111": 14
    }
  },
  {
    "path": "src/main/resources/view/CalendarWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "         title\u003d\"Calendar\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cVBox fx:id\u003d\"pane\" styleClass\u003d\"calendar\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                  maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003cStackPane alignment\u003d\"BASELINE_CENTER\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                           maxWidth\u003d\"1.7976931348623157E308\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cInsets top\u003d\"10.0\" left\u003d\"10\" right\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cButton styleClass\u003d\"arrow-button\" StackPane.alignment\u003d\"BASELINE_LEFT\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                            onAction\u003d\"#previousMonth\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText fx:id\u003d\"calendarTitle\" text\u003d\"Test\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cButton styleClass\u003d\"arrow-button\" StackPane.alignment\u003d\"BASELINE_RIGHT\" onAction\u003d\"#nextMonth\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                            rotate\u003d\"180\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003cGridPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"30.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Sun\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Mon\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Tues\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Wed\" GridPane.columnIndex\u003d\"3\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Thu\" GridPane.columnIndex\u003d\"4\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Fri\" GridPane.columnIndex\u003d\"5\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cText styleClass\u003d\"dayOfWeek\" text\u003d\"Sat\" GridPane.columnIndex\u003d\"6\" GridPane.halignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          GridPane.valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003cGridPane fx:id\u003d\"gridCalendar\" maxHeight\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                          maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"800\" hgap\u003d\"5\" vgap\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" right\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 84
    }
  },
  {
    "path": "src/main/resources/view/DialogBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cHBox fx:id\u003d\"dialogBox\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "      prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "   \u003cRegion styleClass\u003d\"region\" prefWidth\u003d\"200.0\" HBox.hgrow\u003d\"ALWAYS\" visible\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "   \u003cHBox fx:id\u003d\"miniBox\" styleClass\u003d\"dialog\" alignment\u003d\"TOP_RIGHT\" spacing\u003d\"10\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "      \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "      \u003cCircle fx:id\u003d\"circle\" radius\u003d\"25\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "   \u003c/HBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "Jefferson111": 10
    }
  },
  {
    "path": "src/main/resources/view/DialogBoxImage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003cHBox fx:id\u003d\"dialogBoxImage\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "      xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "  \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\u003cVBox prefHeight\u003d\"400.0\" prefWidth\u003d\"400.0\" alignment\u003d\"TOP_RIGHT\" spacing\u003d\"10\" styleClass\u003d\"dialog\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\u003cHBox fx:id\u003d\"miniBox\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\t\u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\t\u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\t\u003cCircle fx:id\u003d\"circle\" radius\u003d\"25\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\u003c/HBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\t\u003cImageView fx:id\u003d\"imageBox\" fitHeight\u003d\"360.0\" fitWidth\u003d\"360.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\t\u003c/VBox\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "  \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Inno97": 21
    }
  },
  {
    "path": "src/main/resources/view/LocationCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cStackPane fx:id\u003d\"LocationCard\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" minWidth\u003d\"30\" minHeight\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 6
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "         title\u003d\"SGTravel\" minWidth\u003d\"400\" minHeight\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "         \u003cAnchorPane styleClass\u003d\"mainPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                     minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                     xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" onKeyPressed\u003d\"#handleKeyPress\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                       AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                    onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" vbarPolicy\u003d\"ALWAYS\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "                        prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "               \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"sidePanel\" layoutX\u003d\"400.0\" layoutY\u003d\"0.0\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/Scene\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/scene\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Inno97": 2,
      "-": 16,
      "Jefferson111": 15
    }
  },
  {
    "path": "src/main/resources/view/MapWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "         title\u003d\"Map\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"map\" styleClass\u003d\"mainPane\" prefWidth\u003d\"800.0\" prefHeight\u003d\"600.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 16
    }
  },
  {
    "path": "src/main/resources/view/PointCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cStackPane xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" minWidth\u003d\"30\" minHeight\u003d\"30\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cCircle fx:id\u003d\"circle\" radius\u003d\"10\" StackPane.alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 8
    }
  },
  {
    "path": "src/main/resources/view/SidePanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.control.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"miniMap\" styleClass\u003d\"sidePane\" StackPane.alignment\u003d\"TOP_CENTER\" prefHeight\u003d\"300.0\" prefWidth\u003d\"400.0\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003cStackPane fx:id\u003d\"taskContainer\" layoutY\u003d\"300.0\" prefHeight\u003d\"300.0\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "               prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cLabel fx:id\u003d\"description\" StackPane.alignment\u003d\"TOP_CENTER\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cLabel fx:id\u003d\"startDate\" StackPane.alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cLabel fx:id\u003d\"endDate\" StackPane.alignment\u003d\"BOTTOM_CENTER\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            \u003cInsets bottom\u003d\"100.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"100.0\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 19
    }
  },
  {
    "path": "src/main/resources/view/StaticMapWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "         title\u003d\"Map\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \u003cAnchorPane fx:id\u003d\"map\" styleClass\u003d\"mainPane\" prefWidth\u003d\"512.0\" prefHeight\u003d\"512.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Inno97": 16
    }
  },
  {
    "path": "src/test/java/duke/ModelStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.CorruptedFileException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.FileNotSavedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "import duke.logic.CreateMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.RouteList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.lists.VenueList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Agenda;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.transports.BusService;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private EventList events;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private RouteList routes;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    private CreateMap map;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     * Construct the ModelStub for testing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public ModelStub() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        storage \u003d new Storage();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events \u003d new EventList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routes \u003d new RouteList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventList getEvents() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return events;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    public CreateMap getMap() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hongchuan97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public RouteList getRoutes() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return routes;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public void save() throws CorruptedFileException, FileNotSavedException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        System.out.println(\"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public EventList getSortedList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return events.getSortedList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public List\u003cBusStop\u003e getBusStops() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    public List\u003cBusService\u003e getBusService() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    public List\u003cAgenda\u003e getRecommendations(int numberOfDays, Itinerary itinerary) throws DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        return storage.readVenues(numberOfDays);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    public VenueList getEventVenues() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        return new VenueList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 9,
      "Inno97": 22,
      "hongchuan97": 7,
      "Jefferson111": 44
    }
  },
  {
    "path": "src/test/java/duke/UiStub.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "public class UiStub {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiStub(VBox dialogContainer) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/test/java/duke/logic/EditorManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.EmptyVenueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.EventNotSelectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.PromptCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.PanelResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.EventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.VenueList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class EditorManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void activate() throws DukeException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(EmptyVenueException.class, () -\u003e EditorManager.activate(new EventList(), new VenueList()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event e \u003d new Event(\"Pulau Tekong\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(e.getLocation());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.activate(events, venues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void deactivate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.deactivate();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(EditorManager.isActive());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void isActive() throws DukeException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.deactivate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(EditorManager.isActive());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event e \u003d new Event(\"Pulau Tekong\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(e.getLocation());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.activate(events, venues);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.isActive());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void edit() throws DukeException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.deactivate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event e \u003d new Event(\"Pulau Tekong\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(e.getLocation());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event e2 \u003d new Event(\"Tuas\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(e2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(e2.getLocation());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.activate(events, venues);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.isActive());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(EventNotSelectedException.class, () -\u003e EditorManager.edit(\"Yew Tee\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.edit(KeyCode.ENTER);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.edit(\"Yew Tee\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.edit(KeyCode.DOWN);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.edit(\"Mon\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.edit(KeyCode.DOWN);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.edit(\"Mon\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.edit(KeyCode.DOWN);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.edit(\"Boon lay\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(EditorManager.edit(\"x\") instanceof EditCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void testEdit() throws DukeException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.deactivate();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(EditorManager.isActive());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event e \u003d new Event(\"Pulau Tekong\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventList events \u003d new EventList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        events.add(e);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(e.getLocation());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EditorManager.activate(events, venues);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        PanelResult result \u003d EditorManager.edit(KeyCode.K);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(result.isReady());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d EditorManager.edit(KeyCode.UP);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(result.isReady());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d EditorManager.edit(KeyCode.ENTER);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(result.isReady());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d EditorManager.edit(KeyCode.ENTER);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(result.isReady());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d EditorManager.edit(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(result.isReady());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        result \u003d EditorManager.edit(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(result.isReady());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 101
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"NUS\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(event);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        addCommand.execute(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(model.getEvents().contains(event));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 23
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/CommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class CommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new HelpCommand() instanceof Command);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new ListCommand() instanceof Command);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(new ExitCommand() instanceof Command);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 15
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class DeleteCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"Sentosa\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        model.getEvents().add(event);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        deleteCommand.execute(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(model.getEvents().contains(event));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 11,
      "Jefferson111": 12
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultExit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class ExitCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Command c \u003d new ExitCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(c.execute(model) instanceof CommandResultExit);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 18
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class FindCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Command c \u003d new FindCommand(\"meow\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(c.execute(modelStub) instanceof CommandResultText);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Command b \u003d new FindCommand(\"moo\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(b.execute(modelStub) instanceof CommandResultText);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 20
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class HelpCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Command c \u003d new HelpCommand();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(c.execute(modelStub) instanceof CommandResultText);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 18
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/LocationSearchCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiNullRequestException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.ApiTimeoutException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class LocationSearchCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    private static final String SENTOSA_MESSAGE"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            \u003d \"These are the coordinates of your search:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"SENTOSA\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            + \"1.2498144130047 103.82948052356899\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //test for a regular search"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        LocationSearchCommand locationSearchCommand1 \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (LocationSearchCommand) Parser.parseComplexCommand(\"search sentosa\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(SENTOSA_MESSAGE, locationSearchCommand1.execute(model).getMessage());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test where the api returns no result"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(ApiNullRequestException.class, () -\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Parser.parseComplexCommand(\"search invalid location\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test where the request times out"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(ApiTimeoutException.class, () -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            Parser.parseComplexCommand(\"search #\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 40
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/MarkDoneCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "class MarkDoneCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"NUS\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(event);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        addCommand.execute(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        MarkDoneCommand markDoneCommand \u003d new MarkDoneCommand(0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        markDoneCommand.execute(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(model.getEvents().get(0).isDone());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 12,
      "Jefferson111": 13
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/RecommendationsCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Itinerary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "class RecommendationsCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime startDate \u003d LocalDateTime.of(2019, 9, 9, 9, 9);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime endDate \u003d LocalDateTime.of(2019, 9, 13, 9, 9);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Venue hotel \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                103.753758637401, 0, 0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Itinerary itinerary \u003d new Itinerary(startDate,endDate,hotel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        RecommendationsCommand recommendationsCommand \u003d new RecommendationsCommand(itinerary);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        CommandResultText commandResult \u003d recommendationsCommand.execute(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String result1 \u003d commandResult.getMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertEquals(result1, itinerary.printItinerary().toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 31,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/RouteAddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteAddCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"2113\", null);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteAddCommand) Parser.parseComplexCommand(\"routeAdd 2113\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(route.getName(), model.getRoutes().get(0).getName());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 26
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/RouteDeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteDeleteCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteAddCommand) Parser.parseComplexCommand(\"routeAdd 2113\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteDeleteCommand routeDeleteCommand1 \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteDeleteCommand) Parser.parseComplexCommand(\"routeDelete 1\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeDeleteCommand1.execute(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(0, model.getRoutes().size());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for deleting non-existant route"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteDeleteCommand routeDeleteCommand2 \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteDeleteCommand) Parser.parseComplexCommand(\"routeDelete 1\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeDeleteCommand2.execute(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 36
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/RouteEditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.UnknownFieldException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteEditCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteAddCommand) Parser.parseComplexCommand(\"routeAdd 2113\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteEditCommand routeEditCommand1 \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteEditCommand) Parser.parseComplexCommand(\"routeEdit 1 name 2113T\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeEditCommand1.execute(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"2113T\", model.getRoutes().get(0).getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for editing non-existant route"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteEditCommand routeEditCommand2 \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteEditCommand) Parser.parseComplexCommand(\"routeEdit 2 name 2113T\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeEditCommand2.execute(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteEditCommand routeEditCommand3 \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteEditCommand) Parser.parseComplexCommand(\"routeEdit 1 description 2113T\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeEditCommand3.execute(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"2113T\", model.getRoutes().get(0).getDescription());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for editing non-existant field"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteEditCommand routeDeleteCommand4 \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteEditCommand) Parser.parseComplexCommand(\"routeEdit 1 test 2113T\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(UnknownFieldException.class, () -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeDeleteCommand4.execute(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 48
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/RouteNodeAddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.locations.BusStop;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.transports.Route;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteNodeAddCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Route route \u003d new Route(\"2113\", null);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        model.getRoutes().add(route);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeAddCommand routeNodeAddCommand1 \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeAddCommand) Parser.parseComplexCommand(\"routeNodeAdd 1 at 2113T by bus\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeNodeAddCommand1.execute(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(model.getRoutes().get(0).getNode(0) instanceof BusStop);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop busStop \u003d new BusStop(\"2113T\", null, null, 0.0, 0.0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        BusStop newBusStop \u003d (BusStop) model.getRoutes().get(0).getNode(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(busStop.getBusCode(), newBusStop.getBusCode());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        //negative test for adding to non-existent route"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeAddCommand routeNodeAddCommand2 \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeAddCommand) Parser.parseComplexCommand(\"routeNodeAdd 2 at 2113T by bus\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeAddCommand2.execute(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 41,
      "Jefferson111": 1
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/RouteNodeDeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteNodeDeleteCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteAddCommand) Parser.parseComplexCommand(\"routeAdd 2113\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeAddCommand routeNodeAddCommand \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeAddCommand) Parser.parseComplexCommand(\"routeNodeAdd 1 at 2113T by bus\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeNodeAddCommand.execute(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeDeleteCommand routeNodeDeleteCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeDeleteCommand) Parser.parseComplexCommand(\"routeNodeDelete 1 1\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeNodeDeleteCommand.execute(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertTrue(model.getRoutes().get(0).getNumNodes() \u003d\u003d 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for deleting non-existant route node"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeDeleteCommand routeNodeDeleteCommand3 \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeDeleteCommand) Parser.parseComplexCommand(\"routeNodeDelete 1 1\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeDeleteCommand3.execute(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteDeleteCommand routeDeleteCommand \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteDeleteCommand) Parser.parseComplexCommand(\"routeDelete 1\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeDeleteCommand.execute(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for deleting non-existant route node in non-existant route"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeDeleteCommand routeNodeDeleteCommand4 \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeDeleteCommand) Parser.parseComplexCommand(\"routeNodeDelete 1 1\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeDeleteCommand4.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 51
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/RouteNodeEditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.enumerations.Constraint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.InputNotDoubleException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.UnknownConstraintException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteNodeEditCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d new RouteAddCommand(\"2113\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeAddCommand routeNodeAddCommand1 \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeAddCommand) Parser.parseComplexCommand(\"routeNodeAdd 1 at 2113T by bus\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeNodeAddCommand1.execute(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeEditCommand routeNodeEditCommand1 \u003d new RouteNodeEditCommand(0, 0, \"address\", \"2113T\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeNodeEditCommand1.execute(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"2113T\", model.getRoutes().get(0).getNode(0).getAddress());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeEditCommand routeNodeEditCommand2 \u003d new RouteNodeEditCommand(0, 0, \"description\", \"2113T\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeNodeEditCommand2.execute(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(\"2113T\", model.getRoutes().get(0).getNode(0).getDescription());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeEditCommand routeNodeEditCommand3 \u003d new RouteNodeEditCommand(0, 0, \"type\", \"BUS\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeNodeEditCommand3.execute(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(Constraint.valueOf(\"BUS\"), model.getRoutes().get(0).getNode(0).getType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for a constraint that does not exist"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeEditCommand routeNodeEditCommand4 \u003d new RouteNodeEditCommand(0, 0, \"type\", \"2113T\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(UnknownConstraintException.class, () -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeEditCommand4.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeEditCommand routeNodeEditCommand5 \u003d new RouteNodeEditCommand(0, 0, \"latitude\", \"2113\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeNodeEditCommand5.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(2113, model.getRoutes().get(0).getNode(0).getLatitude());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for latitude that cannot be converted to a Double"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeEditCommand routeNodeEditCommand6 \u003d new RouteNodeEditCommand(0, 0, \"latitude\", \"NOT_DOUBLE\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(InputNotDoubleException.class, () -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeEditCommand6.execute(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeEditCommand routeNodeEditCommand7 \u003d new RouteNodeEditCommand(0, 0, \"longitude\", \"2113\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeNodeEditCommand7.execute(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(2113, model.getRoutes().get(0).getNode(0).getLongitude());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for longitude that cannot be converted to a Double"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeEditCommand routeNodeEditCommand8 \u003d new RouteNodeEditCommand(0, 0, \"longitude\", \"NOT_DOUBLE\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(InputNotDoubleException.class, () -\u003e {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeEditCommand8.execute(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 66
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/RouteNodeShowCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteNodeShowCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"Here is the information of the Bus Stop:\\n2113T\\nnull\\nnull\\n(BUS, 0.0, 0.0)\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteAddCommand) Parser.parseComplexCommand(\"routeAdd 2113\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeAddCommand routeNodeAddCommand \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeAddCommand) Parser.parseComplexCommand(\"routeNodeAdd 1 at 2113T by bus\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeNodeAddCommand.execute(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeListCommand routeNodeListCommand \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeListCommand) Parser.parseComplexCommand(\"routeNodeShow 1 1\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        CommandResultText result \u003d routeNodeListCommand.execute(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, result.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for non-existing route"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeListCommand routeNodeListCommand2 \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeListCommand) Parser.parseComplexCommand(\"routeNodeShow 2 1\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeListCommand2.execute(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for non-existing route node in existing route"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeListCommand routeNodeListCommand3 \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeListCommand) Parser.parseComplexCommand(\"routeNodeShow 1 2\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeListCommand3.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for negative values in non-existing route"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeListCommand routeNodeListCommand4 \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeListCommand) Parser.parseComplexCommand(\"routeNodeShow -2 1\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeListCommand4.execute(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for negative values in non-existing route node in existing route"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteNodeListCommand routeNodeListCommand5 \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteNodeListCommand) Parser.parseComplexCommand(\"routeNodeShow 1 -2\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeNodeListCommand5.execute(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 63
    }
  },
  {
    "path": "src/test/java/duke/logic/commands/RouteShowCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Inno97"
        },
        "content": "package duke.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.commons.exceptions.QueryOutOfBoundsException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.logic.parsers.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import duke.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Inno97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Inno97"
        },
        "content": "class RouteShowCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        String expected \u003d \"Here is the information of the Route:\\n2113\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        Model model \u003d new ModelStub();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteAddCommand routeAddCommand \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteAddCommand) Parser.parseComplexCommand(\"routeAdd 2113\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        routeAddCommand.execute(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteListCommand routeListCommand1 \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteListCommand) Parser.parseComplexCommand(\"routeShow 1\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        CommandResultText result \u003d routeListCommand1.execute(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(expected, result.getMessage());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for non-existing route"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteListCommand routeListCommand2 \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteListCommand) Parser.parseComplexCommand(\"routeShow 2\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeListCommand2.execute(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for index 0"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteListCommand routeListCommand3 \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteListCommand) Parser.parseComplexCommand(\"routeShow 0\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeListCommand3.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Inno97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        //negative test for negative index"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        RouteListCommand routeListCommand4 \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Inno97"
        },
        "content": "                (RouteListCommand) Parser.parseComplexCommand(\"routeShow -1\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertThrows(QueryOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Inno97"
        },
        "content": "            routeListCommand4.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        });"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Inno97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Inno97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Inno97": 53
    }
  },
  {
    "path": "src/test/java/duke/logic/conversations/ConversationManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.PromptCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class ConversationManagerTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void converse() throws DukeException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"delete\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(conversationManager.getCommand() instanceof PromptCommand);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"Travel the Seven seas\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(conversationManager.getCommand() instanceof PromptCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"1\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(conversationManager.getCommand() instanceof DeleteCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void clearContext() throws DukeException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"done\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(conversationManager.getCommand() instanceof PromptCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.clearContext();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(NullPointerException.class, conversationManager::getCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getCommand() throws DukeException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        ConversationManager conversationManager \u003d new ConversationManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        conversationManager.converse(\"delete\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(conversationManager.getCommand() instanceof PromptCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 39
    }
  },
  {
    "path": "src/test/java/duke/logic/conversations/DeleteConversationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.conversations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class DeleteConversationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        DeleteConversation deleteConversation \u003d new DeleteConversation();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        deleteConversation.execute(\"one\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(deleteConversation.isFinished());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void buildResult() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        DeleteConversation deleteConversation \u003d new DeleteConversation();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        deleteConversation.execute(\"1\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(deleteConversation.isFinished());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        deleteConversation.buildResult();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(\"delete 1\", deleteConversation.getResult());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 26
    }
  },
  {
    "path": "src/test/java/duke/logic/parsers/ConversationParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeUnknownCommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.DeleteConversation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.FindConversation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.FindPathConversation;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.FreeTimeConversation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.GetBusStopConversation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.MarkDoneConversation;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.conversations.SearchConversation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class ConversationParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void parse() throws DukeUnknownCommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(ConversationParser.parse(\"done\") instanceof MarkDoneConversation);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(ConversationParser.parse(\"delete\") instanceof DeleteConversation);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(ConversationParser.parse(\"find\") instanceof FindConversation);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(ConversationParser.parse(\"findtime\") instanceof FreeTimeConversation);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(ConversationParser.parse(\"busStop\") instanceof GetBusStopConversation);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(ConversationParser.parse(\"findPath\") instanceof FindPathConversation);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(ConversationParser.parse(\"search\") instanceof SearchConversation);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(DukeUnknownCommandException.class, () -\u003e ConversationParser.parse(\"sdasds\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(DukeUnknownCommandException.class, () -\u003e ConversationParser.parse(\"deleteeee\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(DukeUnknownCommandException.class, () -\u003e ConversationParser.parse(\"DElete\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 31
    }
  },
  {
    "path": "src/test/java/duke/logic/parsers/ParserStorageUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "class ParserStorageUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void createTaskFromDate() throws DukeException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event event \u003d new Event(\"NTU\", LocalDateTime.now(), LocalDateTime.now());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Event check \u003d ParserStorageUtil.createTaskFromStorage(ParserStorageUtil.toStorageString(event));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(check.isDone());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(check.getDescription(), \"NTU\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 14,
      "Jefferson111": 7
    }
  },
  {
    "path": "src/test/java/duke/logic/parsers/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.MarkDoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void parse() throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"bye\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"list\") instanceof ListCommand);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(Parser.parseComplexCommand(\"done 1\") instanceof MarkDoneCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 18
    }
  },
  {
    "path": "src/test/java/duke/logic/parsers/ParserTimeUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeDateTimeParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "class ParserTimeUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void parseStringToDate() throws DukeDateTimeParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        LocalDateTime date \u003d LocalDateTime.of(2019, 9, 9, 9, 9);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(date, ParserTimeUtil.parseStringToDate(\"09/09/2019 0909\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "Jefferson111": 2
    }
  },
  {
    "path": "src/test/java/duke/logic/parsers/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class ParserUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void createTodo() throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(ParserUtil.createTodo(\"todo Homework\") instanceof Todo);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getIndex() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Inno97"
        },
        "content": "        assertEquals(ParserUtil.getIndex(\"done 1\".strip().split(\" \", 2)[1]), 0);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getSafeIndex() throws DukeException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(ParserUtil.getSafeIndex(\"done 5 10 10 10\"), 4);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 1,
      "Inno97": 1,
      "Jefferson111": 24
    }
  },
  {
    "path": "src/test/java/duke/logic/parsers/PromptParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.parsers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.logic.commands.PromptCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class PromptParserTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void parseCommand() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(PromptParser.parseCommand(\"foo\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(PromptParser.parseCommand(\"Nice! I need more.\") instanceof PromptCommand);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 15
    }
  },
  {
    "path": "src/test/java/duke/logic/selectors/EventFieldSelectorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class EventFieldSelectorTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getIndex() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventFieldSelector selector \u003d new EventFieldSelector();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void feedKeyCode() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        EventFieldSelector selector \u003d new EventFieldSelector();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.UP);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.DOWN);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.DOWN);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.UP);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 28
    }
  },
  {
    "path": "src/test/java/duke/logic/selectors/LocationHelperTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class LocationHelperTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void checkDirection() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401, 0, 0);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Venue v2 \u003d new Venue(\"Tuas Checkpoint\", 1.34942405517095, 103.636127935782, 0, 0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(LocationHelper.checkDirection(KeyCode.UP, v2, v1));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(LocationHelper.checkDirection(KeyCode.DOWN, v1, v2));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(LocationHelper.checkDirection(KeyCode.RIGHT, v2, v1));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(LocationHelper.checkDirection(KeyCode.LEFT, v1, v2));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 20
    }
  },
  {
    "path": "src/test/java/duke/logic/selectors/LocationSelectorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.logic.selectors;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.commons.exceptions.EmptyVenueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.lists.VenueList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class LocationSelectorTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401, 0, 0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue v2 \u003d new Venue(\"Tuas Checkpoint\", 1.34942405517095, 103.636127935782, 0, 0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getIndex() throws EmptyVenueException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertThrows(EmptyVenueException.class, () -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "            new LocationSelector(new VenueList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocationSelector selector \u003d new LocationSelector(venues);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void feedKeyCode() throws EmptyVenueException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v1);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocationSelector selector \u003d new LocationSelector(venues);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.LEFT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.LEFT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.RIGHT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.RIGHT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.DOWN);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.DOWN);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.UP);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.UP);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(selector.getIndex(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void unlock() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void isLock() throws EmptyVenueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        VenueList venues \u003d new VenueList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        venues.add(v2);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        LocationSelector selector \u003d new LocationSelector(venues);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(selector.isLock());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.K);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(selector.isLock());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.UP);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(selector.isLock());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.ENTER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(selector.isLock());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.ENTER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(selector.isLock());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.K);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(selector.isLock());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        selector.feedKeyCode(KeyCode.UP);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(selector.isLock());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 78
    }
  },
  {
    "path": "src/test/java/duke/model/locations/VenueTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "package duke.model.locations;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "class VenueTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue v1 \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401, 0, 0);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    private Venue v2 \u003d new Venue(\"Tuas Checkpoint\", 1.34942405517095, 103.636127935782, 0, 0);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getAddress() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v1.getAddress(), \"YEW TEE INDUSTRIAL ESTATE\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(v2.getAddress(), \"YEW TEE INDUSTRIAL ESTATE\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getLatitude() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v1.getLatitude(), 1.3973210291170202);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(v2.getLatitude(), 1.3973210291170202);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getLongitude() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v1.getLongitude(), 103.753758637401);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertNotEquals(v2.getLongitude(), 103.753758637401);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getDistX() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v1.getDistX(), 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getDistY() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v2.getDistY(), 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void getDistance() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(v2.getDistance(v1) \u003c 15000);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(v1.getDistance(v2) \u003e 1000);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v1.getDistance(v2), v2.getDistance(v1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setLatitude() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        v1.setLatitude(0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v1.getLatitude(), 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void setLongitude() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        v2.setLongitude(0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v2.getLongitude(), 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertEquals(v1.toString(), \"YEW TEE INDUSTRIAL ESTATE | 1.3973210291170202 | 103.753758637401 | 0.0 | 0.0\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        Venue v \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202, 103.753758637401, 0, 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertTrue(v.equals(v1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "        assertFalse(v2.equals(v1));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jefferson111"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jefferson111": 72
    }
  },
  {
    "path": "src/test/java/duke/model/planning/AgendaTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.model.planning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.ModelStub;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.commons.exceptions.DukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.commands.RecommendationsCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.logic.commands.results.CommandResultText;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.locations.Venue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "class AgendaTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    void execute() throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        ModelStub model \u003d new ModelStub();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime startDate \u003d LocalDateTime.of(2019, 9, 9, 9, 9);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        LocalDateTime endDate \u003d LocalDateTime.of(2019, 9, 13, 9, 9);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Venue hotel \u003d new Venue(\"YEW TEE INDUSTRIAL ESTATE\", 1.3973210291170202,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "                103.753758637401, 0, 0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        Itinerary itinerary \u003d new Itinerary(startDate,endDate,hotel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        RecommendationsCommand recommendationsCommand \u003d new RecommendationsCommand(itinerary);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        CommandResultText commandResult \u003d recommendationsCommand.execute(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        String result1 \u003d commandResult.getMessage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertEquals(result1, itinerary.printItinerary().toString());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 33
    }
  },
  {
    "path": "src/test/java/duke/model/planning/TodoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "package duke.model.planning;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "import duke.model.planning.Todo;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "class TodoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Todo todo \u003d new Todo(\"Homework\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sukrut1881"
        },
        "content": "        assertEquals(todo.toString(), \"Homework\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sukrut1881": 3,
      "-": 12
    }
  }
]
