[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.4\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "group \u0027seedu.duchess\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "version \u00271.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    archiveBaseName \u003d \"duchess\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    archiveVersion \u003d \"1.4.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.9.9.3\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.9.9\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        })"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "javadoc {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    standardInput System.in"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    mainClassName \u003d \"Duchess\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mohideenik": 48,
      "-": 34
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "rootProject.name \u003d \u0027Duchess\u0027"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 1
    }
  },
  {
    "path": "src/main/java/Duchess.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.DuchessHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class Duchess {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Store store;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Creates an instant of Duchess to be executed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param filePath name of file to store tasks"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private Duchess(String filePath) throws DuchessException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Logger logger \u003d Logger.getLogger(\"Duchess\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            FileHandler logFileHandler \u003d new FileHandler(\"duchess.log\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            logFileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            logger.addHandler(logFileHandler);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            System.out.println(\"Unable to start logger, continuing without logging.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser \u003d new Parser(logger);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            store \u003d storage.load();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muserr"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            store \u003d Store.seedStore();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            storage.save(store);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muserr"
        },
        "content": "        storage.addToUndoStackPush(store);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Begins the execution of Duchess."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muserr"
        },
        "content": "        DuchessHistory duchessHistory \u003d new DuchessHistory();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muserr"
        },
        "content": "                duchessHistory.add(fullCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                ui.beginBlock();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                Command c \u003d parser.parse(fullCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muserr"
        },
        "content": "                DuchessHistory.addValidCommands(c);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muserr"
        },
        "content": "                c.execute(store, ui, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muserr"
        },
        "content": "                // Take snapshot here, you save copies of Store store here"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muserr"
        },
        "content": "                storage.addToUndoStackPush(store);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            } catch (DuchessException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                ui.endBlock();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static void main(String[] args) throws DuchessException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        new Duchess(\"data.json\").run();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 6,
      "mohideenik": 66,
      "nishanthelango": 3,
      "muserr": 14,
      "-": 2
    }
  },
  {
    "path": "src/main/java/duchess/exceptions/DuchessException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "public class DuchessException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public DuchessException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nishanthelango": 7
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/AddDeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.model.Grade;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " * Command to add a given deadline task to the tasklist."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private int weightage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Create a command to add a deadline."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param description String containing description of deadline task"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param deadline    LocalDateTime object of deadline task"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public AddDeadlineCommand(String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public AddDeadlineCommand(String description, LocalDateTime deadline, String moduleCode) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this(description, deadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public AddDeadlineCommand(String description, LocalDateTime deadline, String moduleCode, int weightage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this(description, deadline, moduleCode);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.weightage \u003d weightage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Task task \u003d new Deadline(description, deadline);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Grade grade;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (moduleCode !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            Optional\u003cModule\u003e module \u003d store.findModuleByCode(moduleCode);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            task.setModule(module.orElseThrow(() -\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    new DuchessException(\"Unable to find given module.\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            grade \u003d new Grade(description, weightage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            task.setGrade(grade);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            module.get().addGrade(grade);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        store.getTaskList().add(task);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ui.showTaskAdded(store.getTaskList(), task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        storage.save(store);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 7,
      "mohideenik": 18,
      "nishanthelango": 38
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/AddEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.model.Grade;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " * Command to add a given event task to the tasklist."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private int weightage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Creates a command to add an event."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param description description of Event task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param end         end time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param start       start time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public AddEventCommand(String description, LocalDateTime end, LocalDateTime start) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public AddEventCommand(String description, LocalDateTime end, LocalDateTime start, String moduleCode) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this(description, end, start);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public AddEventCommand("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            String description, LocalDateTime end, LocalDateTime start, String moduleCode, int weightage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this(description, end, start, moduleCode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.weightage \u003d weightage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Event task \u003d new Event(description, end, start);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Grade grade;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (moduleCode !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            Optional\u003cModule\u003e module \u003d store.findModuleByCode(moduleCode);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            task.setModule(module.orElseThrow(() -\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    new DuchessException(\"Unable to find given module.\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            grade \u003d new Grade(description, weightage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            task.setGrade(grade);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            module.get().addGrade(grade);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (store.isClashing(task)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Unable to add event - clash found.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        store.getTaskList().add(task);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (task.isCalendarEntry()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            List\u003cCalendarEntry\u003e ce \u003d store.getDuchessCalendar();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            CalendarManager.addEntry(ce, task, start.toLocalDate());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            store.setDuchessCalendar(ce);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ui.showTaskAdded(store.getTaskList(), task);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        storage.save(store);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 12,
      "mohideenik": 20,
      "nishanthelango": 45
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/AddGradeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.model.Grade;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " * Command to add a given grade to list of grades."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "public class AddGradeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String assessment;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private int marks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private int maxMarks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private int weightage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private static final String TOTAL_WEIGHTAGE_ERROR \u003d \"Total weightage of grades cannot exceed 100.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Creates a command to add a grade to a module."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param marks marks obtained"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param maxMarks maximum marks obtainable"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param weightage weightage of assessment out of 100"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param assessment description of assessment"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param moduleCode the code of the module"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public AddGradeCommand(int marks, int maxMarks, int weightage, String assessment, String moduleCode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.assessment \u003d assessment;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.marks \u003d marks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.maxMarks \u003d maxMarks;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.weightage \u003d weightage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Adds a grade to a module."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param store the store"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param ui Userinterface object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param storage Storage object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @throws DuchessException if module cannot be found or if total weightage exceeds 100"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Grade grade \u003d new Grade(assessment, marks, maxMarks, weightage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Optional\u003cModule\u003e module \u003d store.findModuleByCode(moduleCode);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (module.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            if (grade.getWeightage() + module.get().getWeightageTotal() \u003e 100.0) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                throw new DuchessException(TOTAL_WEIGHTAGE_ERROR);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            module.get().addGrade(grade);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            ui.showGradeAdded(module.get(), grade, module.get().getGrades());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            storage.save(store);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Unable to find given module.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "nishanthelango": 66
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/AddLessonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muserr"
        },
        "content": "//@@author muserr"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.calendar.CalendarManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.calendar.CalendarUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.task.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": " * Adds recurring lessons."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class AddLessonCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private LocalDateTime endCopy;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private LocalDateTime startCopy;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private final int studyWeeks \u003d 15;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private final int recessWeek \u003d 7;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private final String invalidStartDate"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": "            \u003d \"Invalid start date, start date provided must be within a semester.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private final String invalidModuleCode"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muserr"
        },
        "content": "            \u003d \"Unrecognized module code, add module first before assigning lessons.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Constructor to add lessons."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param description lesson description"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param start start date and time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param end end date and time"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param moduleCode module code of lesson"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public AddLessonCommand(String description, LocalDateTime start, LocalDateTime end, String moduleCode) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muserr"
        },
        "content": "        this.description \u003d description + \" (\" + moduleCode + \")\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muserr"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muserr"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muserr"
        },
        "content": "        this.startCopy \u003d start;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muserr"
        },
        "content": "        this.endCopy \u003d end;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muserr"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muserr"
        },
        "content": "        this.startDate \u003d start.toLocalDate();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Compares user inputs and adds recurring lessons for the semester."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param store store object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param ui user interaction object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param storage storage object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @throws DuchessException exception thrown if invalid module code or start date"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (store.findModuleByCode(moduleCode).isEmpty()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(invalidModuleCode);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (CalendarUtil.processDate(startDate) \u003d\u003d -1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(invalidStartDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muserr"
        },
        "content": "            int currentWeek \u003d CalendarUtil.getWeekAsInt(startDate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muserr"
        },
        "content": "            int prevTaskListSize \u003d store.getTaskList().size();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muserr"
        },
        "content": "            for (int i \u003d currentWeek; i \u003c studyWeeks; i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muserr"
        },
        "content": "                if (i !\u003d recessWeek) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muserr"
        },
        "content": "                    addLessons(store, storage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muserr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muserr"
        },
        "content": "                startCopy \u003d startCopy.plusWeeks(1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muserr"
        },
        "content": "                endCopy \u003d endCopy.plusWeeks(1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muserr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muserr"
        },
        "content": "            int currTaskListSize \u003d store.getTaskList().size();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muserr"
        },
        "content": "            if (currTaskListSize \u003e prevTaskListSize) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muserr"
        },
        "content": "                ui.showLessonsAdded(moduleCode);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muserr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muserr"
        },
        "content": "                ui.showNoLessonsAdded(moduleCode);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muserr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Adds lessons to task list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param store store object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param storage storage object"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @throws DuchessException exception thrown if adding lessons is unsuccessful"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private void addLessons(Store store, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Event task \u003d new Event(description, endCopy, startCopy);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assert (task !\u003d null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (!store.isClashing(task)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muserr"
        },
        "content": "            store.getTaskList().add(task);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muserr"
        },
        "content": "            List\u003cCalendarEntry\u003e ce \u003d store.getDuchessCalendar();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muserr"
        },
        "content": "            CalendarManager.addEntry(ce, task, startCopy.toLocalDate());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muserr"
        },
        "content": "            store.setDuchessCalendar(ce);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storage.save(store);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muserr": 109
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/AddModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * Command to add a given module to the store."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private String moduleName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Create a command to add a module."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param moduleName the name of the module"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param moduleCode the code of the module"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public AddModuleCommand(String moduleName, String moduleCode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assert moduleName !\u003d null : \"module name can\u0027t be null\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assert moduleCode !\u003d null : \"module code can\u0027t be null\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Instantiates the module, adds it to the store and saves it."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param store the application store"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param ui the Ui object to give feedback to the user"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param storage the storage object to save the store to the disk"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException if there is an error creating the module or saving the module"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Module module \u003d new Module(moduleCode, moduleName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        store.getModuleList().add(module);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ui.showModuleAdded(module, store.getModuleList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        storage.save(store);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 1,
      "mohideenik": 41,
      "nishanthelango": 2
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/AddTodoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.model.Grade;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Todo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private int weightage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public AddTodoCommand(String description) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public AddTodoCommand(String description, String moduleCode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Creates a command to add a Todo task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param description description of Todo task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param moduleCode Code of the associated module"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param weightage weightage of the associated grade"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public AddTodoCommand(String description, String moduleCode, int weightage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.weightage \u003d weightage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Task task \u003d new Todo(description);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Grade grade;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (moduleCode !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            Optional\u003cModule\u003e module \u003d store.findModuleByCode(moduleCode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            task.setModule(module.orElseThrow(() -\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    new DuchessException(\"Unable to find given module.\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            grade \u003d new Grade(description, weightage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            task.setGrade(grade);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            module.get().addGrade(grade);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        store.getTaskList().add(task);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ui.showTaskAdded(store.getTaskList(), task);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        storage.save(store);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 7,
      "mohideenik": 18,
      "nishanthelango": 35
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Bids users farewell."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param store the store"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param ui Userinterface object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param storage Storage object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException Exception thrown when duchess.storage not found"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 5,
      "mohideenik": 9,
      "nishanthelango": 2,
      "muserr": 6
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public abstract void execute(Store store, Ui ui, Storage storage) throws DuchessException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 6,
      "mohideenik": 8,
      "nishanthelango": 2
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/DeleteGradeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.model.Grade;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " * Command to delete grade from given module."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "public class DeleteGradeCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final int gradeNo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public DeleteGradeCommand(String moduleCode, int gradeNo) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.gradeNo \u003d gradeNo - 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            Optional\u003cModule\u003e module \u003d store.findModuleByCode(moduleCode);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            if (module.isPresent()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                Grade toRemove \u003d module.get().getGrades().get(gradeNo);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                module.get().deleteGrade(gradeNo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                ui.showDeletedGrade(toRemove.getTask(), module.get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                storage.save(store);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Please supply a valid number.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Unable to find given module.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nishanthelango": 42
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/DeleteLessonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muserr"
        },
        "content": "//@@author muserr"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.calendar.CalendarManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": " * Deletes recurring lessons."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class DeleteLessonCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private String lessonDelete;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Constructor for DeleteLessonCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param type lesson type"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param moduleCode module code"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public DeleteLessonCommand(String type, String moduleCode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muserr"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muserr"
        },
        "content": "        lessonDelete \u003d type + \" (\" + moduleCode + \")\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muserr"
        },
        "content": "        boolean isDeleted \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muserr"
        },
        "content": "        List\u003cInteger\u003e toDelete \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muserr"
        },
        "content": "        List\u003cCalendarEntry\u003e update \u003d store.getDuchessCalendar();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muserr"
        },
        "content": "        for (int i \u003d 0; i \u003c store.getTaskList().size(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muserr"
        },
        "content": "            task \u003d store.getTaskList().get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muserr"
        },
        "content": "            if (task.getDescription().equalsIgnoreCase(this.lessonDelete)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muserr"
        },
        "content": "                store.getTaskList().remove(i);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muserr"
        },
        "content": "                toDelete.add(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muserr"
        },
        "content": "                isDeleted \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muserr"
        },
        "content": "                LocalDate date \u003d task.getTimeFrame().getStart().toLocalDate();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muserr"
        },
        "content": "                CalendarManager.deleteEntry(update, task, date);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muserr"
        },
        "content": "                store.setDuchessCalendar(update);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muserr"
        },
        "content": "                i--;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muserr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (isDeleted) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muserr"
        },
        "content": "            ui.showDeletedLesson(moduleCode);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muserr"
        },
        "content": "            ui.showNoDeletedLesson(moduleCode);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muserr"
        },
        "content": "        storage.save(store);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muserr": 67
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/DeleteModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * Command to delete given module."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private static final String VALID_NUMBER_MSG \u003d \"Please supply a valid number.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final int moduleNo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Deletes the module given an index."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param moduleNo the index of the module to delete"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public DeleteModuleCommand(int moduleNo) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.moduleNo \u003d moduleNo - 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Deletes a module if there are no associated tasks."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param store the application store"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param ui the application ui"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param storage the storage instance"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException if the index is invalid"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            Module toRemove \u003d store.getModuleList().get(moduleNo);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            List\u003cTask\u003e tasks \u003d store.getTaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            List\u003cTask\u003e associatedTasks \u003d tasks.stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    .filter(task -\u003e task.getModule().equals(Optional.of(toRemove)))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            if (associatedTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                store.getModuleList().remove(moduleNo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                ui.showDeletedModule(toRemove);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                storage.save(store);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                ui.showUnableToDeleteModuleMsg(associatedTasks);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            throw new DuchessException(VALID_NUMBER_MSG);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 59
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/DeleteTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " * Command to remove given task from the tasklist."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final int taskNo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public DeleteTaskCommand(int taskNo) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.taskNo \u003d taskNo - 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Deletes a user specified task."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param store the store"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param ui Userinterface object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param storage Storage object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @throws DuchessException Exception thrown when errors besides invalid format and index are found"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            Task toRemove \u003d store.getTaskList().get(taskNo);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            store.getTaskList().remove(taskNo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            ui.showDeletedTask(store.getTaskList(), toRemove);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            if (toRemove.isCalendarEntry()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                List\u003cCalendarEntry\u003e update \u003d store.getDuchessCalendar();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                LocalDate date \u003d toRemove.getTimeFrame().getStart().toLocalDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                update \u003d CalendarManager.deleteEntry(update, toRemove, date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                store.setDuchessCalendar(update);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            storage.save(store);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Please supply a valid number.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 17,
      "mohideenik": 19,
      "nishanthelango": 7,
      "muserr": 6
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/DisplayCalendarCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": " * Command to display calendar in either the week or day view."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class DisplayCalendarCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private LocalDate start;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private LocalDate end;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private boolean isWeek;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Initialises start and end (where applicable) dates of calendar week view."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param input user input date"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param isWeek true for week view, false for day view"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public DisplayCalendarCommand(LocalDate input, boolean isWeek) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (isWeek) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            List\u003cLocalDate\u003e dateRange \u003d Util.parseToWeekDates(input);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            this.start \u003d dateRange.get(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            this.end \u003d dateRange.get(1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            this.start \u003d input;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            this.end \u003d input;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.isWeek \u003d isWeek;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        List\u003cCalendarEntry\u003e currCalendar \u003d store.getDuchessCalendar();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        String context \u003d CalendarUtil.toString(start);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (isWeek) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            List\u003cCalendarEntry\u003e query \u003d currCalendar"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                    .filter(ce -\u003e ce.getDate().compareTo(start) \u003e\u003d 0 \u0026\u0026 ce.getDate().compareTo(end) \u003c\u003d 0)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            ui.displayCalendar(query, context);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            CalendarEntry ce \u003d currCalendar"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                    .filter(e -\u003e e.getDate().equals(start))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                    .findFirst()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                    .orElse(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            if (ce \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                throw new DuchessException(\"You have no events scheduled on \" + start.toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            ui.displayCalendar(ce, context);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 63
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/DisplayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class DisplayCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public DisplayCommand(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ui.displayMessage(this.message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 19
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/DoneGradeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.model.Grade;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " * Command to mark Specified task as complete."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " * Marks are given to be added to the grade."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "public class DoneGradeCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private int marksObtained;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private int maxMarks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private int gradeNo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Creates a command to mark given task as complete."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param moduleCode    the code of the module"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param gradeNo       the index of the grade in list of grades"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param marksObtained marks obtained"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param maxMarks      maximum marks obtainable"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public DoneGradeCommand(String moduleCode, int gradeNo, int marksObtained, int maxMarks) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.gradeNo \u003d gradeNo - 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.marksObtained \u003d marksObtained;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.maxMarks \u003d maxMarks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            Optional\u003cModule\u003e module \u003d store.findModuleByCode(moduleCode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            if (module.isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                Grade grade \u003d module.get().getGrades().get(gradeNo);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                grade.markAsComplete(marksObtained, maxMarks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                module.get().updateGrade(grade);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                ui.showCompletedGrade(grade);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                storage.save(store);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Please supply a valid number.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Unable to find given module.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nishanthelango": 56
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/DoneTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " * Command to mark specified task as done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "public class DoneTaskCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private int taskNo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public DoneTaskCommand(int taskNo) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.taskNo \u003d taskNo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            Task task \u003d store.getTaskList().get(taskNo);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            task.setDone(true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            if (task.isCalendarEntry()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                List\u003cCalendarEntry\u003e update \u003d store.getDuchessCalendar();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                LocalDate date \u003d task.getTimeFrame().getStart().toLocalDate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                update \u003d CalendarManager.deleteEntry(update, task, date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                CalendarManager.addEntry(update, task, date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                store.setDuchessCalendar(update);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            ui.showDoneTask(task);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            storage.save(store);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Please supply a valid number.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 17,
      "mohideenik": 15,
      "nishanthelango": 10
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/ExportCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": " * Command to export calendar in either the week or day view."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class ExportCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private LocalDate start;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private LocalDate end;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private PrintStream file;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private boolean isWeek;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Initialises start and end dates, file and filepath of export."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param input    date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param file     file to save the text file in"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param filepath filepath name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param isWeek   true for week, false for day"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public ExportCommand(LocalDate input, PrintStream file, String filepath, boolean isWeek) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.isWeek \u003d isWeek;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (isWeek) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            List\u003cLocalDate\u003e dateRange \u003d Util.parseToWeekDates(input);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            this.start \u003d dateRange.get(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            this.end \u003d dateRange.get(1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            this.start \u003d input;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            this.end \u003d input;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        List\u003cCalendarEntry\u003e currCalendar \u003d store.getDuchessCalendar();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        String context \u003d CalendarUtil.toString(start);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        List\u003cString\u003e display;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (isWeek) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            List\u003cCalendarEntry\u003e query \u003d currCalendar"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                    .filter(ce -\u003e ce.getDate().compareTo(start) \u003e\u003d 0 \u0026\u0026 ce.getDate().compareTo(end) \u003c\u003d 0)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            display \u003d ui.stringCalendar(query, context);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            CalendarEntry ce \u003d currCalendar"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                    .stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                    .filter(e -\u003e e.getDate().equals(start))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                    .findFirst()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                    .orElse(null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            if (ce \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                throw new DuchessException(\"You have no events scheduled on \" + start.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            display \u003d ui.stringCalendar(ce, context);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (String s : display) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            file.println(s);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        file.flush();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        file.close();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        ui.showFinishedExport(filepath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 77
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " * Command to search for given task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private List\u003cString\u003e words;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Returns the length of the longest common subsequence of 2 Strings."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param a the first String"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param b the second String"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @return the length of the longest common subsequence"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private int longestCommonSubsequence(String a, String b) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        int[][] table \u003d new int[a.length() + 1][b.length() + 1];"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        for (int i \u003d 0; i \u003c table.length - 1; i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            for (int j \u003d 0; j \u003c table[0].length - 1; j++) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                if (a.charAt(i) \u003d\u003d b.charAt(j)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    table[i + 1][j + 1] \u003d table[i][j] + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    table[i + 1][j + 1] \u003d Math.max(table[i][j + 1], table[i + 1][j]);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return table[a.length()][b.length()];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public FindCommand(List\u003cString\u003e words) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.words \u003d words;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (words.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Please enter at least a keyword to search.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            String searchTerm \u003d String.join(\" \", words.subList(0, words.size())).toLowerCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            List\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            If search term is enclosed by double quotation marks,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            search for exact matches."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "             */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            if (!\"\\\"\".equals(searchTerm) \u0026\u0026 searchTerm.charAt(0) \u003d\u003d \u0027\"\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    \u0026\u0026 searchTerm.charAt(searchTerm.length() - 1) \u003d\u003d \u0027\"\u0027) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                filteredTasks \u003d store"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        .getTaskList()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        .filter(task -\u003e task.getDescription()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                                .equals(searchTerm.substring(1, searchTerm.length() - 1)))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            Search for task descriptions with longest common subsequence of length"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            equal to at least 2 less than the length of the search term."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "             */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                String trimmedSearchTerm \u003d searchTerm.replaceAll(\" \", \"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                filteredTasks \u003d store"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        .getTaskList().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        .filter(task -\u003e longestCommonSubsequence(task.getDescription().toLowerCase()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                                .replaceAll(\" \", \"\"), trimmedSearchTerm)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                                \u003e\u003d trimmedSearchTerm.length() - 2)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                /*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                Checks if the task description contains the exact search term,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                if the search term is too short (less than 3 chars)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                 */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                if (trimmedSearchTerm.length() \u003c\u003d 2) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    filteredTasks \u003d filteredTasks.stream().filter(task -\u003e task.getDescription().toLowerCase()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                            .contains(trimmedSearchTerm)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                Sort the filtered tasks based on similarity to searchTerm."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                 */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                filteredTasks.sort(Comparator"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        .comparingInt(task -\u003e -longestCommonSubsequence(task.getDescription().toLowerCase()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                                .replaceAll(\" \", \"\"), trimmedSearchTerm)));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            if (filteredTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                throw new DuchessException(\"There are no matching tasks.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                ui.showSearchResult(filteredTasks);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 6,
      "mohideenik": 17,
      "nishanthelango": 75,
      "muserr": 1
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/HistoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muserr"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.DuchessHistory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": " * Command to display input history."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays full log command to users."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param store store object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param ui user interaction object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param storage storage object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @throws DuchessException if display is unsuccessful"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "        ui.showUserHistory(DuchessHistory.getFullLog());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nishanthelango": 2,
      "muserr": 24
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/ListGradesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " * Command to list grades for the given module."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "public class ListGradesCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public ListGradesCommand(String moduleCode) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Optional\u003cModule\u003e module \u003d store.findModuleByCode(moduleCode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (module.isPresent()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            ui.showGradeList(module.get().getGrades(), module.get());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Unable to find given module.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nishanthelango": 30
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/ListModulesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " * Command to list modules in the store."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class ListModulesCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ui.showModuleList(store.getModuleList());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 8,
      "mohideenik": 3,
      "nishanthelango": 5
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/ListTasksCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " * Command to list tasks in tasklist."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class ListTasksCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ui.showTaskList(store.getTaskList());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 8,
      "mohideenik": 3,
      "nishanthelango": 5
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muserr"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": " * Redo feature."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private int redoCounter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static final String REDO_USAGE_ERROR_MESSAGE \u003d \"Usage: redo [number]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static final String NEGATIVE_NUMBER_ERROR_MESSAGE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": "            \u003d \"[number] must be a positive integer, i.e. 1, 2, 3, ...\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static final String INVALID_NUMBER_ERROR_MESSAGE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muserr"
        },
        "content": "            \u003d \"You have entered an invalid value.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Checks if redo command contains additional parameters."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param words additional parameters for redo"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @throws DuchessException if invalid command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public RedoCommand(List\u003cString\u003e words) throws DuchessException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "        this.logger \u003d Logger.getLogger(\"Duchess\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (words.size() !\u003d 1 \u0026\u0026 words.size() !\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(REDO_USAGE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (words.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muserr"
        },
        "content": "                redoCounter \u003d Integer.parseInt(words.get(0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muserr"
        },
        "content": "                if (redoCounter \u003c\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muserr"
        },
        "content": "                    throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muserr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muserr"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muserr"
        },
        "content": "                throw new DuchessException(INVALID_NUMBER_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muserr"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muserr"
        },
        "content": "                throw new DuchessException(NEGATIVE_NUMBER_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muserr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (words.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muserr"
        },
        "content": "            redoCounter \u003d 1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Restores previous undo command user executes."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param store store object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param ui user interaction object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param storage storage object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @throws DuchessException if redo is unsuccessful"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muserr"
        },
        "content": "        logger.log(Level.INFO, \"Redo is executed.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (storage.getRedoStack().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muserr"
        },
        "content": "            redoCounter \u003d 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (storage.getRedoStack().size() \u003e 0 \u0026\u0026 redoCounter \u003e 1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muserr"
        },
        "content": "            int tempCounter \u003d redoCounter;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muserr"
        },
        "content": "            while (tempCounter \u003e 0 \u0026\u0026 storage.getRedoStack().size() \u003e 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muserr"
        },
        "content": "                setToNextStore(store, storage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muserr"
        },
        "content": "                tempCounter--;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muserr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (storage.getRedoStack().size() \u003e 0 \u0026\u0026 redoCounter \u003d\u003d 1) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muserr"
        },
        "content": "            setToNextStore(store, storage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muserr"
        },
        "content": "        ui.showRedo(redoCounter);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Updates data to previous Store values as obtained from stack."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param store store object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param storage storage object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @throws DuchessException if updating store is unsuccessful"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private void setToNextStore(Store store, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Store prevStore \u003d storage.getFirstSnapshot();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muserr"
        },
        "content": "        storage.save(prevStore);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Store newStore \u003d storage.load();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muserr"
        },
        "content": "        store.setTaskList(newStore.getTaskList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muserr"
        },
        "content": "        store.setModuleList(newStore.getModuleList());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        store.setDuchessCalendar(newStore.getDuchessCalendar());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 1,
      "muserr": 92
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/ReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": " * Searches Tasklist and filters out deadline objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays Deadline objects to user in ascending order."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param store List containing tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param ui Userinterface object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param storage Storage object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException Exception thrown when duchess.storage not found"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        List\u003cTask\u003e reminderList \u003d addTimedActivities(store.getTaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Collections.sort(reminderList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "        display(reminderList, ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Returns a List of Task objects."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Adds objects of type Deadline and Event to reminderList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private List\u003cTask\u003e addTimedActivities(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return tasks.stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .map(Task::getReminder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .flatMap(Optional::stream)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muserr"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays deadlines to user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private void display(List\u003cTask\u003e reminderList, Ui ui) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (reminderList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muserr"
        },
        "content": "            ui.showNoDeadlines();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muserr"
        },
        "content": "            ui.showDeadlines(reminderList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 2,
      "mohideenik": 11,
      "nishanthelango": 3,
      "muserr": 41
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private List\u003cString\u003e words;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public SnoozeCommand(List\u003cString\u003e words) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.words \u003d words;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            int taskNo \u003d Integer.parseInt(words.get(0)) - 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            Task task \u003d store.getTaskList().get(taskNo);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            task.snooze();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            ui.showSnoozedTask(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            storage.save(store);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Please supply a number. Eg: done 2\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Please supply a valid number.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 3,
      "mohideenik": 26,
      "nishanthelango": 4
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muserr"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": " * Undo feature."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private int undoCounter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static final String UNDO_USAGE_ERROR_MESSAGE \u003d \"Usage: undo [number]\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static final String NEGATIVE_NUMBER_ERROR_MESSAGE"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": "            \u003d \"[number] must be a positive integer, i.e. 1, 2, 3, ...\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static final String INVALID_NUMBER_ERROR_MESSAGE"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muserr"
        },
        "content": "            \u003d \"You have entered an invalid value.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Checks if undo command contains additional parameters."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param words additional parameters for undo"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @throws DuchessException throws exceptions if invalid command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public UndoCommand(List\u003cString\u003e words) throws DuchessException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "        this.logger \u003d Logger.getLogger(\"Duchess\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (words.size() !\u003d 1 \u0026\u0026 words.size() !\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(UNDO_USAGE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (words.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muserr"
        },
        "content": "                undoCounter \u003d Integer.parseInt(words.get(0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muserr"
        },
        "content": "                if (undoCounter \u003c\u003d 0) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muserr"
        },
        "content": "                    throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muserr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muserr"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muserr"
        },
        "content": "                throw new DuchessException(INVALID_NUMBER_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muserr"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muserr"
        },
        "content": "                throw new DuchessException(NEGATIVE_NUMBER_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muserr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (words.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muserr"
        },
        "content": "            undoCounter \u003d 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Restores previous available state."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param store store object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param ui user interaction object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param storage storage object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @throws DuchessException if undo is unsuccessful"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muserr"
        },
        "content": "        logger.log(Level.INFO, \"Undo is executed.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (storage.getUndoStack().size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muserr"
        },
        "content": "            undoCounter \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (storage.getUndoStack().size() \u003e 1 \u0026\u0026 undoCounter \u003e 1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storage.addToRedoStack();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muserr"
        },
        "content": "            int tempCounter \u003d undoCounter;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muserr"
        },
        "content": "            while (tempCounter \u003e 0 \u0026\u0026 storage.getUndoStack().size() \u003e 1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muserr"
        },
        "content": "                setToPreviousStore(store, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muserr"
        },
        "content": "                tempCounter--;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muserr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (storage.getUndoStack().size() \u003e 1 \u0026\u0026 undoCounter \u003d\u003d 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storage.addToRedoStack();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muserr"
        },
        "content": "            setToPreviousStore(store, storage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muserr"
        },
        "content": "        ui.showUndo(undoCounter);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Updates data to previous Store values."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param store store object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param storage storage object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @throws DuchessException if updating store is unsuccessful"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private void setToPreviousStore(Store store, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muserr"
        },
        "content": "        storage.getLastSnapshot();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muserr"
        },
        "content": "        storage.save(storage.peekUndoStackAsStore());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Store newStore \u003d storage.load();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assert (store.equals(newStore));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muserr"
        },
        "content": "        store.setTaskList(newStore.getTaskList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muserr"
        },
        "content": "        store.setModuleList(newStore.getModuleList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        store.setDuchessCalendar(newStore.getDuchessCalendar());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 1,
      "muserr": 96
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/ViewScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.TimeFrame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": " * Command to display tasklist of certain timeframe in chronological order."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class ViewScheduleCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private String view;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private TimeFrame timeFrame;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Constructor for class."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param date Date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param view Either week or day"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @throws DuchessException Exception thrown for invalid or missing date time"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public ViewScheduleCommand(String date, String view) throws DuchessException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.view \u003d view;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        LocalDateTime start \u003d processDate(\" 0000\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        LocalDateTime end \u003d processDate(\" 2359\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.timeFrame \u003d new TimeFrame(start, end);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Process date by setting time of LocalDateTime to either 0000 or 2359."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Also sets LocalDateTime to nearest previous or same Monday date/ nearest"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * next or same Friday date if user desires week view."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param time either \" 0000\" or \" 2359\" to indicate timeframe"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return LocalDateTime"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @throws DuchessException Thrown for invalid or missing date time and command format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime processDate(String time) throws DuchessException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            boolean isWeek \u003d view.equals(\"week\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            boolean isStartOfDay \u003d time.equals(\" 0000\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            boolean isStartOfWeek \u003d isWeek \u0026\u0026 isStartOfDay;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            boolean isEndOfWeek \u003d isWeek \u0026\u0026 !isStartOfDay;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            LocalDateTime localDateTime \u003d Util.parseDateTime(date + time);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            if (isStartOfWeek) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                localDateTime \u003d localDateTime.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            } else if (isEndOfWeek) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                localDateTime \u003d localDateTime.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return localDateTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Invalid date format. Please follow dd/MM/yyyy.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Format for viewing schedule: schedule /for \u003cdate\u003e view \u003cview\u003e\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        List\u003cTask\u003e tasksForToday \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                store.getTaskList().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        .filter(task -\u003e task.getTimeFrame().fallsWithin(this.timeFrame))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (tasksForToday.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"There are no tasks in the schedule.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else if (view.equals(\"week\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            date \u003d \"the week of \" + date;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        Collections.sort(tasksForToday);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        ui.showScheduleResult(tasksForToday, date);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 61,
      "mohideenik": 12,
      "nishanthelango": 13
    }
  },
  {
    "path": "src/main/java/duchess/model/DuchessHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muserr"
        },
        "content": "package duchess.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class DuchessHistory {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static List\u003cString\u003e duchessLog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static List\u003cCommand\u003e validDuchessLog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public DuchessHistory() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": "        duchessLog \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": "        validDuchessLog \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void add(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": "        duchessLog.add(input);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public static void addValidCommands(Command command) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": "        validDuchessLog.add(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public static List\u003cString\u003e getFullLog() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": "        return duchessLog;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public static List\u003cCommand\u003e getValidCommandLog() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "        return validDuchessLog;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muserr": 33
    }
  },
  {
    "path": "src/main/java/duchess/model/Grade.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSetter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " * Represents a grade in a module."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "public class Grade {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String assessment;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private double marks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private double maxMarks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private double weightage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private boolean isComplete;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private double modulePercentage; // marks obtained converted to percentage of the module"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Creates a Grade object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param assessment description of assessment"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param marks marks obtained"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param maxMarks maximum marks obtainable"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param weightage weightage of assessment out of 100"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param isComplete true if the assessment is complete, false otherwise"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public Grade(@JsonProperty(\"task\") String assessment, @JsonProperty(\"marks\") double marks,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                 @JsonProperty(\"maxMarks\") double maxMarks, @JsonProperty(\"weightage\") double weightage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                 @JsonProperty(\"isComplete\") boolean isComplete) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.assessment \u003d assessment;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.marks \u003d marks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.maxMarks \u003d maxMarks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.weightage \u003d weightage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.isComplete \u003d isComplete;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private void calculateModulePercentage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        modulePercentage \u003d marks / maxMarks * weightage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Creates a grade object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param assessment description of assessment"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param weightage weightage of assessment out of 100"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public Grade(String assessment, double weightage) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.assessment \u003d assessment;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.weightage \u003d weightage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.isComplete \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Creates a grade object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param assessment description of assessment"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param marks marks obtained"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param maxMarks maximum marks obtainable"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param weightage weightage of assessment out of 100"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public Grade(String assessment, double marks, double maxMarks, double weightage) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this(assessment, weightage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.marks \u003d marks;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.maxMarks \u003d maxMarks;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.isComplete \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        calculateModulePercentage();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonGetter"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public String getTask() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return assessment;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonSetter"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void setTask(String assessment) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.assessment \u003d assessment;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonGetter"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public double getMarks() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return marks;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonSetter"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void setMarks(double marks) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.marks \u003d marks;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonGetter"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public double getMaxMarks() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return maxMarks;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonSetter"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void setMaxMarks(double maxMarks) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.maxMarks \u003d maxMarks;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonGetter"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public double getWeightage() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return weightage;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonSetter"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void setWeightage(double weightage) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.weightage \u003d weightage;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonGetter"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public boolean getIsComplete() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return isComplete;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonSetter"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void setIsComplete(boolean isComplete) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.isComplete \u003d isComplete;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonGetter"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public double getModulePercentage() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return modulePercentage;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonSetter"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void setModulePercentage(double modulePercentage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.modulePercentage \u003d modulePercentage;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Marks a grade as complete."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Sets the marks and maxMarks to complete the grade."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param marks    marks obtained"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param maxMarks maximum marks obtainable"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void markAsComplete(double marks, double maxMarks) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.isComplete \u003d true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.marks \u003d marks;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.maxMarks \u003d maxMarks;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        calculateModulePercentage();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (isComplete) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return String.format(\"%s %.1f/%.1f %.1f%%\", assessment, marks, maxMarks, weightage);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return String.format(\"%s %.1f%%\", assessment, weightage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nishanthelango": 153
    }
  },
  {
    "path": "src/main/java/duchess/model/Module.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSetter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * Represents an academic module taken by students."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private String code;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private List\u003cGrade\u003e grades;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private double weightageCompleted; // total weightage of completed grades"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private double weightageObtained; // weightage obtained from completed grades"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private double weightageTotal; // total weightage for all the grades"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Creates a new Module."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param code the code of the module"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param name the mame of the module"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Module(@JsonProperty(\"code\") String code, @JsonProperty(\"name\") String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        grades \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Returns a string to represent the Module."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @return string to represent module"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (weightageCompleted \u003d\u003d 0) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return String.format(\"%s %s\", code, name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return String.format(\"%s %s %.1f/%.1f%%\", code, name, weightageObtained, weightageCompleted);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns true if the module has the same code as the supplied code."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param code the code to check against the module code"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return true if there is a match"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public boolean isOfCode(String code) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.code.equalsIgnoreCase(code);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns true if two modules share the same code."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param other the other module to compare"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the equality status"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Module that \u003d (Module) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.code.equalsIgnoreCase(that.code);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Deletes the specified grade object from the module."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param gradeNo the index of the grade to delete"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void deleteGrade(int gradeNo) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.grades.remove(gradeNo);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"name\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"code\")"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonSetter(\"grades\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void setGrades(List\u003cGrade\u003e grades) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.grades \u003d grades;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonGetter(\"grades\")"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public List\u003cGrade\u003e getGrades() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return grades;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonSetter(\"weightageCompleted\")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void setWeightageCompleted(double weightageCompleted) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.weightageCompleted \u003d weightageCompleted;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonGetter(\"weightageCompleted\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public double getWeightageCompleted() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return weightageCompleted;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonSetter(\"weightageObtained\")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void setWeightageObtained(double weightageObtained) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.weightageObtained \u003d weightageObtained;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonGetter(\"weightageObtained\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public double getWeightageObtained() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return weightageObtained;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonSetter(\"weightageTotal\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void setWeightageTotal(double weightageTotal) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.weightageTotal \u003d weightageTotal;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonGetter(\"weightageTotal\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public double getWeightageTotal() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return weightageTotal;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Adds a given grade object to the module."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param grade the grade to add"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void addGrade(Grade grade) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (grade.getIsComplete()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            updateCompleteGradeWeightage(grade.getModulePercentage(), grade.getWeightage());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            updateIncompleteGradeWeightage(grade.getWeightage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.grades.add(grade);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Updates the completed and obtained weightages."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Called when a grade is marked as complete"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param grade grade marked as complete"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void updateGrade(Grade grade) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.weightageCompleted +\u003d grade.getWeightage();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.weightageObtained +\u003d grade.getModulePercentage();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Updates the weightages related to completed grades."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Called when a completed grade is added to the list of grades."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param obtainedPercentage marks obtained in the newly added grade as a percentage of the module"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param gradeWeightage the weightage of the grade"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private void updateCompleteGradeWeightage(double obtainedPercentage, double gradeWeightage) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.weightageCompleted +\u003d gradeWeightage;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.weightageTotal +\u003d gradeWeightage;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.weightageObtained +\u003d obtainedPercentage;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Updates the total weightage."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Called when an incomplete grade is added to the list of grades."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param gradeWeightage the weightage of the grade"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private void updateIncompleteGradeWeightage(double gradeWeightage) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.weightageTotal +\u003d gradeWeightage;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 61,
      "nishanthelango": 117
    }
  },
  {
    "path": "src/main/java/duchess/model/TimeFrame.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * Represents an interval in time."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * This module is used to compare times and possible clashes of tasks such as"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * events, deadlines and todos."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class TimeFrame implements Comparable\u003cTimeFrame\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Start and end points of the timeframe."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Marks timeframe as indefinite, i.e. things that"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * don\u0027t have a definite start or end time."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private boolean isIndefinite;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Marks time frame as instantaneous."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private boolean isInstantaneous;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Creates a TimeFrame that represents an interval in time."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param start Starting time"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param end   Ending time"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public TimeFrame(LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.isIndefinite \u003d false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.isInstantaneous \u003d false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private TimeFrame(LocalDateTime time) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.start \u003d time;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.end \u003d time;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.isIndefinite \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.isInstantaneous \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private TimeFrame() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.isIndefinite \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.isInstantaneous \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Creates and returns a TimeFrame that represents a point in time."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param time the point in time"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the TimeFrame"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public static TimeFrame ofInstantaneousTask(LocalDateTime time) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return new TimeFrame(time);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Creates and returns a TimeFrame that does not fall in any point in time."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the TimeFrame"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static TimeFrame ofTimelessTask() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return new TimeFrame();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns true if this TimeFrame lies within the other TimeFrame."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param that the other TimeFrame"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return true if falls within"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public boolean fallsWithin(TimeFrame that) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (this.isIndefinite || that.isIndefinite) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return !(this.end.isBefore(that.start) || that.end.isBefore(this.start));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns true if this TimeFrame clashes with the other TimeFrame."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param that the other TimeFrame"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return true if there is clash"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public boolean clashesWith(TimeFrame that) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (this.isInstantaneous || that.isInstantaneous) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.fallsWithin(that);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns the start time of the TimeFrame, if present."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the start time if present, null otherwise"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Checks if TimeFrame belongs to task of type event."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return true if task is an event"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public boolean hasDuration() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return !isIndefinite \u0026\u0026 !isInstantaneous;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Comparator to compare TimeFrame that orders TimeFrame objects in chronological order."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * If the TimeFrame is indefinite (no associated time), it is ordered first."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param that the other TimeFrame to compare"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return an integer value indicating order (follows Java\u0027s conventions)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public int compareTo(TimeFrame that) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (this.isIndefinite \u0026\u0026 that.isIndefinite) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else if (this.isIndefinite) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else if (that.isIndefinite) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else if (!this.start.equals(that.start)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return this.start.compareTo(that.start);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return this.end.compareTo(that.end);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 40,
      "mohideenik": 97,
      "nishanthelango": 7
    }
  },
  {
    "path": "src/main/java/duchess/model/calendar/CalendarEntry.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSetter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import com.fasterxml.jackson.databind.annotation.JsonDeserialize;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import com.fasterxml.jackson.databind.annotation.JsonSerialize;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import com.fasterxml.jackson.datatype.jsr310.deser.LocalDateDeserializer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import com.fasterxml.jackson.datatype.jsr310.ser.LocalDateSerializer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class CalendarEntry {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private List\u003cTask\u003e dateTasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public CalendarEntry(@JsonProperty(\"date\") LocalDate date, @JsonProperty(\"dateTasks\") List\u003cTask\u003e dateTasks) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.dateTasks \u003d dateTasks;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public boolean isRequestedEntry(LocalDate enquiry) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return this.date.equals(enquiry);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @JsonSetter(\"date\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @JsonSerialize(using \u003d LocalDateSerializer.class)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @JsonGetter(\"date\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @JsonDeserialize(using \u003d LocalDateDeserializer.class)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void setDate(LocalDate date) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @JsonSetter(\"dateTasks\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void setDateTasks(List\u003cTask\u003e dateTasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.dateTasks \u003d dateTasks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @JsonGetter(\"dateTasks\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public List\u003cTask\u003e getDateTasks() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return this.dateTasks;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 52
    }
  },
  {
    "path": "src/main/java/duchess/model/calendar/CalendarManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class CalendarManager {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Acts as a ArrayList.remove() method. Removes a calendar entry from the duchess calendar."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param ceList duchess calendar"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param key    date of calendar entry"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return edited duchess calendar"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static List\u003cCalendarEntry\u003e removeEntryFromList(List\u003cCalendarEntry\u003e ceList, LocalDate key) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return ceList.stream().filter(ce -\u003e !ce.getDate().equals(key)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Deletes a task from the task list of a calendar entry stored in the calendar."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param currCalendar current duchess calendar"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param task         event"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param key          starting date of event"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static List\u003cCalendarEntry\u003e deleteEntry(List\u003cCalendarEntry\u003e currCalendar, Task task, LocalDate key) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        CalendarEntry toModify \u003d currCalendar"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .filter(ce -\u003e ce.getDate().equals(key))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .findAny()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .orElse(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        assert (toModify !\u003d null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        List\u003cTask\u003e newList \u003d toModify.getDateTasks()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .filter(t -\u003e !t.getTimeFrame().fallsWithin(task.getTimeFrame()))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        List\u003cCalendarEntry\u003e update \u003d removeEntryFromList(currCalendar, key);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        update.add(new CalendarEntry(key, newList));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return update;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Adds a task to the task list of a calendar entry stored in the duchess calendar."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param currCalendar current duchess calendar"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param task         event"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param date         starting date of event"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static void addEntry(List\u003cCalendarEntry\u003e currCalendar, Task task, LocalDate date) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        Optional\u003cCalendarEntry\u003e oldEntry \u003d currCalendar"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .filter(entry -\u003e entry.isRequestedEntry(date))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        List\u003cTask\u003e newList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (oldEntry.isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            CalendarEntry ce \u003d oldEntry.get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            newList \u003d ce.getDateTasks();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            currCalendar \u003d removeEntryFromList(currCalendar, date);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        newList.add(task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        currCalendar.add(new CalendarEntry(date, newList));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "limsiying": 71
    }
  },
  {
    "path": "src/main/java/duchess/model/calendar/CalendarUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class CalendarUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static final LocalDate SEM_ONE_START;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static final LocalDate SEM_ONE_END;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static final LocalDate SEM_TWO_START;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static final LocalDate SEM_TWO_END;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static final String SEMESTER_ONE \u003d \"Semester 1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static final String SEMESTER_TWO \u003d \"Semester 2\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate separator \u003d adjustDate(today, 0, Month.AUGUST);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (today.compareTo(separator) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            SEM_ONE_START \u003d separator;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            SEM_TWO_START \u003d adjustDate(today, 1, Month.JANUARY);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            SEM_ONE_START \u003d adjustDate(today, -1, Month.AUGUST);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            SEM_TWO_START \u003d adjustDate(today, 0, Month.JANUARY);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        SEM_ONE_END \u003d SEM_ONE_START.with(TemporalAdjusters.next(DayOfWeek.SUNDAY)).plusWeeks(16);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        SEM_TWO_END \u003d SEM_TWO_START.with(TemporalAdjusters.next(DayOfWeek.SUNDAY)).plusWeeks(16);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Adjusts the various input dates accordingly to input requirements."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param date  date to be adjusted"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param years num of years to take away or add to date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param month month the date should be adjusted to"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return adjusted date"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static LocalDate adjustDate(LocalDate date, long years, Month month) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return date.plusYears(years).with(month).with(TemporalAdjusters.dayOfWeekInMonth(2, DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Process the period in the academic year at which the input date falls in."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param date input"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return -1 if date occurs outside of the current formal academic year, 1 and 2 for semester 1 and 2 respectively"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static int processDate(LocalDate date) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (date.compareTo(SEM_ONE_START) \u003e\u003d 0 \u0026\u0026 date.compareTo(SEM_ONE_END) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else if (date.compareTo(SEM_TWO_START) \u003e\u003d 0 \u0026\u0026 date.compareTo(SEM_TWO_END) \u003c\u003d 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return 2;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Processes the current academic year."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return the current academic year"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static String processYear() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return \"AY\" + SEM_ONE_START.getYear() + \"/\" + SEM_ONE_START.plusYears(1).getYear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Processes the semester a given date falls in."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param date input"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return either Semester 1 or Semester 2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static String processSemester(LocalDate date) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        int period \u003d processDate(date);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (period \u003d\u003d 1) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return SEMESTER_ONE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return SEMESTER_TWO;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Processes the week information of a given date."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param date input"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return indicates the number of week, or whether the date falls on a special week"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static String processWeek(LocalDate date) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        int currWeek \u003d getWeekAsInt(date);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (currWeek \u003d\u003d 7) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return \"Recess Week\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else if (currWeek \u003e\u003d 8 \u0026\u0026 currWeek \u003c\u003d 14) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return \"W\" + (currWeek - 1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else if (currWeek \u003d\u003d 15) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return \"Reading Week\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else if (currWeek \u003d\u003d 16 || currWeek \u003d\u003d 17) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return \"Examinations\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return \"W\" + currWeek;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Returns the academic year, semester and week of a given date."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param date input"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return academic context"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static String toString(LocalDate date) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return processYear() + \", \" + processSemester(date) + \", \" + processWeek(date);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Processes the semester a given date falls in."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param date input"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return returns the starting date of the input date\u0027s semester"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static LocalDate nearestSemStart(LocalDate date) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        String semester \u003d processSemester(date);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (semester.equals(SEMESTER_ONE)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return SEM_ONE_START;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            assert (semester.equals(SEMESTER_TWO));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return SEM_TWO_START;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Processes the num of weeks into the semester of a given date."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param date input"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return num of weeks into the semester as of the input date"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static int getWeekAsInt(LocalDate date) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate comparison \u003d nearestSemStart(date);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        final double week \u003d 7.0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        long daysBetween \u003d ChronoUnit.DAYS.between(comparison, date) + 1;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return (int) Math.ceil(daysBetween / week);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 142
    }
  },
  {
    "path": "src/main/java/duchess/model/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSetter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.TimeFrame;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public Deadline(String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public Deadline(@JsonProperty(\"deadline\") String deadline) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(deadline);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void snooze() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        deadline \u003d deadline.plusWeeks(1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Optional\u003cTask\u003e getReminder() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return Optional.of(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public TimeFrame getTimeFrame() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return TimeFrame.ofInstantaneousTask(this.deadline);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                \"[D]%s %s (by: %s)\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                super.toString(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                this.description,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                Util.formatDateTime(this.deadline)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public boolean isCalendarEntry() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return TimeFrame.ofInstantaneousTask(this.deadline).hasDuration();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonSetter(\"deadline\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void setDeadline(String deadline) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(deadline);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"deadline\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return deadline.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 9,
      "mohideenik": 37,
      "nishanthelango": 9,
      "muserr": 10
    }
  },
  {
    "path": "src/main/java/duchess/model/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.TimeFrame;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Creates an event task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param description description of event task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param end end time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param start start time"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @throws DuchessException if end time is before start time"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public Event(String description, LocalDateTime end, LocalDateTime start) throws DuchessException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (end.isBefore(start)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Start datetime cannot be after end datetime.\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public TimeFrame getTimeFrame() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return new TimeFrame(start, end);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void snooze() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        start \u003d start.plusWeeks(1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        end \u003d end.plusWeeks(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Optional\u003cTask\u003e getReminder() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return Optional.of(this);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Constructor for Jackson."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param start start time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param end   end time"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Event("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            @JsonProperty(\"start\") String start,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            @JsonProperty(\"end\") String end"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.start \u003d LocalDateTime.parse(start);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.end \u003d LocalDateTime.parse(end);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return String.format(\"[E]%s %s (at: %s to %s)\", super.toString(), this.description,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                Util.formatDateTime(this.start), Util.formatDateTime(this.end));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonGetter(\"description\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"end\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public String getEnd() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return end.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"start\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public String getStart() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return start.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public boolean isCalendarEntry() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate date \u003d start.toLocalDate();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return CalendarUtil.processDate(date) \u003d\u003d 1 || CalendarUtil.processDate(date) \u003d\u003d 2;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 12,
      "mohideenik": 42,
      "nishanthelango": 36,
      "muserr": 3
    }
  },
  {
    "path": "src/main/java/duchess/model/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.model.Grade;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.TimeFrame;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public abstract class Task implements Comparable\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Optional\u003cModule\u003e module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private Optional\u003cGrade\u003e grade;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Creates a Task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.module \u003d Optional.empty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.grade \u003d Optional.empty();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public boolean clashesWith(Task that) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.getTimeFrame().clashesWith(that.getTimeFrame());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Optional\u003cModule\u003e getModule() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.module;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public Optional\u003cGrade\u003e getGrade() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return this.grade;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                \"[\" + (this.isDone ? \"/\" : \"X\") + \"]\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        + module.map(m -\u003e \"[\" + m.getCode() + \"]\").orElse(\"\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public int compareTo(Task that) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.getTimeFrame().compareTo(that.getTimeFrame());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonSetter(\"description\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonSetter(\"module\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void setModule(Module module) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.module \u003d Optional.ofNullable(module);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"module\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Module getRawtModule() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.module.orElse(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"done\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"description\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonSetter(\"done\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonSetter(\"grade\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void setGrade(Grade grade) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.grade \u003d Optional.ofNullable(grade);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonGetter(\"grade\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public Grade getRawtGrade() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return this.grade.orElse(null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public abstract boolean isCalendarEntry();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public abstract TimeFrame getTimeFrame();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public abstract void snooze() throws DuchessException;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public abstract Optional\u003cTask\u003e getReminder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 8,
      "mohideenik": 68,
      "nishanthelango": 23
    }
  },
  {
    "path": "src/main/java/duchess/model/task/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.TimeFrame;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return String.format(\"[T]%s %s\", super.toString(), this.description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public boolean isCalendarEntry() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return TimeFrame.ofTimelessTask().hasDuration();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public TimeFrame getTimeFrame() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return TimeFrame.ofTimelessTask();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void snooze() throws DuchessException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        throw new DuchessException(\"You can\u0027t snooze that task.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Optional\u003cTask\u003e getReminder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Todo() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 11,
      "mohideenik": 24,
      "nishanthelango": 5,
      "muserr": 3
    }
  },
  {
    "path": "src/main/java/duchess/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.DefaultState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Used for list command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static final String TASKS_KEYWORD \u003d \"tasks\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static final String MODULES_KEYWORD \u003d \"modules\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public static final String GRADES_KEYWORD \u003d \"grades\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static final String TASK_KEYWORD \u003d \"task\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static final String MODULE_KEYWORD \u003d \"module\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public static final String LESSON_KEYWORD \u003d \"lesson\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public static final String GRADE_KEYWORD \u003d \"grade\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static final String DISPLAY_KEYWORD \u003d \"display\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static final String EXPORT_KEYWORD \u003d \"export\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static final String WEEK_KEYWORD \u003d \"week\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static final String DAY_KEYWORD \u003d \"day\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public static final String MARKS_KEYWORD \u003d \"marks\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Usage for commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static final String LIST_USAGE \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            \"Usage: list (tasks | modules | grades /module \u003cmodule_code\u003e)\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public static final String LESSON_USAGE \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muserr"
        },
        "content": "            \"Usage: lesson /code \u003cmodule_code\u003e /type \u003clesson_type\u003e \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muserr"
        },
        "content": "                    + \"\\n    /time \u003cstart_date\u003e \u003cstart_time\u003e /to \u003cend_date\u003e \u003cend_time\u003e\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static final String DELETE_USAGE \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muserr"
        },
        "content": "            \"Usage: delete (task | module | grade /module \u003cmodule_code\u003e) /no \u003cnumber\u003e\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muserr"
        },
        "content": "                    + \"\\n    Usage: delete (lesson) /type \u003clesson_type\u003e /code \u003cmodule_code\u003e\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static final String CALENDAR_USAGE \u003d \"calendar (display | export) /date \u003cdate\u003e /view (day | week)\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static final String CALENDAR_DATE_USAGE \u003d \"Please input a date in the current formal academic year.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static final String CALENDAR_VIEW_USAGE \u003d \"Please input either the day or week view.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public static final String DONE_USAGE \u003d \"Usage: done (task | grade /module \u003cmodule_code\u003e \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            + \"\\n    /marks \u003cmarks\u003e) /no \u003cnumber\u003e\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Prompts."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static final String ADD_TYPE_PROMPT \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            \"What do you want to add? (module | deadline | todo | event | grade)\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static final String MODULE_NAME_PROMPT \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \"What\u0027s the name of the module? (e.g. Discrete Mathematics)\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static final String MODULE_CODE_PROMPT \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \"What\u0027s the module code for %s? (e.g. CS1231)\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static final String EVENT_DESCRIPTION_PROMPT \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \"What\u0027s the name of the event?\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static final String EVENT_START_PROMPT \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \"When does %s start? (dd/mm/yyyy hhmm)\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static final String EVENT_END_PROMPT \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \"When does %s end? (dd/mm/yyyy hhmm)\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static final String TASK_MODULE_PROMPT \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \"What module is %s for? (enter \u0027nil\u0027 to skip)\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public static final String GRADE_MODULE_PROMPT \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            \"What module is %s for? (e.g CS1231)\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public static final String GRADE_MARKS_PROMPT \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            \"What\u0027s your score for %s? (e.g. 20/30)\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public static final String GRADE_DESCRIPTION_PROMPT \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            \"What\u0027s the name of the assessment? (e.g midterm)\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public static final String GRADE_WEIGHTAGE_PROMPT \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            \"What\u0027s the weightage of %s?\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static final String DEADLINE_DESCRIPTION_PROMPT \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \"What\u0027s the name of the deadline?\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static final String DEADLINE_DEADLINE_PROMPT \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \"When is %s due?\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static final String TODO_DESCRIPTION_PROMPT \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \"What\u0027s the to-do about?\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public static final String TASK_WEIGHTAGE_PROMPT \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            \"If this is an assessment, what\u0027s its weightage? (enter \u0027nil\u0027 to skip)\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public static final String TASK_INVALID_WEIGHTAGE \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            \"Please enter a weightage between 0 to 100. (enter \u0027nil\u0027 to skip)\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Error messages."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static final String PARSING_ERROR_MESSAGE \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \"An unexpected error occurred while processing your command.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private ParserState parserState;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Initializes the duchess parser with a logger."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Parser(Logger logger) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parserState \u003d new DefaultState(this);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.logger \u003d logger;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Initializes the duchess parser with a default logger."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parserState \u003d new DefaultState(this);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.logger \u003d Logger.getLogger(\"Duchess\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns the command to execute in response to the user input."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param input the raw user input"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the command to execute"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException if the user input is invalid"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command parse(String input) throws DuchessException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        logger.log(Level.INFO, \"Parsing \" + input);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (input.equals(\"exit\") || input.equals(\"bye\")) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            this.parserState \u003d new DefaultState(this);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.parserState.parse(input);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Continues the parsing of user input from extracted parameters."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * This function is called when there are consecutive state transitions"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * within a single parse call."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param parameters the parameterized user input"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the command to execute"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException if the user input is invalid"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command continueParsing(Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        logger.log(Level.INFO, \"Continuing parsing \" + parameters);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.parserState.continueParsing(parameters);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Sets the duchess parser state."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param newState the state to set the duchess parser to"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the parser itself"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Parser setParserState(ParserState newState) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parserState \u003d newState;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns the current parser state."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the parser state"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public ParserState getParserState() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.parserState;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 19,
      "mohideenik": 119,
      "nishanthelango": 19,
      "muserr": 7
    }
  },
  {
    "path": "src/main/java/duchess/parser/Util.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * Collection of helpful functions to parse user input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class Util {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static final String INVALID_FORMAT_MESSAGE \u003d \"Please enter the date and time as such : dd/mm/yyyy hhmm.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static final String INVALID_DATE_FORMAT_MESSAGE \u003d \"Please enter the date as such : dd/mm/yyyy.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static final String INVALID_TIME_FORMAT_MESSAGE \u003d \"Please enter the time as such : hhmm\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/uuuu HHmm\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static final String MONDAY \u003d \"MONDAY\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static final String TUESDAY \u003d \"TUESDAY\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static final String WEDNESDAY \u003d \"WEDNESDAY\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static final String THURSDAY \u003d \"THURSDAY\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static final String FRIDAY \u003d \"FRIDAY\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static final String SATURDAY \u003d \"SATURDAY\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static final String SUNDAY \u003d \"SUNDAY\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Util() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        // Note that this class is not meant to be instantiated"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        // similar to the Math class."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        //"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        // It\u0027s simply a collection of utility functions."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Obtains an instance of LocalTime from a text string using a formatter of pattern \"HHmm\"."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param time text to parse"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return the parsed local time"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static LocalTime parseTime(String time) throws DuchessException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return LocalTime.parse(time, DateTimeFormatter.ofPattern(\"HHmm\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            throw new DuchessException(INVALID_TIME_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Obtains an instance of LocalDate from a text string containing a day of week."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param day text to process"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return the next nearest date which falls on the day of week indicated by {@code day}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @throws DuchessException thrown if text input does not indicate a day of week"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static LocalDate processDayOfWeek(String day) throws DuchessException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        String capitalDay \u003d day.toUpperCase();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        switch (capitalDay) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        case MONDAY:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return LocalDate.now().with(TemporalAdjusters.next(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        case TUESDAY:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return LocalDate.now().with(TemporalAdjusters.next(DayOfWeek.TUESDAY));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        case WEDNESDAY:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return LocalDate.now().with(TemporalAdjusters.next(DayOfWeek.WEDNESDAY));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        case THURSDAY:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return LocalDate.now().with(TemporalAdjusters.next(DayOfWeek.THURSDAY));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        case FRIDAY:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return LocalDate.now().with(TemporalAdjusters.next(DayOfWeek.FRIDAY));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        case SATURDAY:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return LocalDate.now().with(TemporalAdjusters.next(DayOfWeek.SATURDAY));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        case SUNDAY:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return LocalDate.now().with(TemporalAdjusters.next(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            throw new DuchessException(INVALID_DATE_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Obtains an instance of LocalDate from a text string using a formatter of pattern \"dd/MM/yyyy\"."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param date date to parse"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return the parsed local date"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @throws DuchessException thrown if text input is not in ISO format, or does not indicate a day of week"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static LocalDate parseDate(String date) throws DuchessException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return LocalDate.parse(date, DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return processDayOfWeek(date);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Obtains an instance of LocalDateTime from a text input."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Text input is parsed to given LocalDate and LocalTime."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * LocalDate and LocalTime is then used to form LocalDateTime."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param dateTime dateTime to parse"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return the parsed local date time"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @throws DuchessException thrown if invalid"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTime) throws DuchessException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            String[] arr \u003d dateTime.split(\" \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            if (arr.length \u003e 2) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                throw new DuchessException(INVALID_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return LocalDateTime.of(parseDate(arr[0]), parseTime(arr[1]));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            throw new DuchessException(INVALID_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Parses a date and returns a {@code List\u003cLocalDate\u003e} object."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param date a date input"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return the nearest or same monday date and nearest or same sunday date"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static List\u003cLocalDate\u003e parseToWeekDates(LocalDate date) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate startOfWeek \u003d date.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate endOfWeek \u003d date.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return Arrays.asList(startOfWeek, endOfWeek);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns a {@code String} from a {@code LocalDateTime} object with the desired formatting."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param dateTime the object to format"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the formatted string"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static String formatDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return formatter.format(dateTime);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns a map mapping the parameter to its corresponding values from user input."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param input the raw input from the user"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the mapping of parameter to values"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static TreeMap\u003cString, String\u003e parameterize(String input) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        TreeMap\u003cString, String\u003e mappedTokens \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        String currentParameter \u003d \"general\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        List\u003cString\u003e collectedTokens \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        for (String token : List.of(input.split(\"\\\\s+\"))) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            if (!mappedTokens.containsKey(\"command\")) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                mappedTokens.put(\"command\", token);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } else if (token.charAt(0) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                mappedTokens.put("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        currentParameter,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        String.join(\" \", collectedTokens)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                );"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                currentParameter \u003d token.substring(1);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                collectedTokens \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                collectedTokens.add(token);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        mappedTokens.put("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                currentParameter,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                String.join(\" \", collectedTokens)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        removeEmptyStrings(mappedTokens);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return mappedTokens;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private static void removeEmptyStrings(Map\u003cString, String\u003e map) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        for (String key : map.keySet()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            if (map.get(key).equals(\"\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                map.put(key, null);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static Map\u003cString, String\u003e parameterizeWithoutCommand(String input) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return parameterize(\"dummy \" + input);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 91,
      "mohideenik": 104
    }
  },
  {
    "path": "src/main/java/duchess/parser/commands/CalendarCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.parser.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.logic.commands.DisplayCalendarCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class CalendarCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * This class parses the user input to ensure the validity of the commands for calendar interaction."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param parameters user input mapped to keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return either displays calendar or exports calendar"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @throws DuchessException thrown if there are any missing or invalid parameters"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static Command parse(Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            String type \u003d parameters.get(\"general\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            String date \u003d parameters.get(\"date\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            String view \u003d parameters.get(\"view\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            boolean isValidView \u003d view.equals(Parser.WEEK_KEYWORD) || view.equals(Parser.DAY_KEYWORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            boolean isValidCommand \u003d type.equals(Parser.DISPLAY_KEYWORD) || type.equals(Parser.EXPORT_KEYWORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            LocalDate input \u003d Util.parseDate(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            int period \u003d CalendarUtil.processDate(input);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            if (period \u003d\u003d -1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                throw new DuchessException(Parser.CALENDAR_DATE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            } else if (!isValidCommand) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                throw new DuchessException(Parser.CALENDAR_USAGE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            } else if (!isValidView) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                throw new DuchessException(Parser.CALENDAR_VIEW_USAGE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            boolean isWeek \u003d view.equals(Parser.WEEK_KEYWORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            if (type.equals(Parser.DISPLAY_KEYWORD)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                return new DisplayCalendarCommand(input, isWeek);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                return ExportCommandParser.parse(input, isWeek);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            throw new DuchessException(Parser.CALENDAR_USAGE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 49
    }
  },
  {
    "path": "src/main/java/duchess/parser/commands/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.logic.commands.DeleteLessonCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.DeleteGradeCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class DeleteCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns a command to delete a module based on user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param parameters processed user input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the command to execute"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException if the user input is invalid"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static Command parse(Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            String type \u003d parameters.get(\"general\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            if (type.equals(Parser.TASK_KEYWORD)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": "                int number \u003d Integer.parseInt(parameters.get(\"no\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                return new DeleteTaskCommand(number);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } else if (type.equals(Parser.MODULE_KEYWORD)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": "                int number \u003d Integer.parseInt(parameters.get(\"no\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                return new DeleteModuleCommand(number);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "            } else if (type.equals(Parser.LESSON_KEYWORD)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muserr"
        },
        "content": "                String lessonType \u003d parameters.get(\"type\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muserr"
        },
        "content": "                String moduleCode \u003d parameters.get(\"code\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": "                return new DeleteLessonCommand(lessonType, moduleCode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            } else if (type.equals(Parser.GRADE_KEYWORD)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muserr"
        },
        "content": "                int number \u003d Integer.parseInt(parameters.get(\"no\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                String moduleCode \u003d parameters.get(Parser.MODULE_KEYWORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                return new DeleteGradeCommand(moduleCode, number);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (IndexOutOfBoundsException | IllegalArgumentException | NullPointerException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            throw new DuchessException(Parser.DELETE_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 33,
      "nishanthelango": 7,
      "muserr": 10
    }
  },
  {
    "path": "src/main/java/duchess/parser/commands/DoneCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.parser.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.DoneGradeCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.DoneTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "public class DoneCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Returns a command to delete a module based on user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param parameters processed user input"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @return the command to execute"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @throws DuchessException if the user input is invalid"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public static Command parse(Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            String type \u003d parameters.get(\"general\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            if (type.equals(Parser.TASK_KEYWORD)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                int number \u003d Integer.parseInt(parameters.get(\"no\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                return new DoneTaskCommand(number);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            } else if (type.equals(Parser.GRADE_KEYWORD)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                String moduleCode \u003d parameters.get(Parser.MODULE_KEYWORD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                String marks \u003d parameters.get(Parser.MARKS_KEYWORD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                int marksObtained;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                int maxMarks;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                List\u003cString\u003e marksList \u003d Arrays.asList(marks.split(\"/\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                marksObtained \u003d Integer.parseInt(marksList.get(0));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                maxMarks \u003d Integer.parseInt(marksList.get(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                if (marksObtained \u003c 0 || maxMarks \u003c 1 || marksObtained \u003e maxMarks) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                int number \u003d Integer.parseInt(parameters.get(\"no\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                return new DoneGradeCommand(moduleCode, number, marksObtained, maxMarks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } catch (IndexOutOfBoundsException | IllegalArgumentException | NullPointerException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(Parser.DONE_USAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nishanthelango": 52
    }
  },
  {
    "path": "src/main/java/duchess/parser/commands/ExportCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.parser.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.logic.commands.ExportCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import javax.swing.JFrame;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import javax.swing.JFileChooser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import javax.swing.filechooser.FileSystemView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class ExportCommandParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Processes the file directory the user wants to save the calendar to and then calls the export command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param date   input"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param isWeek true if user desires week view"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return ExportCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @throws DuchessException thrown if user selects invalid file or terminates process"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static Command parse(LocalDate date, boolean isWeek) throws DuchessException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            JFileChooser jfc \u003d new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            jfc.updateUI();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            JFrame frame \u003d new JFrame();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            frame.setAlwaysOnTop(true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            int returnValue \u003d jfc.showDialog(frame, \"Select Folder\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            PrintStream file;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            File selectedFile;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            if (returnValue \u003d\u003d JFileChooser.APPROVE_OPTION) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                selectedFile \u003d jfc.getSelectedFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                if (!selectedFile.isDirectory()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                    selectedFile \u003d selectedFile.getParentFile();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                file \u003d new PrintStream(selectedFile + File.separator + \"duchess.txt\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                throw new DuchessException(\"Export command terminated.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return new ExportCommand(date, file, selectedFile.toString(), isWeek);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            throw new DuchessException(Parser.CALENDAR_USAGE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 50
    }
  },
  {
    "path": "src/main/java/duchess/parser/commands/LessonCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muserr"
        },
        "content": "package duchess.parser.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.logic.commands.AddLessonCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class LessonCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Returns a command to add lessons based on user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param parameters processed user input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @return the command to execute"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @throws DuchessException if the user input is invalid"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public static Command parse(Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muserr"
        },
        "content": "            String description \u003d parameters.get(\"type\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": "            String moduleCode \u003d parameters.get(\"code\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": "            String timeFirst \u003d parameters.get(\"time\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": "            String timeSecond \u003d parameters.get(\"to\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": "            if (timeFirst \u003d\u003d null || timeSecond \u003d\u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": "                    || description \u003d\u003d null || moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "                throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muserr"
        },
        "content": "            LocalDateTime startTimeString \u003d Util.parseDateTime(timeFirst);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muserr"
        },
        "content": "            LocalDateTime endTimeString \u003d Util.parseDateTime(timeSecond);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muserr"
        },
        "content": "            return new AddLessonCommand(description, startTimeString, endTimeString, moduleCode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(Parser.LESSON_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muserr": 41
    }
  },
  {
    "path": "src/main/java/duchess/parser/commands/ListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.ListGradesCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.ListModulesCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.ListTasksCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class ListCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns a command to list user\u0027s resources."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param parameters the processed user input"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the command to execute"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException if the input is invalid"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static Command parse(Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return Optional"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .ofNullable(parameters.get(\"general\"))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .map(keyword -\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    if (keyword.equalsIgnoreCase(Parser.TASKS_KEYWORD)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        return new ListTasksCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    } else if (keyword.equalsIgnoreCase(Parser.MODULES_KEYWORD)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        return new ListModulesCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    } else if (keyword.equalsIgnoreCase(Parser.GRADES_KEYWORD)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        String moduleCode \u003d parameters.get(Parser.MODULE_KEYWORD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                            return null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        return new ListGradesCommand(moduleCode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                }).orElseThrow(() -\u003e new DuchessException(Parser.LIST_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 1,
      "mohideenik": 32,
      "nishanthelango": 7
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/DefaultState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.ByeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.SnoozeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.ViewScheduleCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.parser.commands.CalendarCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.commands.DeleteCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.commands.DoneCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.parser.commands.LessonCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.commands.ListCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.add.AddState;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class DefaultState extends ParserState {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public DefaultState(Parser parser) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns the command to execute after parsing user input."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param input the user input"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the command to execute"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException the exception if user input is invalid"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command parse(String input) throws DuchessException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        List\u003cString\u003e words \u003d Arrays.asList(input.split(\" \"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        String keyword \u003d words.get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        List\u003cString\u003e arguments \u003d words.subList(1, words.size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Map\u003cString, String\u003e parameters \u003d Util.parameterize(input);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (\"list\".equals(keyword)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return ListCommandParser.parse(parameters);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else if (\"add\".equals(keyword)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return this.parser"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    .setParserState(new AddState(this.parser))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    .continueParsing(parameters);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else if (\"find\".equals(keyword)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new FindCommand(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else if (\"delete\".equals(keyword)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return DeleteCommandParser.parse(parameters);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else if (\"done\".equals(keyword)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return DoneCommandParser.parse(parameters);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else if (\"reminder\".equals(keyword)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new ReminderCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else if (\"snooze\".equals(keyword)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new SnoozeCommand(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else if (\"schedule\".equals(keyword)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                String view \u003d words.get(2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                boolean isInvalidView \u003d !view.equals(\"day\") \u0026\u0026 !view.equals(\"week\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                boolean isIllegalArgument \u003d isInvalidView \u0026\u0026 (words.size() \u003e 3);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                if (isIllegalArgument) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                String date \u003d words.get(1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                return new ViewScheduleCommand(date, view);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                throw new DuchessException(\"Usage: schedule \u003cdate\u003e (day | week)\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else if (\"calendar\".equals(keyword)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return CalendarCommandParser.parse(parameters);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (\"lesson\".equals(keyword)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muserr"
        },
        "content": "            return LessonCommandParser.parse(parameters);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else if (\"bye\".equals(keyword)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (\"history\".equals(keyword)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muserr"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else if (\"undo\".equals(keyword)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new UndoCommand(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else if (\"redo\".equals(keyword)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new RedoCommand(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else if (\"exit\".equals(keyword)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new DisplayCommand(\"Operation aborted.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            throw new DuchessException(\"Please enter a valid command.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command continueParsing(Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        throw new DuchessException(\"An unexpected error occurred while processing your command.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 2,
      "mohideenik": 89,
      "nishanthelango": 2,
      "muserr": 6
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/ParserState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public abstract class ParserState {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final String key;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public ParserState() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.key \u003d \"general\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public ParserState(String key) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command parse(String input) throws DuchessException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Map\u003cString, String\u003e parameters \u003d Util.parameterizeWithoutCommand(input);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return process(parameters.get(\"general\"), parameters);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command continueParsing(Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return process(parameters.get(key), parameters);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command process(String value, Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        throw new DuchessException(Parser.PARSING_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 33
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/AddState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static duchess.parser.Parser.ADD_TYPE_PROMPT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * Handles the parsing of entity type to add."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class AddState extends ParserState {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public AddState(Parser parser) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns the command to execute next if the user enters the partial command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param input user input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the command to execute next"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException if the user input is invalid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command parse(String input) throws DuchessException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Map\u003cString, String\u003e parameters \u003d Util.parameterizeWithoutCommand(input);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return processParameters(parameters);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns the command to execute next if the user enters the full command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param parameters the parameterized user input"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the command to execute next"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException if the user input is invalid"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command continueParsing(Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return processParameters(parameters);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Determine the next state and command based on user input."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param parameters the parameterized user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the command to execute next"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException if the user input is invalid"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Command processParameters(Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Optional\u003cParserState\u003e nextState \u003d Optional.ofNullable(parameters.get(\"general\"))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .map(String::toLowerCase)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .map(this::validateInclusion)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .map(type -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    if (type.charAt(0) \u003d\u003d \u0027m\u0027) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        return new ModuleNameState(parser);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    } else if (type.charAt(0) \u003d\u003d \u0027e\u0027) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        return new EventDescriptionState(parser);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    } else if (type.charAt(0) \u003d\u003d \u0027g\u0027) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        return new GradeDescriptionState(parser);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    } else if (type.charAt(0) \u003d\u003d \u0027d\u0027) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        return new DeadlineDescriptionState(parser);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    } else if (type.charAt(0) \u003d\u003d \u0027t\u0027) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        return new TodoNameState(parser);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (nextState.isPresent()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return parser.setParserState(nextState.get()).continueParsing(parameters);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new DisplayCommand(ADD_TYPE_PROMPT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private String validateInclusion(String type) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        List\u003cString\u003e validValues \u003d List.of(\"module\", \"deadline\", \"todo\", \"event\", \"grade\", \"m\", \"d\", \"t\", \"e\", \"g\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (validValues.indexOf(type) \u003c 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 87,
      "nishanthelango": 3
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/DeadlineDescriptionState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class DeadlineDescriptionState extends ParserState {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public DeadlineDescriptionState(Parser parser) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        super(\"name\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command process(String description, Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new DisplayCommand(Parser.DEADLINE_DESCRIPTION_PROMPT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser.setParserState(new DeadlineTimeState(this.parser, description));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.parser.continueParsing(parameters);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 28
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/DeadlineModuleState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.DefaultState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class DeadlineModuleState extends ParserState {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private LocalDateTime due;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Initializes a state to handle parsing of modules associated with deadlines."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param parser the main parser instance"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param description description of deadline"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param due deadline due time"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public DeadlineModuleState(Parser parser, String description, LocalDateTime due) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        super(\"module\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.due \u003d due;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command process(String module, Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (module \u003d\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            String prompt \u003d String.format(Parser.TASK_MODULE_PROMPT, description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new DisplayCommand(prompt);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (module.equalsIgnoreCase(\"nil\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            parser.setParserState(new DefaultState(parser));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new AddDeadlineCommand(description, due);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.parser.setParserState(new DeadlineWeightageState(this.parser, description, due, module));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return this.parser.continueParsing(parameters);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 45,
      "nishanthelango": 3
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/DeadlineTimeState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class DeadlineTimeState extends ParserState {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Initializes a parser state to process deadline due date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param parser the main parser instance"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param description the deadline description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public DeadlineTimeState(Parser parser, String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        super(\"by\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command process(String time, Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (time \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            String description \u003d String.format(Parser.DEADLINE_DEADLINE_PROMPT, this.description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new DisplayCommand(description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        LocalDateTime due \u003d Util.parseDateTime(time);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser.setParserState(new DeadlineModuleState(parser, description, due));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.parser.continueParsing(parameters);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 40
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/DeadlineWeightageState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.states.DefaultState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "public class DeadlineWeightageState extends ParserState {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime due;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Initializes a state to handle parsing of weightage of grades associated with deadlines."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param parser the main parser instance"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param description description of deadline"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param due deadline due time"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param moduleCode the code of the module"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public DeadlineWeightageState(Parser parser, String description, LocalDateTime due, String moduleCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        super(\"weightage\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.due \u003d due;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public Command process(String value, Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return new DisplayCommand(Parser.TASK_WEIGHTAGE_PROMPT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (value.equalsIgnoreCase(\"nil\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            parser.setParserState(new DefaultState(parser));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return new AddDeadlineCommand(description, due, moduleCode);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        int weightage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            weightage \u003d Integer.parseInt(value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            if (weightage \u003e 100 || weightage \u003c 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return new DisplayCommand(Parser.TASK_INVALID_WEIGHTAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        parser.setParserState(new DefaultState(parser));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return new AddDeadlineCommand(description, due, moduleCode, weightage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nishanthelango": 60
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/EventDescriptionState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * Handles the parsing of event descriptions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class EventDescriptionState extends ParserState {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public EventDescriptionState(Parser parser) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        super(\"name\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command process(String description, Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Optional\u003cParserState\u003e nextState \u003d Optional.ofNullable(description)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .map(desc -\u003e new EventFromState(parser, desc));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (nextState.isPresent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return parser.setParserState(nextState.get()).continueParsing(parameters);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new DisplayCommand(Parser.EVENT_DESCRIPTION_PROMPT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 35
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/EventFromState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * Handles the parsing of event start time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class EventFromState extends ParserState {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Initializes a state to parse event start time."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param parser the main parser instance"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param description the event description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public EventFromState(Parser parser, String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        super(\"from\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command process(String from, Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Optional\u003cParserState\u003e nextState \u003d Optional.ofNullable(from)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .map(date -\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        return Util.parseDateTime(date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    } catch (DuchessException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                })"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .map(date -\u003e new EventToState(parser, description, date));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (nextState.isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return parser.setParserState(nextState.get()).continueParsing(parameters);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new DisplayCommand(String.format(Parser.EVENT_START_PROMPT, description));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 50
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/EventModuleState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.DefaultState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * Handles the parsing of events associated with modules."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class EventModuleState extends ParserState {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final LocalDateTime start;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final LocalDateTime end;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Initializes a state to process module associated with an event."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param parser the main parser instance"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param description the description of the event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param start the start time of the event"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param end the end time of the event"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public EventModuleState(Parser parser, String description, LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        super(\"module\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public Command process(String module, Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (module \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new DisplayCommand(String.format(Parser.TASK_MODULE_PROMPT, description));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } else if (module.equalsIgnoreCase(\"nil\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            this.parser.setParserState(new DefaultState(parser));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new AddEventCommand(description, end, start);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            this.parser.setParserState(new EventWeightageState(this.parser, description, start, end, module));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return this.parser.continueParsing(parameters);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 46,
      "nishanthelango": 5
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/EventToState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * Handles the parsing of event end time."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class EventToState extends ParserState {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final LocalDateTime start;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Initializes a state to process ending time of events."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param parser the main parser instance"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param description the description of the event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param start the start time of the event"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public EventToState(Parser parser, String description, LocalDateTime start) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        super(\"to\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command process(String to, Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Optional\u003cParserState\u003e nextState \u003d Optional.ofNullable(to)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .map(date -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        return Util.parseDateTime(date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    } catch (DuchessException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                })"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .map(date -\u003e new EventModuleState(parser, description, start, date));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (nextState.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return parser.setParserState(nextState.get()).continueParsing(parameters);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new DisplayCommand(String.format(Parser.EVENT_END_PROMPT, description));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 54
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/EventWeightageState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.states.DefaultState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "public class EventWeightageState extends ParserState {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final LocalDateTime start;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final LocalDateTime end;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Initializes a state to process module associated with an event."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param parser the main parser instance"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param description the description of the event"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param start the start time of the event"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param end the end time of the event"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public EventWeightageState("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            Parser parser, String description, LocalDateTime start, LocalDateTime end, String moduleCode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        super(\"weightage\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public Command process(String value, Map\u003cString, String\u003e parameters) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return new DisplayCommand(Parser.TASK_WEIGHTAGE_PROMPT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (value.equalsIgnoreCase(\"nil\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            parser.setParserState(new DefaultState(parser));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return new AddEventCommand(description, end, start, moduleCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        int weightage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            weightage \u003d Integer.parseInt(value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            if (weightage \u003e 100 || weightage \u003c 0) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return new DisplayCommand(Parser.TASK_INVALID_WEIGHTAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        parser.setParserState(new DefaultState(parser));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return new AddEventCommand(description, end, start, moduleCode, weightage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nishanthelango": 62
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/GradeDescriptionState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " * Handles the parsing of grade descriptions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class GradeDescriptionState extends ParserState {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Initializes a state to parse the grade description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param parser the main parser instance"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public GradeDescriptionState(Parser parser) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        super(\"name\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command process(String description, Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Optional\u003cParserState\u003e nextState \u003d Optional.ofNullable(description)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                .map(desc -\u003e new GradeMarksState(parser, desc));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (nextState.isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return parser.setParserState(nextState.get()).continueParsing(parameters);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return new DisplayCommand(Parser.GRADE_DESCRIPTION_PROMPT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 3,
      "nishanthelango": 37
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/GradeMarksState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " * Handles the parsing of grade marks."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class GradeMarksState extends ParserState {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Initializes a state to parse the marks."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param parser the main parser instance"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param description the grade description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public GradeMarksState(Parser parser, String description) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        super(\"marks\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command process(String score, Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Optional\u003cParserState\u003e nextState \u003d Optional.ofNullable(score)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                .map(marks -\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        List\u003cString\u003e marksList \u003d Arrays.asList(marks.split(\"/\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        int marksObtained \u003d Integer.parseInt(marksList.get(0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        int maxMarks \u003d Integer.parseInt(marksList.get(1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        if (marksObtained \u003c 0 || maxMarks \u003c 1 || marksObtained \u003e maxMarks) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        return new int[]{marksObtained, maxMarks};"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    } catch (IllegalArgumentException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                })"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                .map(marks -\u003e new GradeWeightageState(parser, description, marks[0], marks[1]));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (nextState.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return parser.setParserState(nextState.get()).continueParsing(parameters);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return new DisplayCommand(String.format(Parser.GRADE_MARKS_PROMPT, description));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 3,
      "nishanthelango": 55
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/GradeModuleState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.AddGradeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.states.DefaultState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " * Handles the parsing of grades associated with modules."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class GradeModuleState extends ParserState {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final int marks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final int maxMarks;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final int weightage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Initializes a state to parse module associated with a grade."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param parser the main parser instance"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param description the grade description"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param marks the marks obtained"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param maxMarks the maximum marks obtainable"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param weightage the weightage of the grade"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public GradeModuleState(Parser parser, String description, int marks, int maxMarks, int weightage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        super(\"module\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.marks \u003d marks;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.maxMarks \u003d maxMarks;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.weightage \u003d weightage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command process(String moduleCode, Map\u003cString, String\u003e parameters) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return new DisplayCommand(String.format(Parser.GRADE_MODULE_PROMPT, description));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            this.parser.setParserState(new DefaultState(parser));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return new AddGradeCommand(marks, maxMarks, weightage, description, moduleCode);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 3,
      "nishanthelango": 48
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/GradeWeightageState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " * Handles the parsing of grade weightage."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class GradeWeightageState extends ParserState {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final int marks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final int maxMarks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Initializes a state to parse the weightage of the grade."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param parser the main parser instance"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param description the grade description"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param marks the marks obtained"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param maxMarks the maximum marks obtainable"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public GradeWeightageState(Parser parser, String description, int marks, int maxMarks) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        super(\"weightage\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.marks \u003d marks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.maxMarks \u003d maxMarks;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command process(String weightage, Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Optional\u003cParserState\u003e nextState \u003d Optional.ofNullable(weightage)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                .map(weight -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        int w \u003d Integer.parseInt(weight);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        if (w \u003e 100 || w \u003c 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        return w;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                })"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                .map(weight -\u003e new GradeModuleState(parser, description, marks, maxMarks, weight));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (nextState.isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return parser.setParserState(nextState.get()).continueParsing(parameters);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return new DisplayCommand(String.format(Parser.GRADE_WEIGHTAGE_PROMPT, description));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 3,
      "nishanthelango": 55
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/ModuleCodeState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.DefaultState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * Handles the parsing of module code."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class ModuleCodeState extends ParserState {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final String moduleName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Initializes a state to process module code."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param parser the main parser instance"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param moduleName the name of the module"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public ModuleCodeState(Parser parser, String moduleName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        super(\"code\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Processes module code input by the user."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param code the module code"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param parameters the rest of the input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the command to execute in response"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command process(String code, Map\u003cString, String\u003e parameters) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Optional\u003cCommand\u003e createCommand \u003d Optional.ofNullable(code)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .map(moduleCode -\u003e new AddModuleCommand(this.moduleName, moduleCode));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        createCommand.ifPresent(command -\u003e parser.setParserState(new DefaultState(parser)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        String prompt \u003d String.format(Parser.MODULE_CODE_PROMPT, moduleName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return createCommand.orElse(new DisplayCommand(prompt));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 48
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/ModuleNameState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * Handles the parsing of module names."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class ModuleNameState extends ParserState {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public ModuleNameState(Parser parser) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        super(\"name\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command process(String name, Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Optional\u003cParserState\u003e nextState \u003d Optional.ofNullable(name)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .map(moduleName -\u003e new ModuleCodeState(parser, moduleName));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (nextState.isPresent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return parser.setParserState(nextState.get()).continueParsing(parameters);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new DisplayCommand(Parser.MODULE_NAME_PROMPT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 35
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/TodoModuleState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.AddTodoCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.DefaultState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class TodoModuleState extends ParserState {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Initializes a state to process modules associated with to-dos."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param parser the main parser instance"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param description the to-to description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public TodoModuleState(Parser parser, String description) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        super(\"module\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command process(String value, Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            String str \u003d String.format(Parser.TASK_MODULE_PROMPT, description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new DisplayCommand(str);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (value.equalsIgnoreCase(\"nil\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            parser.setParserState(new DefaultState(parser));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new AddTodoCommand(description);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return parser.setParserState(new TodoWeightageState(parser, description, value)).continueParsing(parameters);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 41,
      "nishanthelango": 3
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/TodoNameState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class TodoNameState extends ParserState {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public TodoNameState(Parser parser) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        super(\"name\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command process(String value, Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new DisplayCommand(Parser.TODO_DESCRIPTION_PROMPT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return parser.setParserState(new TodoModuleState(parser, value)).continueParsing(parameters);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 27
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/add/TodoWeightageState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.AddTodoCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.states.DefaultState;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "public class TodoWeightageState extends ParserState {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Initializes a state to process weightage of grade associated with todo."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param parser the main parser instance"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param description the description of the task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param moduleCode the code of the associated module"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public TodoWeightageState(Parser parser, String description, String moduleCode) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        super(\"weightage\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public Command process(String value, Map\u003cString, String\u003e parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (value \u003d\u003d null) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return new DisplayCommand(Parser.TASK_WEIGHTAGE_PROMPT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (value.equalsIgnoreCase(\"nil\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            parser.setParserState(new DefaultState(parser));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return new AddTodoCommand(description, moduleCode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        int weightage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            weightage \u003d Integer.parseInt(value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            if (weightage \u003e 100 || weightage \u003c 0) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            return new DisplayCommand(Parser.TASK_INVALID_WEIGHTAGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        parser.setParserState(new DefaultState(parser));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return new AddTodoCommand(description, moduleCode, weightage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nishanthelango": 56
    }
  },
  {
    "path": "src/main/java/duchess/storage/Seed.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.model.Grade;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.task.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * Add seed data when application is first started."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class Seed {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Seeds a given store with default data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param store the store to seed"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static void execute(Store store) throws DuchessException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        // Modules"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Module a \u003d new Module(\"CS1231\", \"Discrete Mathematics\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Module b \u003d new Module(\"CS2040\", \"Algorithms\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Module c \u003d new Module(\"CS2113\", \"Software Engineering\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Module d \u003d new Module(\"CS1010\", \"Introduction to Programming\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Module e \u003d new Module(\"EE2026\", \"Digital Design\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Module f \u003d new Module(\"GES1010\", \"Nation Building\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        List.of(a, b, c, d, e, f).forEach(x -\u003e store.getModuleList().add(x));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        // Grades"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Grade gd1 \u003d new Grade(\"midterm\", 20, 30, 20);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        a.addGrade(gd1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Grade gd2 \u003d new Grade(\"problem set1\", 60, 100, 10);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        b.addGrade(gd2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Grade gd3 \u003d new Grade(\"assignment1\", 20, 20, 12);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        d.addGrade(gd3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Grade gd4 \u003d new Grade(\"lab assignment1\", 15, 20, 20);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        e.addGrade(gd4);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Grade gd5 \u003d new Grade(\"essay\", 18.5, 30, 15);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        f.addGrade(gd5);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        // Todos"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Task g \u003d new Todo(\"Reading\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        g.setModule(f);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Task h \u003d new Todo(\"Personal stuff\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Task i \u003d new Todo(\"Revision\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        i.setModule(c);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Task j \u003d new Todo(\"Community Service\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Task k \u003d new Todo(\"Consult prof on concept\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        k.setModule(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        List.of(g, h, i, j, k).forEach(x -\u003e store.getTaskList().add(x));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muserr"
        },
        "content": "        // Deadlines"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muserr"
        },
        "content": "        LocalDateTime time1 \u003d LocalDateTime.of(2019, 12, 23, 8, 00);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Task l \u003d new Deadline(\"PPP submission\", time1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        l.setModule(c);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        LocalDateTime time2 \u003d LocalDateTime.of(2019, 12, 2, 14, 00);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Task m \u003d new Deadline(\"Term Paper submission\", time2);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Grade gd6 \u003d new Grade(\"Term Paper submission\", 20);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        m.setModule(f);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        m.setGrade(gd6);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        LocalDateTime time3 \u003d LocalDateTime.of(2019, 12, 24, 23, 59);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Task n \u003d new Deadline(\"Buy Christmas gifts\", time3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        LocalDateTime time4 \u003d LocalDateTime.of(2019, 12, 13, 23, 59);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Task o \u003d new Deadline(\"Send email to friends.\", time4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muserr"
        },
        "content": "        List.of(l, m, n, o).forEach(x -\u003e store.getTaskList().add(x));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        // events"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDateTime time5 \u003d LocalDateTime.of(2019, 11, 11, 8, 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        Task p \u003d new Event(\"breakfast with mum\", time5.plusHours(1), time5);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDateTime time6 \u003d LocalDateTime.of(2019, 11, 13, 17, 0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        Task q \u003d new Event(\"dance recital\", time6.plusHours(2), time6);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDateTime time7 \u003d LocalDateTime.of(2019, 11, 12, 20, 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        Task r \u003d new Event(\"handball training\", time7.plusHours(2), time7);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDateTime time8 \u003d LocalDateTime.of(2019, 11, 14, 20, 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        Task s \u003d new Event(\"handball training\", time8.plusHours(2), time8);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDateTime time9 \u003d LocalDateTime.of(2019, 11, 16, 7, 0);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        Task t \u003d new Event(\"handball training\", time9.plusHours(2), time9);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        List.of(p, q, r, s, t).forEach(x -\u003e store.getTaskList().add(x));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        // calendar"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        List\u003cTask\u003e taskList \u003d List.of(p, q, r, s, t);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (Task task : taskList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            List\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            newList.add(task);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            LocalDate date \u003d task.getTimeFrame().getStart().toLocalDate();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            CalendarEntry ce \u003d new CalendarEntry(date, newList);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            store.getDuchessCalendar().add(ce);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 29,
      "mohideenik": 38,
      "nishanthelango": 21,
      "muserr": 10
    }
  },
  {
    "path": "src/main/java/duchess/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonInclude;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muserr"
        },
        "content": "import com.fasterxml.jackson.core.JsonParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muserr"
        },
        "content": "import com.fasterxml.jackson.databind.JsonMappingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.databind.MapperFeature;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.Deque;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private final Logger logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private Deque\u003cString\u003e undoStack;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private Deque\u003cString\u003e redoStack;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": "    // storageSize must be 1 more than intended size value."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static final int storageSize \u003d 11;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static final String UNREADABLE_FILE_MESSAGE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \u003d \"Unable to read file, continuing with default list.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static final String FILE_WRITE_ERROR_MESSAGE"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": "            \u003d \"An unexpected error occurred when writing to the file. \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static final String JSON_PARSE_ERROR_MESSAGE"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muserr"
        },
        "content": "            \u003d \"JSON parse was unsuccessful.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static final String UNSUCCESSFUL_MAP_ERROR_MESSAGE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muserr"
        },
        "content": "            \u003d \"Mapping was unsuccessful.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static final String EMPTY_REDO_STACK_ERROR_MESSAGE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muserr"
        },
        "content": "            \u003d \"Redo stack is empty.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static final String EMPTY_UNDO_STACK_ERROR_MESSAGE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muserr"
        },
        "content": "            \u003d \"Undo stack is empty.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static final String DUCHESS_STORAGE_ERROR_MESSAGE"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muserr"
        },
        "content": "            \u003d \"Check duchess.storage input.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static final String STRING_TO_STORE_ERROR_MESSAGE"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muserr"
        },
        "content": "            \u003d \"Unable to convert String to Store.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Constructs Storage object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param fileName filename for duchess.storage"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Storage(String fileName) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muserr"
        },
        "content": "        this.logger \u003d Logger.getLogger(\"Duchess\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muserr"
        },
        "content": "        undoStack \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muserr"
        },
        "content": "        redoStack \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns the tasklist loaded from file."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public Store load() throws DuchessException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            FileInputStream fileStream \u003d new FileInputStream(this.fileName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            Store store \u003d getObjectMapper().readValue(fileStream, Store.class);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            fileStream.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return store;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (IOException | ClassCastException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(UNREADABLE_FILE_MESSAGE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Saves the given tasklist to file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param store the store to save"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @throws DuchessException an error if unable to write to file"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void save(Store store) throws DuchessException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muserr"
        },
        "content": "        logger.log(Level.INFO, \"Saves to file.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            FileOutputStream fileStream \u003d new FileOutputStream(this.fileName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            getObjectMapper().writeValue(fileStream, store);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            fileStream.close();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(FILE_WRITE_ERROR_MESSAGE + e);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private ObjectMapper getObjectMapper() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return new ObjectMapper()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .disable(MapperFeature.AUTO_DETECT_CREATORS,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        MapperFeature.AUTO_DETECT_FIELDS,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        MapperFeature.AUTO_DETECT_GETTERS,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        MapperFeature.AUTO_DETECT_IS_GETTERS)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muserr"
        },
        "content": "                .enable(SerializationFeature.INDENT_OUTPUT)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muserr"
        },
        "content": "                .setSerializationInclusion(JsonInclude.Include.NON_NULL);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Obtains last Store object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @return last Store object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @throws DuchessException throws exception when unable to obtain Store object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public Store getLastSnapshot() throws DuchessException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (undoStack.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(EMPTY_UNDO_STACK_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "muserr"
        },
        "content": "        String jsonVal \u003d undoStack.pollLast();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store store \u003d getObjectMapper().readValue(jsonVal, Store.class);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muserr"
        },
        "content": "            return store;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (JsonParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(JSON_PARSE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (JsonMappingException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(UNSUCCESSFUL_MAP_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(DUCHESS_STORAGE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Adds Store object to stack."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param store current store object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void addToUndoStackPush(Store store) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muserr"
        },
        "content": "        String jsonVal \u003d getStoreToString(store);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "muserr"
        },
        "content": "        String undoStackTop;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (undoStack.size() !\u003d 0) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "muserr"
        },
        "content": "            undoStackTop \u003d undoStack.peekLast();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "muserr"
        },
        "content": "            // Only push to undoStack if the topmost stack object is different."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "muserr"
        },
        "content": "            if (!undoStackTop.equals(jsonVal)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "muserr"
        },
        "content": "                undoStack.addLast(jsonVal);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "muserr"
        },
        "content": "                // Clears redo whenever there store is modified."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "muserr"
        },
        "content": "                redoStack.clear();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "muserr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assert (undoStack.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "muserr"
        },
        "content": "            undoStack.addLast(jsonVal);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "muserr"
        },
        "content": "        // Ensures undoStack size is within acceptable value."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "muserr"
        },
        "content": "        deleteExcessUndoStack();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Obtains first Store object."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @return first Store object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @throws DuchessException throws exception when unable to obtain Store object"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public Store getFirstSnapshot() throws DuchessException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (redoStack.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(EMPTY_REDO_STACK_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "muserr"
        },
        "content": "        String jsonVal \u003d redoStack.pollFirst();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "muserr"
        },
        "content": "        // Add this string to undoStack"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "muserr"
        },
        "content": "        undoStack.addLast(jsonVal);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assert (undoStack.size() !\u003d 0);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "muserr"
        },
        "content": "        deleteExcessUndoStack();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assert (undoStack.size() \u003c\u003d 10);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store store \u003d getObjectMapper().readValue(jsonVal, Store.class);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "muserr"
        },
        "content": "            return store;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (JsonParseException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(JSON_PARSE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (JsonMappingException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(UNSUCCESSFUL_MAP_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(DUCHESS_STORAGE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Returns an undoStack."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @return undoStack"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public Deque\u003cString\u003e getUndoStack() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "muserr"
        },
        "content": "        return this.undoStack;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Returns a redoStack."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @return redoStack"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public Deque\u003cString\u003e getRedoStack() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "muserr"
        },
        "content": "        return this.redoStack;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Returns the top object of UndoStack as a Store object."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @return top object as a store object"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public Store peekUndoStackAsStore() throws DuchessException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (undoStack.size() !\u003d 0) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "muserr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "muserr"
        },
        "content": "                String undoStackString \u003d undoStack.peekLast();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "muserr"
        },
        "content": "                Store store \u003d getObjectMapper().readValue(undoStackString, Store.class);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "muserr"
        },
        "content": "                return store;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "muserr"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "muserr"
        },
        "content": "                throw new DuchessException(STRING_TO_STORE_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "muserr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "muserr"
        },
        "content": "        return new Store();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Returns a string representation of a Store object."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Returns an empty string if exception thrown."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param store store object"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @return string representative of Store object"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private String getStoreToString(Store store) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "muserr"
        },
        "content": "        String jsonVal;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "muserr"
        },
        "content": "            jsonVal \u003d getObjectMapper().writeValueAsString(store);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (JsonProcessingException e) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            jsonVal \u003d \"\";"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assert (jsonVal.equals(\"\"));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "muserr"
        },
        "content": "        return jsonVal;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Adds deserialized string from undoStack to redoStack."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void addToRedoStack() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (undoStack.size() !\u003d 0) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "muserr"
        },
        "content": "            String jsonVal \u003d undoStack.peekLast();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "muserr"
        },
        "content": "            redoStack.addFirst(jsonVal);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "muserr"
        },
        "content": "        deleteExcessRedoStack();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Sets redoStack to specified size."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private void deleteExcessRedoStack() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "muserr"
        },
        "content": "        while (redoStack.size() \u003e storageSize) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "muserr"
        },
        "content": "            redoStack.pollLast();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Sets undoStack to specified size."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private void deleteExcessUndoStack() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "muserr"
        },
        "content": "        while (undoStack.size() \u003e storageSize) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "muserr"
        },
        "content": "            undoStack.pollFirst();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 3,
      "mohideenik": 50,
      "nishanthelango": 4,
      "muserr": 210
    }
  },
  {
    "path": "src/main/java/duchess/storage/Store.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class Store {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private List\u003cModule\u003e moduleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private List\u003cCalendarEntry\u003e duchessCalendar;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Initialises new taskList, moduleList and duchessCalendar."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Store() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.moduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.duchessCalendar \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public boolean isClashing(Task newTask) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.taskList.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .anyMatch(task -\u003e task.clashesWith(newTask));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Optional\u003cModule\u003e findModuleByCode(String code) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return moduleList.stream().filter(module -\u003e module.isOfCode(code)).findFirst();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Creates and returns a new store with seed data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the new store"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static Store seedStore() throws DuchessException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Store store \u003d new Store();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Seed.execute(store);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return store;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"taskList\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonSetter(\"taskList\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void setTaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"moduleList\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public List\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonSetter(\"moduleList\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void setModuleList(List\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @JsonGetter(\"duchessCalendar\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public List\u003cCalendarEntry\u003e getDuchessCalendar() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return duchessCalendar;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @JsonSetter(\"duchessCalendar\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void setDuchessCalendar(List\u003cCalendarEntry\u003e duchessCalendar) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.duchessCalendar \u003d duchessCalendar;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 19,
      "mohideenik": 58
    }
  },
  {
    "path": "src/main/java/duchess/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.model.Grade;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.SortedMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * The following final strings are used to print out duchessCalendar."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private final int horizontalLength \u003d 161;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private final int horizontalBlock \u003d 111; // 9 + 150"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private final int longLength \u003d 120; // -30"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private final int blockLength \u003d 21;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private final int numOfDays \u003d 7;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private final String emptyBlock \u003d \"                     |\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private final String calendarHeader \u003d \"|  TIME  |         MON         |         TUE         |         WED         |\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            + \"         THUR        |         FRI         |         SAT         |         SUN         |\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private final String blockSeparator \u003d \"+--------+---------------------+---------------------+---------------------+\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            + \"---------------------+---------------------+---------------------+---------------------+\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private final String blockShort \u003d \"+--------+----------------------------------------------------------------------\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            + \"------------------------------------------+\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private final String plainSeparator \u003d \"+---------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            + \"---------------------------------------------------------------------------------------+\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private final String plainShort \u003d \"+-------------------------------------------------------------------------------\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            + \"------------------------------------------+\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Reference to Scanner."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Instantiates Scanner class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Prints an indented line."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void beginBlock() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printHR();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Prints an indented line."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void endBlock() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printHR();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Prints welcome message."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        beginBlock();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        printIndented(\"8888888b. 888     888 .d8888b. 888    8888888888888 .d8888b.  .d8888b.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        printIndented(\"888  \\\"Y88b888     888d88P  Y88b888    888888       d88P  Y88bd88P  Y88b\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        printIndented(\"888    888888     888888    888888    888888       Y88b.     Y88b.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        printIndented(\"888    888888     888888       88888888888888888    \\\"Y888b.   \\\"Y888b.\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        printIndented(\"888    888888     888888       888    888888           \\\"Y88b.    \\\"Y88b.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        printIndented(\"888    888888     888888    888888    888888             \\\"888      \\\"888\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        printIndented(\"888  .d88PY88b. .d88PY88b  d88P888    888888       Y88b  d88PY88b  d88P\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        printIndented(\"8888888P\\\"  \\\"Y88888P\\\"  \\\"Y8888P\\\" 888    8888888888888 \\\"Y8888P\\\"  \\\"Y8888P\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        printIndented(\"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        printIndented(\"Welcome to Duchess, where we live to serve your every need.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"What can I do for you?\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        endBlock();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Prints farewell message."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Prints error to user."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param message Error message to be displayed"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(message);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Displays the newly added module as well as other modules."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param module  newly added module"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param modules existing modules"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void showModuleAdded(Module module, List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"I\u0027ve added this module:\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"  \" + module);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"Here are all your modules:\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        showModules(modules);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Displays the newly added grade as well as other grades."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param module module to which grade is added"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param grade  newly added grade"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param grades existing grades"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void showGradeAdded(Module module, Grade grade, List\u003cGrade\u003e grades) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        printIndented(\"I\u0027ve added this grade\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        printIndented(\"  \" + grade);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        printIndented(\"Here are all your grades for \" + module);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        showGrades(grades);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void showDeletedGrade(String gradeDescription, Module module) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        printIndented(\"You\u0027ve deleted \" + gradeDescription + \" for \" + module + \".\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Displays grades in the list given."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param grades list of grades"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void showGrades(List\u003cGrade\u003e grades) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        for (Grade grade : grades) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            printIndented(counter++ + \". \" + grade.toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Displays grades in the given module."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param grades list of grades"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param module module containing grades"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void showGradeList(List\u003cGrade\u003e grades, Module module) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        printIndented(\"Here are your grades for \" + module + \":\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        showGrades(grades);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Prints the task that was added."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param tasks List of all tasks"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param task  Added task"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void showTaskAdded(List\u003cTask\u003e tasks, Task task) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"Got it . I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"  \" + task);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        showNumTasks(tasks);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays Task objects in list given."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param tasks List of Task objects"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void showTaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        showTasks(tasks);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Displays the user\u0027s modules."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param modules list of modules"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void showModuleList(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (modules.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            printIndented(\"You\u0027ve no modules.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            printIndented(\"You can add modules using the `add module` command.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"Here are your modules:\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        showModules(modules);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays search results to user."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param tasks List containing tasks from user"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void showSearchResult(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        showTasks(tasks);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Displays schedule of a single day to user."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Informs user if there are ongoing events."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param tasks List of tasks to show"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param date  Date"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void showScheduleResult(List\u003cTask\u003e tasks, String date) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"Here is your schedule for \" + date + \":\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            printIndented(counter++ + \". \" + t.toString());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Inform user calendar has been saved as test file."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param filePath filePath"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void showFinishedExport(String filePath) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        printIndented(\"Your calendar has finished exporting to \" + filePath);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Process block to be printed in calendar."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param str string of null value or containing description of task"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param length max length of string"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return shortened or padded-with-whitespace string"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private String processDescription(String str, int length) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (str \u003d\u003d null) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return emptyBlock;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else if (str.length() \u003e length) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            str \u003d str.substring(0, length - 3) + \"...\";"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            StringBuilder strBuilder \u003d new StringBuilder(str);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            while (strBuilder.length() \u003c\u003d length) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                strBuilder.append(\" \");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            str \u003d strBuilder.toString();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return str + \"|\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Pads the header for the calendar."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param str string containing academic year + semester + week"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return string with academic context centered and padded with whitespace"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private String processCentred(String str, int length) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        int partition \u003d (int) Math.floor((length - str.length()) / (double) 2);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        StringBuilder strBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        strBuilder.append(\" \".repeat(Math.max(0, partition)));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        strBuilder.append(str);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        strBuilder.append(\" \".repeat(Math.max(0, length - strBuilder.length() + 1)));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return \"|\" + strBuilder.toString() + \"|\";"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Joins together the various blocks for the week."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param time   time"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param strArr array containing descriptions"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return joined string of descriptions or empty blocks"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private String processRow(String time, String[] strArr) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return \"|  \" + time + \"  |\""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                + Arrays.stream(strArr)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .map(str -\u003e processDescription(str, blockLength))"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .collect(Collectors.joining());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Joins together the time column and description column for each event."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param t Task"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return joined string of time + description of event"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private String processRow(Task t) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        String time \u003d t.getTimeFrame().getStart().toLocalTime().toString().replaceAll(\":\", \"\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        String description \u003d t.toString();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (description.length() \u003e horizontalBlock) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            description \u003d description.substring(0, horizontalBlock - 5);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            description +\u003d \"...\";"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        description \u003d processCentred(description, horizontalBlock);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return \"|  \" + time + \"  \" + description;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Returns an array of size seven (for the days in a week)."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Array contains strings of either null value or description"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * of an event-type task."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param flatCalendar duchessCalendar"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param time         key in treeMap storing flatCalendar"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param str          description or null string"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param i            the day of week being processed"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return string array of size seven"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private String[] processArr(SortedMap\u003cLocalTime, String[]\u003e flatCalendar,"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                                LocalTime time,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                                String str,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                                int i) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        String[] strArr;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (!flatCalendar.containsKey(time)) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            strArr \u003d new String[numOfDays];"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            strArr \u003d flatCalendar.get(time);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        strArr[i] \u003d str;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return strArr;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Sorts the duchess calendar into a 2-D map of timings mapped to their event descriptions."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param query filtered duchess calendar"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return sorted map of duchess calendar"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private SortedMap\u003cLocalTime, String[]\u003e flattenCalendar(List\u003cCalendarEntry\u003e query) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        SortedMap\u003cLocalTime, String[]\u003e flatCalendar \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (CalendarEntry ce : query) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            List\u003cTask\u003e taskList \u003d ce.getDateTasks();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            int index \u003d ce.getDate().getDayOfWeek().getValue() - 1;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            for (Task t : taskList) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                LocalTime time \u003d t.getTimeFrame().getStart().toLocalTime();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                String description \u003d t.toString();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                String[] updateArr \u003d processArr(flatCalendar, time, description, index);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                flatCalendar.put(time, updateArr);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return flatCalendar;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Store the display calendar as strings in an array."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param ceList  list of calendar entries"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param context academic year information"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return array list of the display calendar string by string"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public List\u003cString\u003e stringCalendar(List\u003cCalendarEntry\u003e ceList, String context) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        List\u003cString\u003e display \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        display.add(plainSeparator);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        display.add(processCentred(context, horizontalLength));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        display.add(blockSeparator);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        display.add(calendarHeader);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        display.add(blockSeparator);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        SortedMap\u003cLocalTime, String[]\u003e flattened \u003d flattenCalendar(ceList);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (Map.Entry\u003cLocalTime, String[]\u003e entry : flattened.entrySet()) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            String time \u003d entry.getKey().toString().replaceAll(\":\", \"\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            String[] strArr \u003d entry.getValue();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            display.add(processRow(time, strArr));"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            display.add(blockSeparator);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return display;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Prints out the a day view of the calendar."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param ce calendar entry"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public List\u003cString\u003e stringCalendar(CalendarEntry ce, String context) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        List\u003cString\u003e display \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        display.add(plainShort);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        display.add(processCentred(context, longLength));"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        display.add(blockShort);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        String dayOfWeek \u003d ce.getDate().getDayOfWeek().toString();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        display.add(\"|  TIME  \" + processCentred(dayOfWeek, horizontalBlock));"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        display.add(blockShort);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (Task t : ce.getDateTasks()) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            display.add(processRow(t));"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            display.add(blockShort);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return display;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Prints out the a week view of the calendar."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param ceList  calendar"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param context academic year information"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void displayCalendar(List\u003cCalendarEntry\u003e ceList, String context) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        List\u003cString\u003e display \u003d stringCalendar(ceList, context);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (String s : display) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            printIndented(s);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Prints out the a day view of the calendar."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param ce      calendar entry"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param context academic year information"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void displayCalendar(CalendarEntry ce, String context) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        List\u003cString\u003e display \u003d stringCalendar(ce, context);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (String s : display) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            printIndented(s);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Shows the task that was just snoozed."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param task The task that was just snoozed"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void showSnoozedTask(Task task) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"Noted. I\u0027ve snoozed this task:\");"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"  \" + task);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Shows the task that was just deleted."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param tasks List of all tasks"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param task  The task that was just deleted"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void showDeletedTask(List\u003cTask\u003e tasks, Task task) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"  \" + task);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        showNumTasks(tasks);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Prints message for task completion."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param task Completed task"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void showDoneTask(Task task) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"  \" + task);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Prints message for grade completion."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param grade Completed grade"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void showCompletedGrade(Grade grade) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        printIndented(\"Nice! I\u0027ve marked this grade as complete:\");"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        printIndented(\"  \" + grade);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Gets next line from user inputs."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @return String containing user input"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Prints a string accompanied with indentation."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param line String containing description to be indented"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private void printIndented(String line) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        System.out.println(\"    \" + line);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays the tasks in a list."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param tasks List containing user tasks"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private void showNumTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"Now you have \""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                + tasks.size()"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                + (tasks.size() \u003e 1 ? \" tasks\" : \" task\")"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                + \" in the list.\");"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays tasks in a list."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param tasks List containing user tasks"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private void showTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            printIndented(counter++ + \". \" + task);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Displays modules in a list."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param modules list containing modules"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private void showModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            printIndented(counter++ + \". \" + module);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Shows no deadlines present."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void showNoDeadlines() {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "muserr"
        },
        "content": "        printIndented(\"You have no pending deadlines.\");"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays the list of deadlines present in user list."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param tasks List of all tasks"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void showDeadlines(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "muserr"
        },
        "content": "        printIndented(\"You currently have these deadlines:\");"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "muserr"
        },
        "content": "        showTasks(tasks);"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays user history."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param log list of user log"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void showUserHistory(List\u003cString\u003e log) {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "muserr"
        },
        "content": "        printIndented(\"These are the commands you entered:\");"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "muserr"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "muserr"
        },
        "content": "        for (String userInput : log) {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "muserr"
        },
        "content": "            printIndented(counter++ + \". \" + userInput);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays number of undone actions to user."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param undoCounter number of undo operations"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void showUndo(int undoCounter) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (undoCounter \u003d\u003d 1) {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "muserr"
        },
        "content": "            printIndented(\"The last command has been undone.\");"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (undoCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "muserr"
        },
        "content": "            printIndented(\"There\u0027s nothing to undo.\");"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "muserr"
        },
        "content": "            printIndented(\"The last few commands have been undone.\");"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays number of undone actions to user."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param redoCounter number of undo operations"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void showRedo(int redoCounter) {"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (redoCounter \u003d\u003d 1) {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "muserr"
        },
        "content": "            printIndented(\"I redid the last command.\");"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (redoCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "muserr"
        },
        "content": "            printIndented(\"There\u0027s nothing to redo.\");"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "muserr"
        },
        "content": "            printIndented(\"I redid the last few commands.\");"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Displays an error message indicating why the module can\u0027t be deleted."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * \u003cp\u003eThe function also prints the tasks that are associated with the module"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * being deleted.\u003c/p\u003e"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param tasks list of tasks belonging to the module being deleted"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void showUnableToDeleteModuleMsg(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"You can\u0027t delete the module without deleting all of the associated tasks.\");"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"The following tasks are associated with the module.\");"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        showTasks(tasks);"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Displays a confirmation message stating that the module has been deleted."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param module the module that was just deleted"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void showDeletedModule(Module module) {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"You\u0027ve deleted \" + module + \".\");"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays a message stating lessons of a module have been deleted."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param moduleCode module code of required module"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void showDeletedLesson(String moduleCode) {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "muserr"
        },
        "content": "        printIndented(\"You have deleted lessons for \" + moduleCode + \".\");"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays a message when no lessons are deleted for a module."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param moduleCode module code of required module"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void showNoDeletedLesson(String moduleCode) {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "muserr"
        },
        "content": "        printIndented(\"There are no lessons to be deleted for \" + moduleCode + \".\");"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays a message when lessons are added for a module."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param moduleCode module code of required module"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void showLessonsAdded(String moduleCode) {"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "muserr"
        },
        "content": "        printIndented(\"Lessons have been added for \" + moduleCode + \".\");"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays a message when lessons are not added for a module."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param moduleCode module code of required module"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void showNoLessonsAdded(String moduleCode) {"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "muserr"
        },
        "content": "        printIndented(\"Lessons have not been added for \" + moduleCode + \".\");"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Displays a given message."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param msg the message to display"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void displayMessage(String msg) {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(msg);"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Prints a straight line."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private void printHR() {"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        printIndented(\"_______________________________________________________________\");"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 252,
      "mohideenik": 182,
      "nishanthelango": 54,
      "muserr": 155
    }
  },
  {
    "path": "src/test/java/duchess/commands/AddEventCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "class AddEventCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private final Storage storage \u003d new Storage(\"data.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private final Store store \u003d new Store();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private List\u003cEvent\u003e testCases;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private List\u003cLocalDate\u003e validDates;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private void initialiseTestCases() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        testCases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        validDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        testCases.add(new Event(\"2019-08-11T12:12\", \"2019-08-11T12:14\")); // invalid"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        testCases.add(new Event(\"2019-08-12T12:12\", \"2019-08-12T12:14\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        validDates.add(LocalDate.parse(\"2019-08-12\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        testCases.add(new Event(\"2019-12-08T12:12\", \"2019-12-08T12:14\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        validDates.add(LocalDate.parse(\"2019-12-08\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        testCases.add(new Event(\"2019-12-09T12:12\", \"2019-12-09T12:14\")); // invalid"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        testCases.add(new Event(\"2020-01-12T12:12\", \"2020-01-12T12:14\")); // invalid"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        testCases.add(new Event(\"2020-01-13T12:12\", \"2020-01-13T12:14\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        validDates.add(LocalDate.parse(\"2020-01-13\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        testCases.add(new Event(\"2020-05-09T12:12\", \"2020-05-09T12:14\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        validDates.add(LocalDate.parse(\"2020-05-09\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        testCases.add(new Event(\"2020-05-10T12:12\", \"2020-05-10T12:14\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        validDates.add(LocalDate.parse(\"2020-05-10\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        testCases.add(new Event(\"2020-05-11T12:12\", \"2020-05-11T12:14\")); // invalid"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void execute_whenEventIsWithinFormalAcademicYear_eventAddsToDuchessCalendar()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            throws DuchessException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (Event event : testCases) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            LocalDateTime start \u003d LocalDateTime.parse(event.getStart());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            LocalDateTime end \u003d LocalDateTime.parse(event.getEnd());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            AddEventCommand validCommand \u003d new AddEventCommand(\"testing\", end, start);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            validCommand.execute(store, ui, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (CalendarEntry ce : store.getDuchessCalendar()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            assertEquals(ce.getDate(), validDates.get(counter));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        assertEquals(5, store.getDuchessCalendar().size());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private void clearTestCases() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        testCases.clear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        validDates.clear();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 70
    }
  },
  {
    "path": "src/test/java/duchess/commands/AddGradeCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.AddGradeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.model.Grade;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "public class AddGradeCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final Storage storage \u003d new Storage(\"data.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final Store store \u003d new Store();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void validCommand_executes() throws DuchessException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        new AddModuleCommand(\"Discrete Math\", \"CS1231\").execute(store, ui, storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        AddGradeCommand validCommand \u003d new AddGradeCommand("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                14, 30, 23, \"midterm\", \"CS1231\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        validCommand.execute(store, ui, storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Grade addedGrade \u003d store.findModuleByCode(\"CS1231\").get().getGrades().get(0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertEquals(14, addedGrade.getMarks());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertEquals(30, addedGrade.getMaxMarks());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertEquals(23, addedGrade.getWeightage());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertEquals(true, addedGrade.getIsComplete());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue(addedGrade.getTask().equals(\"midterm\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nishanthelango": 33
    }
  },
  {
    "path": "src/test/java/duchess/commands/AddModuleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "class AddModuleCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Storage storage \u003d new Storage(\"data.json\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Store store \u003d new Store();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void validCommand_executes() throws DuchessException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        AddModuleCommand validCommand \u003d new AddModuleCommand(\"Math\", \"MA1511\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        validCommand.execute(store, ui, storage);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Module addedModule \u003d store.getModuleList().get(0);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(addedModule.getCode().equalsIgnoreCase(\"MA1511\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(addedModule.getName().equals(\"Math\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 26
    }
  },
  {
    "path": "src/test/java/duchess/commands/DeleteModuleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "class DeleteModuleCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Store store \u003d new Store();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Storage storage \u003d new Storage(\"data.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void execute_executes_whenModuleInRange() throws DuchessException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Module module \u003d new Module(\"CS1231\", \"Module\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        store.getModuleList().add(module);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(store.getModuleList().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Command deleteCommand \u003d new DeleteModuleCommand(1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deleteCommand.execute(store, ui, storage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(store.getModuleList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void execute_whenModuleNotInRange_throwsException() throws DuchessException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Module module \u003d new Module(\"CS1231\", \"Module\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        store.getModuleList().add(module);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(store.getModuleList().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Command deleteCommand \u003d new DeleteModuleCommand(2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            DuchessException.class,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            () -\u003e deleteCommand.execute(store, ui, storage));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void execute_doesNotDelete_whenModuleHasTasks() throws DuchessException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Module module \u003d new Module(\"CS1231\", \"Module\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        store.getModuleList().add(module);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(store.getModuleList().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Task todo \u003d new Todo(\"Test\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        todo.setModule(module);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        store.getTaskList().add(todo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Command deleteCommand \u003d new DeleteModuleCommand(1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deleteCommand.execute(store, ui, storage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(store.getModuleList().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 59
    }
  },
  {
    "path": "src/test/java/duchess/commands/DoneTaskCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.logic.commands.DoneTaskCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class DoneTaskCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private final Storage storage \u003d new Storage(\"data.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private final Store store \u003d new Store();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private void initialise() throws DuchessException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.parse(\"2019-10-27T12:12\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.parse(\"2019-10-27T12:14\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        Event event \u003d new Event(\"description\", end, start);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        taskList.add(event);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        List\u003cCalendarEntry\u003e ce \u003d List.of(new CalendarEntry(LocalDate.parse(\"2019-10-27\"), taskList));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        store.setDuchessCalendar(ce);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        store.setTaskList(taskList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void execute_taskIsCalendarEntry_modifiesDuchessCalendar() throws DuchessException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        DoneTaskCommand dc \u003d new DoneTaskCommand(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        dc.execute(store, ui, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        CalendarEntry ce \u003d store.getDuchessCalendar().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        Task task \u003d ce.getDateTasks().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        assertEquals(\"[E][/] description (at: 27/10/2019 1212 to 27/10/2019 1214)\", task.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 46
    }
  },
  {
    "path": "src/test/java/duchess/commands/ReminderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class ReminderCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private final Storage storage \u003d new Storage(\"text_file\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private final Store store \u003d new Store();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private final Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void execute_withoutDeadlines_success() throws DuchessException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(store.getTaskList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "        ReminderCommand reminderCommand \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        reminderCommand.execute(store, ui, storage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(store.getTaskList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void execute_withDeadlines_success() throws DuchessException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        String firstDeadline \u003d \"add deadline /name homework assignment /by 23/12/2019 1800 /module nil /weightage nil\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        String secondDeadline \u003d \"add deadline /name school project tasks /by 01/11/2020 0900 /module nil /weightage 20\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": "        // Adding the firstDeadline"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.parse(firstDeadline).execute(store, ui, storage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        // Adding the secondDeadline"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.parse(secondDeadline).execute(store, ui, storage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muserr"
        },
        "content": "        parser.parse(\"reminder\").execute(store, ui, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(store.getTaskList().size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 4,
      "mohideenik": 11,
      "nishanthelango": 3,
      "muserr": 25
    }
  },
  {
    "path": "src/test/java/duchess/commands/ViewScheduleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.logic.commands.ViewScheduleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class ViewScheduleCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    void viewScheduleCommand_inValidDate_duchessExceptionThrown() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        List.of("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                List.of(\"2/3/2019\", \"day\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                List.of(\"32/01/2019\", \"week\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                List.of(\"12/02\", \"week\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        ).forEach(str -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            assertThrows(DuchessException.class, () -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                new ViewScheduleCommand(str.get(0), str.get(1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 22,
      "mohideenik": 2,
      "nishanthelango": 1
    }
  },
  {
    "path": "src/test/java/duchess/model/DuchessHistoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muserr"
        },
        "content": "package duchess.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.DoneTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.logic.commands.ListTasksCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class DuchessHistoryTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void addToFullLog_invalidEmptyInput_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": "        DuchessHistory duchessHistory \u003d new DuchessHistory();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(DuchessHistory.getFullLog().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muserr"
        },
        "content": "        duchessHistory.add(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(DuchessHistory.getFullLog().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void addToFullLog_invalidInput_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": "        DuchessHistory duchessHistory \u003d new DuchessHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(DuchessHistory.getFullLog().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(DuchessHistory.getValidCommandLog().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muserr"
        },
        "content": "        duchessHistory.add(\"random stuffs\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(DuchessHistory.getFullLog().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(DuchessHistory.getValidCommandLog().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void addToValidCommandLog_invalidEmptyInput_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muserr"
        },
        "content": "        DuchessHistory duchessHistory \u003d new DuchessHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(DuchessHistory.getValidCommandLog().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muserr"
        },
        "content": "        duchessHistory.add(\"\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(DuchessHistory.getValidCommandLog().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void addToValidCommandLog_invalidInput_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muserr"
        },
        "content": "        DuchessHistory duchessHistory \u003d new DuchessHistory();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(DuchessHistory.getValidCommandLog().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muserr"
        },
        "content": "        duchessHistory.add(\"random stuffs\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(DuchessHistory.getValidCommandLog().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void addValidCommands_validInput_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muserr"
        },
        "content": "        DuchessHistory duchessHistory \u003d new DuchessHistory();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            final Command command1 \u003d new DoneTaskCommand(2);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Command command2 \u003d new HistoryCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Command command3 \u003d new ListTasksCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Command command4 \u003d new RedoCommand(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(DuchessHistory.getValidCommandLog().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muserr"
        },
        "content": "            duchessHistory.addValidCommands(command1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(DuchessHistory.getValidCommandLog().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muserr"
        },
        "content": "            duchessHistory.addValidCommands(command2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(DuchessHistory.getValidCommandLog().size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muserr"
        },
        "content": "            duchessHistory.addValidCommands(command3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(DuchessHistory.getValidCommandLog().size() \u003d\u003d 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muserr"
        },
        "content": "            duchessHistory.addValidCommands(command4);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(DuchessHistory.getValidCommandLog().size() \u003d\u003d 4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(e instanceof DuchessException);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nishanthelango": 2,
      "muserr": 75
    }
  },
  {
    "path": "src/test/java/duchess/model/ModuleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Module module \u003d new Module("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \"CS1231\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \"Discrete Mathematics\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    );"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertEquals(module.toString(), \"CS1231 Discrete Mathematics\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void getName_getsName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(module.getName(), \"Discrete Mathematics\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void getCode_getsCode() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(module.getCode(), \"CS1231\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void isOfCode_sameCode_returnsTrue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(module.isOfCode(\"cs1231\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void isOfCode_differentCode_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertFalse(module.isOfCode(\"CS2040\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void equals_sameCode_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Module other \u003d new Module(\"CS1231\", \"Does not matter\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(module.equals(other));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void equals_differentCode_returnsFalse() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Module other \u003d new Module(\"CS1232\", \"Discrete Mathematics\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertFalse(module.equals(other));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 50,
      "nishanthelango": 1
    }
  },
  {
    "path": "src/test/java/duchess/model/TimeFrameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class TimeFrameTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final TimeFrame instantFrame;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final TimeFrame indefiniteFrame;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final TimeFrame normalFrame;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final TimeFrame normalFrame2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Initializes few TimeFrames for testing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException if unable to create a TimeFrame"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public TimeFrameTest() throws DuchessException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        LocalDateTime dateTime \u003d Util.parseDateTime(\"12/12/2019 1200\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        LocalDateTime dateTime2 \u003d Util.parseDateTime(\"12/12/2019 1400\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        normalFrame \u003d new TimeFrame(dateTime, dateTime2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        LocalDateTime dateTime3 \u003d Util.parseDateTime(\"12/12/2019 1300\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        LocalDateTime dateTime4 \u003d Util.parseDateTime(\"12/12/2019 1500\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        normalFrame2 \u003d new TimeFrame(dateTime3, dateTime4);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        instantFrame \u003d TimeFrame.ofInstantaneousTask(dateTime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        indefiniteFrame \u003d TimeFrame.ofTimelessTask();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(indefiniteFrame.compareTo(indefiniteFrame) \u003d\u003d 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(indefiniteFrame.compareTo(instantFrame) \u003c 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(instantFrame.compareTo(indefiniteFrame) \u003e 0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(normalFrame.compareTo(normalFrame) \u003d\u003d 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(normalFrame.compareTo(normalFrame2) \u003c 0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void fallsWithin_indefiniteTimeFrame() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertFalse(normalFrame.fallsWithin(indefiniteFrame));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void clashesWith_instantaneousTimeFrame() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertFalse(normalFrame.clashesWith(instantFrame));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void clashesWith_normalTimeFrame() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(normalFrame.clashesWith(normalFrame2));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(normalFrame2.clashesWith(normalFrame));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 60
    }
  },
  {
    "path": "src/test/java/duchess/model/calendar/CalendarManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class CalendarManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private List\u003cCalendarEntry\u003e duchessCalendar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private void initialise() throws DuchessException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        duchessCalendar \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate startOfAY20192020 \u003d LocalDate.of(2019, Month.AUGUST, 12);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate semOneEnd \u003d LocalDate.of(2019, Month.DECEMBER, 8);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (LocalDate date \u003d startOfAY20192020; date.compareTo(semOneEnd) \u003c\u003d 0; date \u003d date.plusDays(1)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d 10; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                LocalDateTime start \u003d LocalDateTime.of(date, LocalTime.of(i, 12));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                LocalDateTime end \u003d LocalDateTime.of(date, LocalTime.of(i, 14));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                Event event \u003d new Event(\"Test\", end, start);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                taskList.add(event);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            CalendarEntry ce \u003d new CalendarEntry(date, taskList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            duchessCalendar.add(ce);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate semTwoStart \u003d LocalDate.of(2020, Month.JANUARY, 13);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate semTwoEnd \u003d LocalDate.of(2020, Month.MAY, 10);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (LocalDate date \u003d semTwoStart; date.compareTo(semTwoEnd) \u003c\u003d 0; date \u003d date.plusDays(1)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d 10; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                LocalDateTime start \u003d LocalDateTime.of(date, LocalTime.of(i, 12));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                LocalDateTime end \u003d LocalDateTime.of(date, LocalTime.of(i, 14));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                Event event \u003d new Event(\"Test\", end, start);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                taskList.add(event);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            CalendarEntry ce \u003d new CalendarEntry(date, taskList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            duchessCalendar.add(ce);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void addEntry_givenLocalDateAndTaskList_AddsToCalendar() throws DuchessException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate date \u003d LocalDate.of(2019, Month.AUGUST, 18);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        CalendarEntry beforeCE \u003d Objects.requireNonNull(duchessCalendar"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .filter(e -\u003e e.getDate().equals(date))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .findAny()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .orElse(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        assertNotNull(beforeCE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        List\u003cTask\u003e beforeTaskList \u003d beforeCE.getDateTasks();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        int before \u003d beforeTaskList.size();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDateTime start \u003d LocalDateTime.of(date, LocalTime.of(12, 12));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.of(date, LocalTime.of(12, 14));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        Event event \u003d new Event(\"Test\", end, start);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        CalendarManager.addEntry(duchessCalendar, event, start.toLocalDate());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        CalendarEntry afterCE \u003d Objects.requireNonNull(duchessCalendar"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .filter(e -\u003e e.getDate().equals(date))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .findAny()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                .orElse(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        assertNotNull(afterCE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        List\u003cTask\u003e afterTaskList \u003d afterCE.getDateTasks();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        int after \u003d afterTaskList.size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        int difference \u003d after - before;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        assertEquals(1, difference);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private void reset() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        duchessCalendar.clear();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 86
    }
  },
  {
    "path": "src/test/java/duchess/model/calendar/CalendarUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.api.extension.ParameterContext;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.params.converter.ArgumentConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.params.converter.ArgumentConverter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.params.converter.ConvertWith;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.params.provider.CsvSource;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class CalendarUtilTest implements ArgumentConverter {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private List\u003cLocalDate\u003e invalidDates;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private List\u003cLocalDate\u003e semOne;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private List\u003cLocalDate\u003e semTwo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private List\u003cLocalDate\u003e weekDates;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private List\u003cInteger\u003e expectedCalculation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private void initialise() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        invalidDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        semOne \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        semTwo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        weekDates \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        expectedCalculation \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate startOfAY20192020 \u003d LocalDate.of(2019, Month.AUGUST, 12);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate semOneEnd \u003d LocalDate.of(2019, Month.DECEMBER, 8);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (LocalDate date \u003d LocalDate.of(2018, Month.JANUARY, 1)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": "             ; date.isBefore(startOfAY20192020)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                ; date \u003d date.plusDays(1)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            invalidDates.add(date);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (LocalDate date \u003d startOfAY20192020; date.compareTo(semOneEnd) \u003c\u003d 0; date \u003d date.plusDays(1)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            semOne.add(date);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate semTwoStart \u003d LocalDate.of(2020, Month.JANUARY, 13);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate semTwoEnd \u003d LocalDate.of(2020, Month.MAY, 10);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (LocalDate date \u003d semOneEnd.plusDays(1); date.isBefore(semTwoStart); date \u003d date.plusDays(1)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            invalidDates.add(date);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (LocalDate date \u003d semTwoStart; date.compareTo(semTwoEnd) \u003c\u003d 0; date \u003d date.plusDays(1)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            semTwo.add(date);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (int i \u003d 1; i \u003c 6; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            invalidDates.add(semTwoEnd.plusDays(i));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        int count \u003d 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (LocalDate date \u003d startOfAY20192020; date.compareTo(semOneEnd) \u003c\u003d 0; date \u003d date.plusWeeks(1)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            weekDates.add(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            weekDates.add(date.with(TemporalAdjusters.next(DayOfWeek.SUNDAY)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            expectedCalculation.add(count);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        count \u003d 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (LocalDate date \u003d semTwoStart; date.compareTo(semTwoEnd) \u003c\u003d 0; date \u003d date.plusWeeks(1)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            weekDates.add(date);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            weekDates.add(date.with(TemporalAdjusters.next(DayOfWeek.SUNDAY)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            expectedCalculation.add(count);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void processDate_datesOutsideOfCurrentFormalAcademicYear_returnsMinusOne() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (LocalDate date : invalidDates) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            int result \u003d CalendarUtil.processDate(date);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            assertEquals(result, -1);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void processDate_datesWithinSemesterOneOfCurrentFormalAcademicYear_returnsPositiveOne() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (LocalDate date : semOne) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            int result \u003d CalendarUtil.processDate(date);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            assertEquals(result, 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void processDate_datesWithinSemesterTwoOfCurrentFormalAcademicYear_returnsPositiveTwo() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (LocalDate date : semTwo) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            int result \u003d CalendarUtil.processDate(date);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            assertEquals(result, 2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void getWeekAsInt_datesWithinFormalSemestersInCurrentAcademicYear_returnsCorrectWeekNumber() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        int counter \u003d 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (int expected : expectedCalculation) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            int result \u003d CalendarUtil.getWeekAsInt(weekDates.get(counter));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            assertEquals(result, expected);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            result \u003d CalendarUtil.getWeekAsInt(weekDates.get(counter));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            assertEquals(result, expected);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            counter++;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private void clearLists() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        invalidDates.clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        semOne.clear();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        semTwo.clear();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        weekDates.clear();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        expectedCalculation.clear();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public Object convert(Object source, ParameterContext context) throws ArgumentConversionException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/uuuu\")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                    .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return LocalDate.parse((String) source, formatter);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            throw new IllegalArgumentException(\"Failed to convert\", e);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @CsvSource(value \u003d {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"12/08/2019:AY2019/2020, Semester 1, W1\","
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"18/08/2019:AY2019/2020, Semester 1, W1\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"19/08/2019:AY2019/2020, Semester 1, W2\","
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"25/08/2019:AY2019/2020, Semester 1, W2\","
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"06/10/2019:AY2019/2020, Semester 1, W7\","
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"07/10/2019:AY2019/2020, Semester 1, W8\","
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"13/10/2019:AY2019/2020, Semester 1, W8\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"29/09/2019:AY2019/2020, Semester 1, Recess Week\","
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"20/11/2019:AY2019/2020, Semester 1, Reading Week\","
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"05/12/2019:AY2019/2020, Semester 1, Examinations\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"25/02/2020:AY2019/2020, Semester 2, Recess Week\","
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"21/04/2020:AY2019/2020, Semester 2, Reading Week\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"05/05/2020:AY2019/2020, Semester 2, Examinations\",},"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            delimiter \u003d \u0027:\u0027)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void toString_validDateInput_givesCorrectContext(@ConvertWith(CalendarUtilTest.class) LocalDate localDate,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                                                            String expected) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        String output \u003d CalendarUtil.toString(localDate);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        assertEquals(output, expected);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 153
    }
  },
  {
    "path": "src/test/java/duchess/model/task/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void toString_formatted_correctly() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        assertEquals(\"[D][X] do something (by: 20/12/2019 1243)\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                new Deadline(\"do something\", LocalDateTime.parse(\"2019-12-20T12:43\")).toString());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void snooze_within_year_snoozes() throws DuchessException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Task task \u003d new Deadline(\"do something\", LocalDateTime.parse(\"2019-12-20T12:12\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        task.snooze();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        assertEquals(task.toString(), \"[D][X] do something (by: 27/12/2019 1212)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void snooze_over_years_snoozes() throws DuchessException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Task task \u003d new Deadline(\"do something\", LocalDateTime.parse(\"2019-12-27T12:12\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        task.snooze();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        assertEquals(task.toString(), \"[D][X] do something (by: 03/01/2020 1212)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void setDeadline_setsDeadline() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"do something\", LocalDateTime.parse(\"2019-12-26T12:12\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(deadline.getDeadline(), \"2019-12-26T12:12\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setDeadline(\"2019-12-27T12:12\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(deadline.getDeadline(), \"2019-12-27T12:12\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 3,
      "mohideenik": 28,
      "nishanthelango": 8
    }
  },
  {
    "path": "src/test/java/duchess/model/task/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Event event \u003d new Event(\"2019-12-27T12:12\", \"2019-12-27T12:14\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(event.getStart(), \"2019-12-27T12:12\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(event.getEnd(), \"2019-12-27T12:14\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void toString_formatsCorrectly() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        event.setDescription(\"Test\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(event.toString(),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                \"[E][X] Test (at: 27/12/2019 1212 to 27/12/2019 1214)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void snooze_snoozes() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        event.snooze();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(event.getStart(), \"2020-01-03T12:12\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 1,
      "mohideenik": 27
    }
  },
  {
    "path": "src/test/java/duchess/model/task/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Task deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Module module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Instantiate testing class with default deadline and module."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public TaskTest() throws DuchessException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        deadline \u003d new Deadline(\"return book\", LocalDateTime.parse(\"2020-12-12T12:00\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        module \u003d new Module(\"CS2113T\", \"Easy game\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void getModule_getsModule() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setModule(module);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                Optional.of(module),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                deadline.getModule()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setModule(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                Optional.empty(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                deadline.getModule()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void compareTo_twoDeadlines_increasingOrder() throws DuchessException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Task other \u003d new Deadline(\"return book\", LocalDateTime.parse(\"2020-12-12T14:00\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(deadline.compareTo(other) \u003c 0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void setDone_setsDone() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setDone(false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertFalse(deadline.isDone());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setDone(true);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(deadline.isDone());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void setDescription_setsDescription() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setDescription(\"Test\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(deadline.getDescription(), \"Test\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void toString_includesModuleName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setModule(module);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                deadline.toString().contains(\"CS2113T\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setModule(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                deadline.toString().contains(\"CS2113T\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void toString_includesTick() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setDone(true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                deadline.toString(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                \"[D][/] return book (by: 12/12/2020 1200)\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setDone(false);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                deadline.toString(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                \"[D][X] return book (by: 12/12/2020 1200)\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 2,
      "mohideenik": 79,
      "nishanthelango": 3,
      "muserr": 1
    }
  },
  {
    "path": "src/test/java/duchess/model/task/TodoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "public class TodoTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final Todo todo \u003d new Todo(\"something\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertEquals(\"something\", todo.getDescription());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void toString_formatsCorrectly() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertEquals(todo.toString(),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                \"[T][X] something\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 1,
      "nishanthelango": 18
    }
  },
  {
    "path": "src/test/java/duchess/parser/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void parse_parses() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(new ParserStateStub());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            DuchessException.class,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            () -\u003e parser.parse(\"will throw exception\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \"Stub test\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void continueParsing_parses() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(new ParserStateStub());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            DuchessException.class,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            () -\u003e parser.continueParsing(Util.parameterizeWithoutCommand(\"test command\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \"Stub test 2\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private class ParserStateStub extends ParserState {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        public Command parse(String input) throws DuchessException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            throw new DuchessException(\"Stub test\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        public Command continueParsing(Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            throw new DuchessException(\"Stub test 2\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 44
    }
  },
  {
    "path": "src/test/java/duchess/parser/UtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class UtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void parseDateTime_outOfBounds_exceptionThrown() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            DuchessException.class,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            () -\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                Util.parseDateTime(\"12/12/2019\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void parameterize() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        String input \u003d \"event something happening /at a b /to c d /hi\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Map\u003cString, String\u003e parameters \u003d Util.parameterize(input);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(\"event\", parameters.get(\"command\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(\"something happening\", parameters.get(\"general\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(\"a b\", parameters.get(\"at\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(\"c d\", parameters.get(\"to\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(null, parameters.get(\"hi\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 1,
      "mohideenik": 32
    }
  },
  {
    "path": "src/test/java/duchess/parser/commands/CalendarCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.parser.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.logic.commands.DisplayCalendarCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "class CalendarCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private List\u003cString\u003e invalidDates \u003d List.of(\"10/08/2019\", \"11/08/2019\", \"09/12/2019\", \"12/01/2020\", \"11/05/2020\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private List\u003cString\u003e validDates \u003d List.of(\"12/08/2019\", \"08/12/2019\", \"13/01/2020\", \"10/05/2020\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void parse_invalidViewType_throwsDuchessException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        Map\u003cString, String\u003e parameters \u003d Util.parameterize(\"calendar display /view rubbish /date 11/10/2019\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e CalendarCommandParser.parse(parameters));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void parse_invalidCalendarInteraction_throwsDuchessException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        Map\u003cString, String\u003e parameters \u003d Util.parameterize(\"calendar rubbish /date 11/10/2019 /view day\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e CalendarCommandParser.parse(parameters));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void parse_givenDatesOutsideAcademicYear_throwsDuchessException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (String date : invalidDates) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            Map\u003cString, String\u003e parameters \u003d Util.parameterize(\"calendar display /view day /date \" + date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            assertThrows(DuchessException.class, () -\u003e CalendarCommandParser.parse(parameters));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void parse_givenDatesWithinAcademicYear_successfulReturnDisplayCalendarCommand() throws DuchessException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (String date : validDates) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            Map\u003cString, String\u003e parameters \u003d Util.parameterize(\"calendar display /view day /date \" + date);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            assertTrue(CalendarCommandParser.parse(parameters) instanceof DisplayCalendarCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 45
    }
  },
  {
    "path": "src/test/java/duchess/parser/commands/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.parser.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.DeleteGradeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    void parse() throws DuchessException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters1 \u003d Util.parameterize(\"delete task /no 1\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                DeleteCommandParser.parse(parameters1) instanceof DeleteTaskCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        );"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters2 \u003d Util.parameterize(\"delete module /no 1\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                DeleteCommandParser.parse(parameters2) instanceof DeleteModuleCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters3 \u003d Util.parameterize(\"delete grade /module CS1231 /no 1\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                DeleteCommandParser.parse(parameters3) instanceof DeleteGradeCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters4 \u003d Util.parameterize(\"delete task something\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e DeleteCommandParser.parse(parameters4));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters5 \u003d Util.parameterize(\"delete task /no something\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e DeleteCommandParser.parse(parameters5));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters6 \u003d Util.parameterize(\"delete module something\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e DeleteCommandParser.parse(parameters6));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters7 \u003d Util.parameterize(\"delete module /no something\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e DeleteCommandParser.parse(parameters7));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters8 \u003d Util.parameterize(\"delete grade something\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e DeleteCommandParser.parse(parameters8));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters9 \u003d Util.parameterize(\"delete grade /module something\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e DeleteCommandParser.parse(parameters9));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters10 \u003d Util.parameterize(\"delete grade /module something /no something\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e DeleteCommandParser.parse(parameters10));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nishanthelango": 55
    }
  },
  {
    "path": "src/test/java/duchess/parser/commands/DoneCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.parser.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.DoneGradeCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.DoneTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "public class DoneCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    void parse() throws DuchessException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters1 \u003d Util.parameterize(\"done task /no 1\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                DoneCommandParser.parse(parameters1) instanceof DoneTaskCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        );"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters2 \u003d Util.parameterize(\"done grade /module CS1231 /no 1 /marks 15/20\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                DoneCommandParser.parse(parameters2) instanceof DoneGradeCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters3 \u003d Util.parameterize(\"done task something\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e DoneCommandParser.parse(parameters3));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters4 \u003d Util.parameterize(\"done task /no something\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e DoneCommandParser.parse(parameters4));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters5 \u003d Util.parameterize(\"done grade something\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e DoneCommandParser.parse(parameters5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters6 \u003d Util.parameterize(\"done grade /module something\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e DoneCommandParser.parse(parameters6));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters7 \u003d Util.parameterize(\"done grade /module something /no something\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e DoneCommandParser.parse(parameters7));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters8 \u003d Util.parameterize(\"done grade /module s /no 1 /marks s\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e DoneCommandParser.parse(parameters8));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters9 \u003d Util.parameterize(\"done grade /module s /no s /marks 14/31\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e DoneCommandParser.parse(parameters9));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nishanthelango": 49
    }
  },
  {
    "path": "src/test/java/duchess/parser/commands/LessonCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muserr"
        },
        "content": "package duchess.parser.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.logic.commands.AddLessonCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muserr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class LessonCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": "    void parse() throws DuchessException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Map\u003cString, String\u003e parameters1 \u003d Util"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": "                .parameterize(\"lesson /code CS1231 /type Lecture /time 27/09/2019 1100 \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": "                        + \"/to 27/09/2019 1300\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": "                LessonCommandParser.parse(parameters1) instanceof AddLessonCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Map\u003cString, String\u003e parameters2 \u003d Util"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "                .parameterize(\"lesson /type lab /code CG2271 /time 28/09/2019 0800 /to \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": "                        + \"28/09/2019 1000\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": "                LessonCommandParser.parse(parameters2) instanceof AddLessonCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": "        );"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Map\u003cString, String\u003e parameters4 \u003d Util.parameterize(\"lesson /add something\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e LessonCommandParser.parse(parameters4));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Map\u003cString, String\u003e parameters5 \u003d Util.parameterize(\"lesson something\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e LessonCommandParser.parse(parameters5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Map\u003cString, String\u003e parameters6 \u003d Util.parameterize(\"lesson /code something\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e LessonCommandParser.parse(parameters6));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Map\u003cString, String\u003e parameters7 \u003d Util.parameterize(\"lesson /code something /type \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e LessonCommandParser.parse(parameters7));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Map\u003cString, String\u003e parameters8 \u003d Util.parameterize(\"lesson /code /type /time\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e LessonCommandParser.parse(parameters8));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Map\u003cString, String\u003e parameters9 \u003d Util.parameterize(\"lesson /code /type /time /to\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e LessonCommandParser.parse(parameters9));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Map\u003cString, String\u003e parameters10 \u003d Util.parameterize(\"lesson /code /type /time /to /by\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e LessonCommandParser.parse(parameters10));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muserr": 52
    }
  },
  {
    "path": "src/test/java/duchess/parser/commands/ListCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.ListGradesCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.ListModulesCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.ListTasksCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "class ListCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    void parse() throws DuchessException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Map\u003cString, String\u003e parameters1 \u003d Util.parameterize(\"list modules\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                ListCommandParser.parse(parameters1) instanceof ListModulesCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Map\u003cString, String\u003e parameters2 \u003d Util.parameterize(\"list tasks\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                ListCommandParser.parse(parameters2) instanceof ListTasksCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters3 \u003d Util.parameterize(\"list grades /module CS1231\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                ListCommandParser.parse(parameters3) instanceof ListGradesCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        );"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters4 \u003d Util.parameterize(\"list grades something\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e ListCommandParser.parse(parameters4));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Map\u003cString, String\u003e parameters5 \u003d Util.parameterize(\"list something\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e ListCommandParser.parse(parameters5));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 28,
      "nishanthelango": 11
    }
  },
  {
    "path": "src/test/java/duchess/parser/states/DefaultStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.ListModulesCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.ListTasksCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "class DefaultStateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final DefaultState defaultState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public DefaultStateTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.defaultState \u003d new DefaultState(this.parser);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void list_command() throws DuchessException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(defaultState.parse(\"list modules\") instanceof ListModulesCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(defaultState.parse(\"list tasks\") instanceof ListTasksCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 25
    }
  },
  {
    "path": "src/test/java/duchess/parser/states/add/AddStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "class AddStateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final AddState addState \u003d new AddState(parser);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    void parse() throws DuchessException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(addState);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                addState.parse(\"rubbish\") instanceof DisplayCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof AddState);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                addState.parse(\"module\") instanceof DisplayCommand);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof ModuleNameState);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                addState.parse(\"event\") instanceof DisplayCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof EventDescriptionState);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    void continueParsing() throws DuchessException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(addState);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                addState.continueParsing(Util.parameterizeWithoutCommand(\"nonsense\")) instanceof DisplayCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof AddState);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                addState.continueParsing(Util.parameterizeWithoutCommand(\"todo\")) instanceof DisplayCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof TodoNameState);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                addState.continueParsing(Util.parameterizeWithoutCommand(\"module\")) instanceof DisplayCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof ModuleNameState);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 48
    }
  },
  {
    "path": "src/test/java/duchess/parser/states/add/EventDescriptionStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "class EventDescriptionStateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final EventDescriptionState eventDescriptionState \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            new EventDescriptionState(parser);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    void parse() throws DuchessException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(eventDescriptionState);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.parse(\"some description\") instanceof DisplayCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof EventFromState);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(eventDescriptionState);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.parse(\"\") instanceof DisplayCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof EventDescriptionState);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    void continueParsing() throws DuchessException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(eventDescriptionState);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.continueParsing("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                Util.parameterizeWithoutCommand(\"event /name test\")) instanceof DisplayCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof EventFromState);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(eventDescriptionState);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.continueParsing("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                Util.parameterizeWithoutCommand(\"event /rubbish test\")) instanceof DisplayCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof EventDescriptionState);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 39
    }
  },
  {
    "path": "src/test/java/duchess/parser/states/add/EventFromStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "class EventFromStateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final EventFromState eventFromState \u003d new EventFromState(parser, \"test\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    void parse() throws DuchessException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(eventFromState);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.parse(\"12/12/2019 1200\") instanceof DisplayCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof EventToState);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(eventFromState);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.parse(\"12/13/2019 1200\") instanceof DisplayCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof EventFromState);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    void continueParsing() throws DuchessException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(eventFromState);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.continueParsing("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                Util.parameterizeWithoutCommand(\"test /from 12/12/2019 1200\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ) instanceof DisplayCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof EventToState);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 34
    }
  },
  {
    "path": "src/test/java/duchess/parser/states/add/EventModuleStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.DefaultState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "class EventModuleStateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final EventModuleState eventModuleState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    EventModuleStateTest() throws DuchessException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.eventModuleState \u003d new EventModuleState("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                this.parser, \"test\", Util.parseDateTime(\"12/12/2019 1200\"), Util.parseDateTime(\"12/12/2019 1400\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    void parse() throws DuchessException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(eventModuleState);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.parse(\"nil\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof DefaultState);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(eventModuleState);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue(parser.parse(\"CS1231\") instanceof DisplayCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue(parser.getParserState() instanceof EventWeightageState);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    void continueParsing() throws DuchessException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(eventModuleState);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.continueParsing("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                Util.parameterizeWithoutCommand(\"test\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ) instanceof DisplayCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof EventModuleState);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 41,
      "nishanthelango": 2
    }
  },
  {
    "path": "src/test/java/duchess/parser/states/add/EventToStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "class EventToStateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final EventToState eventToState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public EventToStateTest() throws DuchessException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.eventToState \u003d new EventToState(parser, \"test\", Util.parseDateTime(\"12/12/2019 1200\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    void parse() throws DuchessException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(eventToState);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.parse(\"12/12/2019 1200\") instanceof DisplayCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof EventModuleState);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(eventToState);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.parse(\"12/13/2019 1200\") instanceof DisplayCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof EventToState);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    void continueParsing() throws DuchessException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(eventToState);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.continueParsing("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                Util.parameterizeWithoutCommand(\"test /to 12/12/2019 1200\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ) instanceof DisplayCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof EventModuleState);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 39
    }
  },
  {
    "path": "src/test/java/duchess/parser/states/add/EventWeightageStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.states.DefaultState;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "public class EventWeightageStateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private final EventWeightageState eventWeightageState;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    EventWeightageStateTest() throws DuchessException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.eventWeightageState \u003d new EventWeightageState("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                this.parser, \"test\", Util.parseDateTime(\"12/12/2019 1200\"),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                Util.parseDateTime(\"12/12/2019 1400\"), \"CS1231\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        );"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    void parse() throws DuchessException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        parser.setParserState(eventWeightageState);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue(parser.parse(\"nil\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue(parser.getParserState() instanceof DefaultState);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        parser.setParserState(eventWeightageState);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue(parser.parse(\"40\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue(parser.getParserState() instanceof DefaultState);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        parser.setParserState(eventWeightageState);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue(parser.parse(\"101\") instanceof DisplayCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue(parser.getParserState() instanceof EventWeightageState);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        parser.setParserState(eventWeightageState);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue(parser.parse(\"100\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue(parser.getParserState() instanceof DefaultState);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        parser.setParserState(eventWeightageState);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue(parser.parse(\"0\") instanceof AddEventCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue(parser.getParserState() instanceof DefaultState);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        parser.setParserState(eventWeightageState);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue(parser.parse(\"-1\") instanceof DisplayCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue(parser.getParserState() instanceof EventWeightageState);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    void continueParsing() throws DuchessException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        parser.setParserState(eventWeightageState);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue(parser.continueParsing("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                Util.parameterizeWithoutCommand(\"test\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        ) instanceof DisplayCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertTrue(parser.getParserState() instanceof EventWeightageState);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nishanthelango": 60
    }
  },
  {
    "path": "src/test/java/duchess/parser/states/add/ModuleCodeStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "class ModuleCodeStateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final ModuleCodeState moduleCodeState \u003d new ModuleCodeState(parser, \"Discrete Math\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    void parse() throws DuchessException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(moduleCodeState);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.parse(\"CS1231\") instanceof AddModuleCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    void continueParsing() throws DuchessException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(moduleCodeState);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                parser.continueParsing("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        Util.parameterizeWithoutCommand(\"/code CS1231\")) instanceof AddModuleCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 28
    }
  },
  {
    "path": "src/test/java/duchess/parser/states/add/ModuleNameStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states.add;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DisplayCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "class ModuleNameStateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final ModuleNameState moduleNameState \u003d new ModuleNameState(parser);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    void parse() throws DuchessException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(moduleNameState);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.parse(\"Module Name\") instanceof DisplayCommand);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof ModuleCodeState);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    void continueParsing() throws DuchessException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(moduleNameState);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                parser.continueParsing("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        Util.parameterizeWithoutCommand(\"/name Test\")) instanceof DisplayCommand);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(parser.getParserState() instanceof ModuleCodeState);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 30
    }
  },
  {
    "path": "src/test/java/duchess/storage/DetectAnomaliesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "public class DetectAnomaliesTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    List\u003cString\u003e getList(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return List.of(input.split(\" \"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    void clash_returnsTrue() throws DuchessException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        String taskInput \u003d \"meeting /at 12/12/2020 1800 /to 12/12/2020 1900\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Store store \u003d new Store();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Task task \u003d new Event(\"meeting\", Util.parseDateTime(\"12/12/2020 1900\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                Util.parseDateTime(\"12/12/2020 1800\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        store.getTaskList().add(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        for (String str : List.of("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                \"12/12/2020 1830 /to 12/12/2020 1930\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                \"12/12/2020 1730 /to 12/12/2020 1830\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                \"12/12/2020 1730 /to 12/12/2020 1930\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                \"12/12/2020 1800 /to 12/12/2020 1830\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                \"12/12/2020 1900 /to 12/12/2020 1930\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        )) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            assertTrue(store.isClashing(new Event(\"party\", Util.parseDateTime(str.substring(20)),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    Util.parseDateTime(str.substring(0, 15)))));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    void no_clash_returnsFalse() throws DuchessException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Store store \u003d new Store();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Task task \u003d new Event(\"meeting\", Util.parseDateTime(\"12/12/2020 1900\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                Util.parseDateTime(\"12/12/2020 1800\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        store.getTaskList().add(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        for (String str : List.of("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                \"12/12/2020 1930 /to 12/12/2020 2000\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                \"12/12/2020 1630 /to 12/12/2020 1730\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        )) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            assertFalse(store.isClashing(new Event(\"party\", Util.parseDateTime(str.substring(20)),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    Util.parseDateTime(str.substring(0, 15)))));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 8,
      "nishanthelango": 47
    }
  },
  {
    "path": "src/test/java/duchess/storage/StorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muserr"
        },
        "content": "package duchess.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonInclude;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muserr"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import com.fasterxml.jackson.databind.MapperFeature;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muserr"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muserr"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.task.Todo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.Deque;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class StorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private final String emptyTestFilePath \u003d \"testEmptyData.json\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private final String nonEmptyTestFilePath \u003d \"testNonEmptyData.json\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private final String blankTestFilePath \u003d \"testBlankData.json\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private final String unreadableFileMessage"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \u003d \"Unable to read file, continuing with default list.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private final String emptyRedoStackErrorMessage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": "            \u003d \"Redo stack is empty.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private final String emptyUndoStackErrorMessage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": "            \u003d \"Undo stack is empty.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static final String stringToStoreErrorMessage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "            \u003d \"Unable to convert String to Store.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void load_emptyFile_exceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Storage storage \u003d new Storage(blankTestFilePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(getStoreToString(storage.load()).equals(\"\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (DuchessException | ClassCastException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(e.getMessage(), unreadableFileMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void load_nonEmptyFile_noExceptionThrown() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Storage storage \u003d new Storage(nonEmptyTestFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store store \u003d storage.load();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertNotEquals(store, null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(!getStoreToString(store).equals(\"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (DuchessException | ClassCastException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(e.getMessage(), unreadableFileMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void getFirstSnapshot_emptyFile_exceptionThrown() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Storage storage \u003d new Storage(emptyTestFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store store \u003d storage.getFirstSnapshot();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(store, null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(e.getMessage(), emptyRedoStackErrorMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void getLastSnapshot_emptyFile_exceptionThrown() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Storage storage \u003d new Storage(emptyTestFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store store \u003d storage.getLastSnapshot();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(store, null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(e.getMessage(), emptyUndoStackErrorMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void getUndoStack_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Storage storageA \u003d new Storage(emptyTestFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Storage storageB \u003d new Storage(nonEmptyTestFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Deque\u003cString\u003e testUndoStackA \u003d storageA.getUndoStack();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Deque\u003cString\u003e testUndoStackB \u003d storageB.getUndoStack();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(testUndoStackA.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(testUndoStackA !\u003d null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(testUndoStackB.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(testUndoStackB !\u003d null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void getRedoStack_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Storage storageA \u003d new Storage(emptyTestFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Storage storageB \u003d new Storage(nonEmptyTestFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Deque\u003cString\u003e testRedoStackA \u003d storageA.getRedoStack();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Deque\u003cString\u003e testRedoStackB \u003d storageB.getRedoStack();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(testRedoStackA.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(testRedoStackA !\u003d null);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(testRedoStackB.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(testRedoStackB !\u003d null);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void peekUndoStackAsStore_emptyUndoStack_emptyStoreObject() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Storage storage \u003d new Storage(emptyTestFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storage.getUndoStack().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store store \u003d storage.peekUndoStackAsStore();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertNotEquals(store, null);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(e.getMessage(),stringToStoreErrorMessage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void peekUndoStackAsStore_nonEmptyUndoStack_nonEmptyStoreObject() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Storage storage \u003d new Storage(emptyTestFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Store storeA \u003d new Store();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "muserr"
        },
        "content": "        storage.addToUndoStackPush(storeA);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storage.getUndoStack().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store store \u003d storage.peekUndoStackAsStore();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertNotEquals(store, null);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(e.getMessage(),stringToStoreErrorMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void addToRedoStack_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Storage storage \u003d new Storage(emptyTestFilePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Store store \u003d new Store();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "muserr"
        },
        "content": "        storage.addToUndoStackPush(store);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(storage.getUndoStack().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(storage.getRedoStack().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "muserr"
        },
        "content": "        storage.addToRedoStack();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(storage.getUndoStack().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(storage.getRedoStack().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void addToUndoStackPush_validStore_success() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Storage storage \u003d new Storage(nonEmptyTestFilePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store store \u003d storage.load();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storage.getUndoStack().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storage.addToUndoStackPush(store);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storage.getUndoStack().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (DuchessException | ClassCastException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(e.getMessage(), unreadableFileMessage);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void addToUndoStackPush_consecutiveRepeatedStore_unsuccessful() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Storage storage \u003d new Storage(nonEmptyTestFilePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Store storeA \u003d new Store();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Store storeB \u003d new Store();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storage.getUndoStack().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storeA !\u003d null);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storage.addToUndoStackPush(storeA);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storage.getUndoStack().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storeB !\u003d null);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storage.addToUndoStackPush(storeB);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storage.getUndoStack().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (ClassCastException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(e.getMessage(), unreadableFileMessage);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void getLastSnapshot_success() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Storage storage \u003d new Storage(nonEmptyTestFilePath);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Store storeA \u003d storage.load();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Store storeB \u003d new Store();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Task taskA \u003d new Todo(\"Star jumps\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Task taskB \u003d new Todo(\"Jogging with friends.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storeB.getTaskList().add(taskA);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storeB.getTaskList().add(taskB);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storage.getUndoStack().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storage.addToUndoStackPush(storeA);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storage.getUndoStack().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storage.addToUndoStackPush(storeB);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storage.getUndoStack().size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store testStore \u003d storage.getLastSnapshot();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertNotEquals(testStore, null);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storage.getUndoStack().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(getStoreToString(testStore),getStoreToString(storeB));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storage.getUndoStack().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (DuchessException | ClassCastException e) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(e.getMessage(), unreadableFileMessage);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void getFirstSnapshot_success() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Storage storage \u003d new Storage(nonEmptyTestFilePath);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store storeA \u003d storage.load();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store storeB \u003d new Store();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Task taskA \u003d new Todo(\"Star jumps\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Task taskB \u003d new Todo(\"Jogging with friends.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storeB.getTaskList().add(taskA);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storeB.getTaskList().add(taskB);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storage.addToUndoStackPush(storeA);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storage.addToUndoStackPush(storeB);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storage.getUndoStack().size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storage.getRedoStack().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storage.addToRedoStack();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storage.getRedoStack().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storage.getUndoStack().size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "muserr"
        },
        "content": "            // Obtain first object in redoStack."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store testStore \u003d storage.getFirstSnapshot();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertNotEquals(testStore, null);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(storage.getRedoStack().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(getStoreToString(testStore), getStoreToString(storeB));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (DuchessException | ClassCastException e) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(e.getMessage(), unreadableFileMessage);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void save_emptyStore_success() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Storage storage \u003d new Storage(emptyTestFilePath);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store storeBeforeSave \u003d storage.load();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storage.save(storeBeforeSave);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store storeAfterSave \u003d storage.load();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(getStoreToString(storeBeforeSave), getStoreToString(storeAfterSave));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (DuchessException | ClassCastException e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(e.getMessage(), unreadableFileMessage);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void save_nonEmptyStore_success() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Storage storageA \u003d new Storage(emptyTestFilePath);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Storage storageB \u003d new Storage(nonEmptyTestFilePath);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store storeA \u003d new Store();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store storeB \u003d storageB.load();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertNotEquals(getStoreToString(storeA), getStoreToString(storeB));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storageA.save(storeB);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store storeAfterSave \u003d storageA.load();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(getStoreToString(storeAfterSave), getStoreToString(storeB));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "muserr"
        },
        "content": "            // Clear contents of testEmptyData.json"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storageA.save(new Store());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (DuchessException | ClassCastException e) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(e.getMessage(), unreadableFileMessage);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private String getStoreToString(Store store) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "muserr"
        },
        "content": "        String jsonVal;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "muserr"
        },
        "content": "            jsonVal \u003d getObjectMapper().writeValueAsString(store);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (JsonProcessingException e) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            jsonVal \u003d \"\";"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assert (jsonVal.equals(\"\"));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "muserr"
        },
        "content": "        return jsonVal;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private ObjectMapper getObjectMapper() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "muserr"
        },
        "content": "        return new ObjectMapper()"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "muserr"
        },
        "content": "                .enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "muserr"
        },
        "content": "                .disable(MapperFeature.AUTO_DETECT_CREATORS,"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "muserr"
        },
        "content": "                        MapperFeature.AUTO_DETECT_FIELDS,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "muserr"
        },
        "content": "                        MapperFeature.AUTO_DETECT_GETTERS,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "muserr"
        },
        "content": "                        MapperFeature.AUTO_DETECT_IS_GETTERS)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "muserr"
        },
        "content": "                .enable(SerializationFeature.INDENT_OUTPUT)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "muserr"
        },
        "content": "                .setSerializationInclusion(JsonInclude.Include.NON_NULL);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 2,
      "muserr": 308
    }
  },
  {
    "path": "src/test/java/duchess/storage/StoreTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muserr"
        },
        "content": "package duchess.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.task.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.task.Todo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class StoreTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private final String invalidFormatMessage \u003d \"Please enter dates in the format dd/mm/yyyy hhmm\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void returnTaskList_emptyTaskList_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Store store \u003d new Store();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": "        List\u003cTask\u003e testTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertEquals(testTaskList, store.getTaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(store.getTaskList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void returnModuleList_emptyModuleList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Store store \u003d new Store();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muserr"
        },
        "content": "        List\u003cModule\u003e testModuleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertEquals(testModuleList, store.getModuleList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(store.getModuleList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void returnDuchessCalendar_emptyDuchessCalendar_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Store store \u003d new Store();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muserr"
        },
        "content": "        List\u003cCalendarEntry\u003e testDuchessCalendar \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertEquals(testDuchessCalendar, store.getDuchessCalendar());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(store.getDuchessCalendar().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void isClashing_nonClashingTasks_false() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Store store \u003d new Store();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muserr"
        },
        "content": "        String startDateTime \u003d \"02/11/2019 1730\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muserr"
        },
        "content": "        String endDateTime \u003d \"04/11/2019 1800\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Task taskA \u003d new Todo(\"Star jumps\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Task taskB \u003d new Todo(\"Jogging with friends.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Task taskC \u003d new Event(\"Running\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "muserr"
        },
        "content": "                    Util.parseDateTime(endDateTime),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "muserr"
        },
        "content": "                    Util.parseDateTime(startDateTime));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(store.getTaskList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "muserr"
        },
        "content": "            store.getTaskList().add(taskA);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "muserr"
        },
        "content": "            store.getTaskList().add(taskC);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(store.getTaskList().size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertFalse(store.isClashing(taskB));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (DuchessException | DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(e.getMessage(), invalidFormatMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void isClashing_clashingTasks_true() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Store store \u003d new Store();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muserr"
        },
        "content": "        String startDateTime \u003d \"02/11/2019 0800\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muserr"
        },
        "content": "        String endDateTime \u003d \"04/11/2019 1800\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Task taskA \u003d new Event(\"Running\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muserr"
        },
        "content": "                    Util.parseDateTime(endDateTime),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muserr"
        },
        "content": "                    Util.parseDateTime(startDateTime));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Task taskB \u003d new Event(\"Jogging\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muserr"
        },
        "content": "                    Util.parseDateTime(endDateTime),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muserr"
        },
        "content": "                    Util.parseDateTime(startDateTime));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(store.getTaskList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muserr"
        },
        "content": "            store.getTaskList().add(taskA);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(store.getTaskList().size() \u003d\u003d 1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(store.isClashing(taskB));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (DuchessException | DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(e.getMessage(), invalidFormatMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void findModuleByCode_validCodeString_nonNullOptionalValue() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Store store \u003d new Store();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muserr"
        },
        "content": "        final Module moduleA \u003d new Module(\"CS1231\", \"Discrete Mathematics\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muserr"
        },
        "content": "        final Module moduleB \u003d new Module(\"CS2113T\", \"Software Engineering\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "muserr"
        },
        "content": "        store.getModuleList().add(moduleA);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "muserr"
        },
        "content": "        store.getModuleList().add(moduleB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Optional\u003cModule\u003e testModule \u003d Optional.of(moduleA);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertEquals(testModule, store.findModuleByCode(\"CS1231\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void findModuleByCode_inValidCodeString_nullOptionalValue() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Store store \u003d new Store();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "muserr"
        },
        "content": "        final Module moduleA \u003d new Module(\"CS1231\", \"Discrete Mathematics\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "muserr"
        },
        "content": "        final Module moduleB \u003d new Module(\"CS2113T\", \"Software Engineering\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "muserr"
        },
        "content": "        store.getModuleList().add(moduleA);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "muserr"
        },
        "content": "        store.getModuleList().add(moduleB);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Optional\u003cModule\u003e testModule \u003d Optional.empty();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertEquals(testModule, store.findModuleByCode(\"CG2028\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void setTaskList_validTaskList_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Store store \u003d new Store();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "muserr"
        },
        "content": "        List\u003cTask\u003e testTaskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "muserr"
        },
        "content": "        String startDateTime \u003d \"02/11/2019 0800\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "muserr"
        },
        "content": "        String endDateTime \u003d \"04/11/2019 1800\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Task taskA \u003d new Todo(\"Star jumps\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Task taskB \u003d new Todo(\"Jogging with friends.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final Task taskC \u003d new Event(\"Running\","
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "muserr"
        },
        "content": "                    Util.parseDateTime(endDateTime),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "muserr"
        },
        "content": "                    Util.parseDateTime(startDateTime));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(store.getTaskList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "muserr"
        },
        "content": "            testTaskList.add(taskA);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "muserr"
        },
        "content": "            testTaskList.add(taskB);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "muserr"
        },
        "content": "            testTaskList.add(taskC);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(store.getTaskList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(testTaskList.size() \u003d\u003d 3);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "muserr"
        },
        "content": "            store.setTaskList(testTaskList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(testTaskList, store.getTaskList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (DuchessException | DateTimeParseException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(e.getMessage(), invalidFormatMessage);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void setModuleList_validModuleList_success() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Store store \u003d new Store();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "muserr"
        },
        "content": "        List\u003cModule\u003e testModuleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "muserr"
        },
        "content": "        final Module moduleA \u003d new Module(\"CS1231\", \"Discrete Mathematics\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "muserr"
        },
        "content": "        final Module moduleB \u003d new Module(\"CS2113T\", \"Software Engineering\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "muserr"
        },
        "content": "        final Module moduleC \u003d new Module(\"CG2028\", \"Computer Organization\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "muserr"
        },
        "content": "        final Module moduleD \u003d new Module(\"CG2027\", \"Transistor Level Digital Circuits\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(store.getTaskList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "muserr"
        },
        "content": "        testModuleList.add(moduleA);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "muserr"
        },
        "content": "        testModuleList.add(moduleB);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "muserr"
        },
        "content": "        testModuleList.add(moduleC);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "muserr"
        },
        "content": "        testModuleList.add(moduleD);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(store.getModuleList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertTrue(testModuleList.size() \u003d\u003d 4);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "muserr"
        },
        "content": "        store.setModuleList(testModuleList);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assertEquals(testModuleList, store.getModuleList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void setDuchessCalendar_validDuchessCalendar_success() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Store store \u003d new Store();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "muserr"
        },
        "content": "        List\u003cCalendarEntry\u003e testDuchessCalendar \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final CalendarEntry entryA \u003d new CalendarEntry(Util.parseDate(\"03/11/2019\"), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final CalendarEntry entryB \u003d new CalendarEntry(Util.parseDate(\"04/11/2019\"), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "muserr"
        },
        "content": "            final CalendarEntry entryC \u003d new CalendarEntry(Util.parseDate(\"06/11/2019\"), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(store.getTaskList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "muserr"
        },
        "content": "            testDuchessCalendar.add(entryA);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "muserr"
        },
        "content": "            testDuchessCalendar.add(entryB);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "muserr"
        },
        "content": "            testDuchessCalendar.add(entryC);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(store.getDuchessCalendar().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertTrue(testDuchessCalendar.size() \u003d\u003d 3);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "muserr"
        },
        "content": "            store.setDuchessCalendar(testDuchessCalendar);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(testDuchessCalendar, store.getDuchessCalendar());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "muserr"
        },
        "content": "            assertEquals(e.getMessage(), new String());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muserr": 213
    }
  }
]
