[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.8.4\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "group \u0027seedu.duchess\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00271.1.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    archiveBaseName \u003d \"duchess\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveVersion \u003d \"1.1.0\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.9.9.3\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.9.9\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        })"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "javadoc {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    options.encoding \u003d \u0027UTF-8\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    standardInput System.in"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "mohideenik": 45,
      "-": 37
    }
  },
  {
    "path": "settings.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "rootProject.name \u003d \u0027Duchess\u0027"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 1
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.task.DuchessLog;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Store store;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an instant of Duke to be executed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath name of file to store tasks"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Duke(String filePath) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser \u003d new Parser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            store \u003d storage.load();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": "            // Adds the very first copy of store into undoStack"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "            storage.addToUndoStackPush(store);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } catch (DuchessException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            store \u003d new Store();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Begins the execution of Duke."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void run() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.showWelcome();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muserr"
        },
        "content": "        DuchessLog duchessLog \u003d new DuchessLog();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muserr"
        },
        "content": "                duchessLog.add(fullCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.beginBlock();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                Command c \u003d parser.parse(fullCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                DuchessLog.addValidCommands(c);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muserr"
        },
        "content": "                c.execute(store, ui, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muserr"
        },
        "content": "                // Take snapshot here, you save copies of Store store here"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muserr"
        },
        "content": "                storage.addToUndoStackPush(store);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            } catch (DuchessException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.showError(e.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                ui.endBlock();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        new Duke(\"data.json\").run();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 2,
      "mohideenik": 10,
      "nishanthelango": 3,
      "muserr": 16,
      "-": 41
    }
  },
  {
    "path": "src/main/java/duchess/exceptions/DuchessException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "package duchess.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "public class DuchessException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public DuchessException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nishanthelango": 7
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/AddDeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Create a command to add a deadline."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param description String containing description of deadline task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param deadline    LocalDateTime object of deadline task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public AddDeadlineCommand(String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public AddDeadlineCommand(String description, LocalDateTime deadline, String moduleCode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this(description, deadline);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Task task \u003d new Deadline(description, deadline);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (moduleCode !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            Optional\u003cModule\u003e module \u003d store.findModuleByCode(moduleCode);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            task.setModule(module.orElseThrow(() -\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    new DuchessException(\"Unable to find given module.\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        store.getTaskList().add(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ui.showTaskAdded(store.getTaskList(), task);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        storage.save(store);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 7,
      "mohideenik": 18,
      "nishanthelango": 24
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/AddEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Creates a command to add an event."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param description description of Event task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param end         end time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param start       start time"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public AddEventCommand(String description, LocalDateTime end, LocalDateTime start) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public AddEventCommand(String description, LocalDateTime end, LocalDateTime start, String moduleCode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this(description, end, start);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Event task \u003d new Event(description, end, start);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (moduleCode !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            Optional\u003cModule\u003e module \u003d store.findModuleByCode(moduleCode);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            task.setModule(module.orElseThrow(() -\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    new DuchessException(\"Unable to find given module.\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (store.isClashing(task)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Unable to add event - clash found.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        store.getTaskList().add(task);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ui.showTaskAdded(store.getTaskList(), task);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        storage.save(store);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 4,
      "mohideenik": 20,
      "nishanthelango": 30
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/AddModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private String moduleName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Create a command to add a module."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param words arguments supplied by the user"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public AddModuleCommand(List\u003cString\u003e words) throws DuchessException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (words.size() \u003c 2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Usage: add modules \u003cmodule code\u003e \u003cmodule name\u003e\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        moduleCode \u003d words.get(0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        moduleName \u003d String.join(\" \", words.subList(1, words.size()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Module module \u003d new Module(moduleCode, moduleName);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        store.getModuleList().add(module);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ui.showModuleAdded(module, store.getModuleList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 1,
      "mohideenik": 30,
      "nishanthelango": 4
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/AddTodoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private String moduleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public AddTodoCommand(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public AddTodoCommand(String description, String moduleCode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (moduleCode !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            task \u003d new Todo(description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            Optional\u003cModule\u003e module \u003d store.findModuleByCode(moduleCode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            task.setModule(module.orElseThrow(() -\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    new DuchessException(\"Unable to find given module.\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            ));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            task \u003d new Todo(description);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        store.getTaskList().add(task);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ui.showTaskAdded(store.getTaskList(), task);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        storage.save(store);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 7,
      "mohideenik": 20,
      "nishanthelango": 16
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/ByeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Bids users farewell."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param store the store"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param ui Userinterface object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param storage Storage object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException Exception thrown when duchess.storage not found"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.isExit \u003d true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ui.showBye();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 5,
      "mohideenik": 9,
      "nishanthelango": 2,
      "muserr": 6
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    protected boolean isExit;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public abstract void execute(Store store, Ui ui, Storage storage) throws DuchessException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 6,
      "mohideenik": 8,
      "nishanthelango": 2
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/DeleteModuleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private List\u003cString\u003e words;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public DeleteModuleCommand(List\u003cString\u003e words) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.words \u003d words;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            int moduleNo \u003d Integer.parseInt(words.get(1)) - 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            Module toRemove \u003d store.getModuleList().get(moduleNo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            List\u003cTask\u003e tasks \u003d store.getTaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            List\u003cTask\u003e associatedTasks \u003d tasks.stream()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    .filter(task -\u003e task.getModule().equals(Optional.of(toRemove)))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            if (associatedTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                store.getModuleList().remove(moduleNo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                ui.showDeletedModule(toRemove);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                storage.save(store);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                ui.showUnableToDeleteModuleMsg(associatedTasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            throw new DuchessException(\"Please supply a number. Eg: done 2\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            throw new DuchessException(\"Please supply a valid number.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 43
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/DeleteTaskCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private List\u003cString\u003e words;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public DeleteTaskCommand(List\u003cString\u003e words) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.words \u003d words;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Deletes a user specified task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param store the store"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param ui Userinterface object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param storage Storage object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @throws DuchessException Exception thrown when errors besides invalid format and index are found"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            int taskNo \u003d Integer.parseInt(words.get(1)) - 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            Task toRemove \u003d store.getTaskList().get(taskNo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            store.getTaskList().remove(taskNo);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            ui.showDeletedTask(store.getTaskList(), toRemove);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            storage.save(store);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Please supply a number. Eg: done 2\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Please supply a valid number.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 7,
      "mohideenik": 23,
      "nishanthelango": 5,
      "muserr": 6
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private int taskNo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public DoneCommand(int taskNo) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.taskNo \u003d taskNo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            Task task \u003d store.getTaskList().get(taskNo);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            task.setDone(true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            ui.showDoneTask(task);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            storage.save(store);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Please supply a valid number.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 5,
      "mohideenik": 16,
      "nishanthelango": 6
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private List\u003cString\u003e words;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Returns the length of the longest common subsequence of 2 Strings."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param a the first String"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param b the second String"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @return the length of the longest common subsequence"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private int longestCommonSubsequence(String a, String b) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        int[][] table \u003d new int[a.length() + 1][b.length() + 1];"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        for (int i \u003d 0; i \u003c table.length - 1; i++) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            for (int j \u003d 0; j \u003c table[0].length - 1; j++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                if (a.charAt(i) \u003d\u003d b.charAt(j)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    table[i + 1][j + 1] \u003d table[i][j] + 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    table[i + 1][j + 1] \u003d Math.max(table[i][j + 1], table[i + 1][j]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return table[a.length()][b.length()];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public FindCommand(List\u003cString\u003e words) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.words \u003d words;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (words.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Please enter at least a keyword to search.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            String searchTerm \u003d String.join(\" \", words.subList(0, words.size())).toLowerCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            List\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            If search term is enclosed by double quotation marks,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            search for exact matches."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "             */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            if (!\"\\\"\".equals(searchTerm) \u0026\u0026 searchTerm.charAt(0) \u003d\u003d \u0027\"\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    \u0026\u0026 searchTerm.charAt(searchTerm.length() - 1) \u003d\u003d \u0027\"\u0027) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                filteredTasks \u003d store"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        .getTaskList()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        .filter(task -\u003e task.getDescription()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                                .equals(searchTerm.substring(1, searchTerm.length() - 1)))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            Search for task descriptions with longest common subsequence of length"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            equal to at least 2 less than the length of the search term."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "             */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                String trimmedSearchTerm \u003d searchTerm.replaceAll(\" \", \"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                filteredTasks \u003d store"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        .getTaskList().stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        .filter(task -\u003e longestCommonSubsequence(task.getDescription().toLowerCase()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                                .replaceAll(\" \", \"\"), trimmedSearchTerm)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                                \u003e\u003d trimmedSearchTerm.length() - 2)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                /*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                Checks if the task description contains the exact search term,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                if the search term is too short (less than 3 chars)."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                 */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                if (trimmedSearchTerm.length() \u003c\u003d 2) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    filteredTasks \u003d filteredTasks.stream().filter(task -\u003e task.getDescription().toLowerCase()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                            .contains(trimmedSearchTerm)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                /*"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                Sort the filtered tasks based on similarity to searchTerm."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                 */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                filteredTasks.sort(Comparator"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                        .comparingInt(task -\u003e -longestCommonSubsequence(task.getDescription().toLowerCase()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                                .replaceAll(\" \", \"\"), trimmedSearchTerm)));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            if (filteredTasks.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                throw new DuchessException(\"There are no matching tasks.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                ui.showSearchResult(filteredTasks);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 6,
      "mohideenik": 17,
      "nishanthelango": 72,
      "muserr": 1
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/ListModulesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class ListModulesCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ui.showModuleList(store.getModuleList());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 8,
      "mohideenik": 3,
      "nishanthelango": 2
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/ListTasksCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class ListTasksCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        ui.showTaskList(store.getTaskList());"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 8,
      "mohideenik": 3,
      "nishanthelango": 2
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/LogCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muserr"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.task.DuchessLog;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": " * Command to display input history."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class LogCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": "        ui.showUserHistory(DuchessLog.getFullLog());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nishanthelango": 2,
      "muserr": 16
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/RedoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muserr"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private int redoCounter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Checks if undo command contains additional parameters."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param words additional parameters for undo"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @throws DuchessException throws exceptions if invalid command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public RedoCommand(List\u003cString\u003e words) throws DuchessException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (words.size() !\u003d 1 \u0026\u0026 words.size() !\u003d 0) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(\"Usage: redo [number]\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (words.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "            redoCounter \u003d Integer.parseInt(words.get(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (words.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": "            redoCounter \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (redoCounter \u003e 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            // duchess.storage.getFirstSnapshot();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muserr"
        },
        "content": "            while (redoCounter \u003e 0 \u0026\u0026 storage.getRedoStack().size() \u003e 0) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": "                setToNextStore(store, storage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muserr"
        },
        "content": "                redoCounter--;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muserr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            // duchess.storage.getFirstSnapshot();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muserr"
        },
        "content": "            setToNextStore(store, storage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muserr"
        },
        "content": "        // showUndo should only be placed after execution of undo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muserr"
        },
        "content": "        ui.showRedo(redoCounter);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private void setToNextStore(Store store, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        // Obtain Store data from duchess.storage Stack"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Store prevStore \u003d storage.getFirstSnapshot();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muserr"
        },
        "content": "        storage.save(prevStore);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muserr"
        },
        "content": "        // Obtaining store from stack"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Store newStore \u003d storage.load();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muserr"
        },
        "content": "        store.setTaskList(newStore.getTaskList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muserr"
        },
        "content": "        store.setModuleList(newStore.getModuleList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muserr"
        },
        "content": "        // ui.showTaskList(store.getTaskList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 3,
      "muserr": 54
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/ReminderCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": " * Searches Tasklist and filters out deadline objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class ReminderCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays Deadline objects to user in ascending order."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param store List containing tasks"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param ui Userinterface object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param storage Storage object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException Exception thrown when duchess.storage not found"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        List\u003cTask\u003e reminderList \u003d addTimedActivities(store.getTaskList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Collections.sort(reminderList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "        display(reminderList, ui);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Returns a List of Task objects."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Adds objects of type Deadline and Event to reminderList."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param tasks list of tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private List\u003cTask\u003e addTimedActivities(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return tasks.stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .map(Task::getReminder)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .flatMap(Optional::stream)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muserr"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays deadlines to user."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private void display(List\u003cTask\u003e reminderList, Ui ui) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (reminderList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muserr"
        },
        "content": "            ui.showNoDeadlines();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muserr"
        },
        "content": "            ui.showDeadlines(reminderList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 2,
      "mohideenik": 11,
      "nishanthelango": 3,
      "muserr": 41
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/SnoozeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class SnoozeCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private List\u003cString\u003e words;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public SnoozeCommand(List\u003cString\u003e words) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.words \u003d words;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            int taskNo \u003d Integer.parseInt(words.get(0)) - 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            Task task \u003d store.getTaskList().get(taskNo);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            task.snooze();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            ui.showSnoozedTask(task);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            storage.save(store);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Please supply a number. Eg: done 2\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Please supply a valid number.\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 3,
      "mohideenik": 26,
      "nishanthelango": 4
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/UndoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muserr"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private int undoCounter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Checks if undo command contains additional parameters."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param words additional parameters for undo"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @throws DuchessException throws exceptions if invalid command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public UndoCommand(List\u003cString\u003e words) throws DuchessException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (words.size() !\u003d 1 \u0026\u0026 words.size() !\u003d 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(\"Usage: undo [number]\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (words.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": "            undoCounter \u003d Integer.parseInt(words.get(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (words.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": "            undoCounter \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (undoCounter \u003e 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": "            while (undoCounter \u003e 0 \u0026\u0026 storage.getUndoStack().size() \u003e 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muserr"
        },
        "content": "                setToPreviousStore(store, storage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muserr"
        },
        "content": "                undoCounter--;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (undoCounter \u003d\u003d 1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muserr"
        },
        "content": "            if (storage.getUndoStack().size() \u003d\u003d 2) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muserr"
        },
        "content": "                setToPreviousStore(store, storage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muserr"
        },
        "content": "            } else if (storage.getUndoStack().size() \u003e 1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "muserr"
        },
        "content": "                setToPreviousStore(store, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "muserr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "muserr"
        },
        "content": "        // showUndo should only be placed after execution of undo."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muserr"
        },
        "content": "        ui.showUndo(undoCounter);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private void setToPreviousStore(Store store, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muserr"
        },
        "content": "        storage.getLastSnapshot();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "muserr"
        },
        "content": "        storage.save(storage.peekUndoStackAsStore());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "muserr"
        },
        "content": "        // Obtaining store from stack"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Store newStore \u003d storage.load();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "muserr"
        },
        "content": "        assert (store.equals(newStore));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "muserr"
        },
        "content": "        store.setTaskList(newStore.getTaskList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "muserr"
        },
        "content": "        store.setModuleList(newStore.getModuleList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muserr": 60
    }
  },
  {
    "path": "src/main/java/duchess/logic/commands/ViewScheduleCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.TimeFrame;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.AcademicContext;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class ViewScheduleCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private String view;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private TimeFrame timeFrame;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private AcademicContext academicContext;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Constructor for class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param date Date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param view Either week or day"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @throws DuchessException Exception thrown for invalid or missing date time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public ViewScheduleCommand(String date, String view) throws DuchessException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.view \u003d view;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        LocalDateTime start \u003d processDate(\" 0000\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        LocalDateTime end \u003d processDate(\" 2359\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.academicContext \u003d new AcademicContext(start);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.timeFrame \u003d new TimeFrame(start, end);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Process date by setting time of LocalDateTime to either 0000 or 2359."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Also sets LocalDateTime to nearest previous or same Monday date/ nearest"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * next or same Friday date if user desires week view."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param time either \" 0000\" or \" 2359\" to indicate timeframe"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return LocalDateTime"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @throws DuchessException Thrown for invalid or missing date time and command format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime processDate(String time) throws DuchessException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            boolean isWeek \u003d view.equals(\"week\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            boolean isStartOfDay \u003d time.equals(\" 0000\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            boolean isStartOfWeek \u003d isWeek \u0026\u0026 isStartOfDay;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            boolean isEndOfWeek \u003d isWeek \u0026\u0026 !isStartOfDay;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            LocalDateTime localDateTime \u003d Util.parseDateTime(date + time);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            if (isStartOfWeek) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                localDateTime \u003d localDateTime.with(TemporalAdjusters.previousOrSame(DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            } else if (isEndOfWeek) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                localDateTime \u003d localDateTime.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return localDateTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Invalid date format. Please follow dd/MM/yyyy.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Format for viewing schedule: schedule /for \u003cdate\u003e view \u003cview\u003e\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void execute(Store store, Ui ui, Storage storage) throws DuchessException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        List\u003cTask\u003e tasksForToday \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                store.getTaskList().stream()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        .filter(task -\u003e task.getTimeFrame().fallsWithin(this.timeFrame))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        .collect(Collectors.toList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (tasksForToday.size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"There are no tasks in the schedule.\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else if (view.equals(\"week\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            date \u003d \"the week of \" + date;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        Collections.sort(tasksForToday);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        ui.showScheduleResult(tasksForToday, date, academicContext.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 61,
      "mohideenik": 12,
      "nishanthelango": 13
    }
  },
  {
    "path": "src/main/java/duchess/model/Module.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private String code;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Module(@JsonProperty(\"code\") String code, @JsonProperty(\"name\") String name) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.code + \" \" + this.name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public boolean isOfCode(String code) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.code.equalsIgnoreCase(code);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public boolean equals(Module that) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.code.equalsIgnoreCase(that.code);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"name\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"code\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 38
    }
  },
  {
    "path": "src/main/java/duchess/model/TimeFrame.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class TimeFrame implements Comparable\u003cTimeFrame\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Start and end points of the timeframe."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Marks timeframe as indefinite, i.e. things that"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * don\u0027t have a definite start or end time."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private boolean isIndefinite;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Marks time frame as instantaneous."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private boolean isInstantaneous;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Creates a TimeFrame that represents an interval in time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param start Starting time"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param end   Ending time"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public TimeFrame(LocalDateTime start, LocalDateTime end) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.isIndefinite \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.isInstantaneous \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private TimeFrame(LocalDateTime time) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.start \u003d time;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.end \u003d time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.isIndefinite \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.isInstantaneous \u003d true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private TimeFrame() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.isIndefinite \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.isInstantaneous \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public static TimeFrame ofInstantaneousTask(LocalDateTime time) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return new TimeFrame(time);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static TimeFrame ofTimelessTask() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return new TimeFrame();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns true if this TimeFrame lies within the other TimeFrame."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param that the other TimeFrame"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public boolean fallsWithin(TimeFrame that) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (this.isIndefinite || that.isIndefinite) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return !(this.end.isBefore(that.start) || that.end.isBefore(this.start));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns true if this TimeFrame clashes with the other TimeFrame."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param that the other TimeFrame"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public boolean clashesWith(TimeFrame that) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (this.isInstantaneous || that.isInstantaneous) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.fallsWithin(that);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public LocalDateTime getStart() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return start;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public int compareTo(TimeFrame that) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (this.isIndefinite \u0026\u0026 that.isIndefinite) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else if (this.isIndefinite) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else if (that.isIndefinite) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else if (!this.start.equals(that.start)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return this.start.compareTo(that.start);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return this.end.compareTo(that.end);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 31,
      "mohideenik": 62,
      "nishanthelango": 7
    }
  },
  {
    "path": "src/main/java/duchess/model/calendar/AcademicContext.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.temporal.TemporalAdjusters;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class AcademicContext {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private LocalDate localDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private LocalDate startDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private LocalDate endDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private LocalDate academicStartDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private LocalDate academicEndDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private String academicYear;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private String academicWeek;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private String semester;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Set academic context based on given date."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param localDateTime date"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public AcademicContext(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.localDate \u003d localDateTime.toLocalDate();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.startDate \u003d localDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.endDate \u003d localDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.semester \u003d processSemester();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.academicWeek \u003d processAcademicWeek();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.academicYear \u003d processAcademicYear();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Set academic context based on given date."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param localDate date"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public AcademicContext(LocalDate localDate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.localDate \u003d localDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.startDate \u003d localDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.endDate \u003d localDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.semester \u003d processSemester();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.academicWeek \u003d processAcademicWeek();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.academicYear \u003d processAcademicYear();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Returns start or end date of a semester."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param month Month semester starts in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param end   Start or end of semester"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @return LocalDate with year corresponding to constructor parameter localDateTime"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private LocalDate processDate(Month month, boolean end) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate temp \u003d localDate.with(month).with(TemporalAdjusters.dayOfWeekInMonth(2, DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (end) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            temp \u003d temp.with(TemporalAdjusters.next(DayOfWeek.SUNDAY)).plusWeeks(16);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private String processSemester() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate semOneStart \u003d processDate(Month.AUGUST, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate semOneEnd \u003d processDate(Month.AUGUST, true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate semTwoStart \u003d processDate(Month.JANUARY, false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        LocalDate semTwoEnd \u003d processDate(Month.JANUARY, true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.academicStartDate \u003d semOneStart;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.academicEndDate \u003d semOneStart.plusYears(1).minusDays(1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        boolean isSemesterOne \u003d localDate.compareTo(semOneStart) \u003e\u003d 0 \u0026\u0026 localDate.compareTo(semOneEnd) \u003c\u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        boolean isSemesterTwo \u003d localDate.compareTo(semTwoStart) \u003e\u003d 0 \u0026\u0026 localDate.compareTo(semTwoEnd) \u003c\u003d 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        boolean isSummerBreak \u003d localDate.isAfter(semTwoEnd) \u0026\u0026 localDate.isBefore(semOneStart);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (isSemesterOne) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            this.startDate \u003d semOneStart;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return \"Semester 1\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else if (isSemesterTwo) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            this.startDate \u003d semTwoStart;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return \"Semester 2\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else if (isSummerBreak) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            this.endDate \u003d semOneStart;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return \"Summer Break\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (localDate.getMonth() \u003d\u003d Month.DECEMBER) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            this.endDate \u003d semTwoStart.plusYears(1).with(TemporalAdjusters.dayOfWeekInMonth(2, DayOfWeek.MONDAY));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            this.endDate \u003d semTwoStart;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return \"Winter Break\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private String processAcademicWeek() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        boolean isSchoolTerm \u003d semester.equals(\"Semester 1\") || semester.equals(\"Semester 2\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        long daysBetween \u003d ChronoUnit.DAYS.between(startDate, endDate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (isSchoolTerm) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            daysBetween++;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        final double week \u003d 7.0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        int currWeek \u003d (int) Math.ceil(daysBetween / week);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (isSchoolTerm) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            switch (currWeek) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            case 7:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                return \"Recess Week\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            case 8:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            case 9:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            case 10:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            case 11:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            case 12:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            case 13:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            case 14:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                return \"W\" + (currWeek - 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            case 15:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                return \"Reading Week\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            case 16:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            case 17:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                return \"Examinations\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                return \"W\" + currWeek;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (currWeek \u003d\u003d 1) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return \"last week of break before a new semester starts\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return currWeek + \" weeks left to the next semester\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private String processAcademicYear() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        int currYear \u003d localDate.getYear();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        boolean isFirstHalf \u003d semester.equals(\"Semester 1\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                || (semester.equals(\"Winter Break\") \u0026\u0026 localDate.getMonth() \u003d\u003d Month.DECEMBER);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        if (isFirstHalf) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return \"AY\" + currYear + \"/\" + (currYear + 1);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return \"AY\" + (currYear - 1) + \"/\" + currYear;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return academicYear + \", \" + semester + \", \" + academicWeek;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public LocalDate getAcademicStartDate() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return academicStartDate;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public LocalDate getAcademicEndDate() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return academicEndDate;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 152
    }
  },
  {
    "path": "src/main/java/duchess/model/calendar/CalendarEntry.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class CalendarEntry {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private Map\u003cLocalTime, List\u003cString\u003e\u003e entries;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Initialises a TreeMap with keys of hourly increment from 0000 to 2300, and null values."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public CalendarEntry() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.entries \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (LocalTime counter \u003d LocalTime.MIN; counter.isBefore(LocalTime.MIDNIGHT); counter \u003d counter.plusHours(1)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            List\u003cString\u003e strList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            this.entries.put(counter, strList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 22
    }
  },
  {
    "path": "src/main/java/duchess/model/calendar/CalendarManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class CalendarManager {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static Map\u003cLocalDate, CalendarEntry\u003e duchessCalendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static final LocalDate calendarStart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private static final LocalDate calendarEnd;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private Map\u003cLocalDate, CalendarEntry\u003e view;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        AcademicContext academicContext \u003d new AcademicContext(LocalDate.now());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        calendarStart \u003d academicContext.getAcademicStartDate();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        calendarEnd \u003d academicContext.getAcademicEndDate();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public CalendarManager() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        populateCalendar();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private void populateCalendar() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        duchessCalendar \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        for (LocalDate hashKey \u003d calendarStart; hashKey.isAfter(calendarEnd); hashKey \u003d hashKey.plusDays(1)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            CalendarEntry calendarEntry \u003d new CalendarEntry();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            duchessCalendar.put(hashKey, calendarEntry);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public static Map\u003cLocalDate, CalendarEntry\u003e getDuchessCalendar() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return duchessCalendar;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "limsiying": 35
    }
  },
  {
    "path": "src/main/java/duchess/model/task/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.TimeFrame;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public Deadline(String description, LocalDateTime deadline) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void snooze() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        deadline \u003d deadline.plusWeeks(1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Optional\u003cTask\u003e getReminder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return Optional.of(this);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public TimeFrame getTimeFrame() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return TimeFrame.ofInstantaneousTask(this.deadline);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                \"[D]%s %s (by: %s)\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                super.toString(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                this.description,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                Util.formatDateTime(this.deadline)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonSetter(\"deadline\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void setDeadline(String deadline) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.deadline \u003d LocalDateTime.parse(deadline);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"deadline\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return deadline.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 4,
      "mohideenik": 37,
      "nishanthelango": 9,
      "muserr": 3
    }
  },
  {
    "path": "src/main/java/duchess/model/task/DuchessLog.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "muserr"
        },
        "content": "package duchess.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class DuchessLog {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static List\u003cString\u003e duchessLog;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private static List\u003cCommand\u003e validDuchessLog;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public DuchessLog() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": "        duchessLog \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": "        validDuchessLog \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void add(String input) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "muserr"
        },
        "content": "        duchessLog.add(input);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public static void addValidCommands(Command command) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": "        validDuchessLog.add(command);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public static List\u003cString\u003e getFullLog() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": "        return duchessLog;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public static List\u003cCommand\u003e getValidCommandLog() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "        return validDuchessLog;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "muserr": 33
    }
  },
  {
    "path": "src/main/java/duchess/model/task/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.TimeFrame;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime end;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    private LocalDateTime start;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * Creates an event task."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param description description of event task"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param end end time"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @param start start time"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @throws DuchessException if end time is before start time"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public Event(String description, LocalDateTime end, LocalDateTime start) throws DuchessException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        if (end.isBefore(start)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Start datetime cannot be after end datetime.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.end \u003d end;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.start \u003d start;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public TimeFrame getTimeFrame() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return new TimeFrame(start, end);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void snooze() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        start \u003d start.plusWeeks(1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        end \u003d end.plusWeeks(1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Optional\u003cTask\u003e getReminder() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return Optional.of(this);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Constructor for Jackson."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param start start time"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param end   end time"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Event("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            @JsonProperty(\"start\") String start,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            @JsonProperty(\"end\") String end"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.start \u003d LocalDateTime.parse(start);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.end \u003d LocalDateTime.parse(end);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return String.format(\"[E]%s %s (at: %s to %s)\", super.toString(), this.description,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                Util.formatDateTime(this.start), Util.formatDateTime(this.end));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @JsonGetter(\"description\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"end\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public String getEnd() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return end.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"start\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public String getStart() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return start.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 4,
      "mohideenik": 42,
      "nishanthelango": 36,
      "muserr": 3
    }
  },
  {
    "path": "src/main/java/duchess/model/task/Task.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.TimeFrame;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public abstract class Task implements Comparable\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Optional\u003cModule\u003e module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Task() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.module \u003d Optional.empty();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public boolean clashesWith(Task that) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.getTimeFrame().clashesWith(that.getTimeFrame());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Optional\u003cModule\u003e getModule() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                \"[\" + (this.isDone ? \"✓\" : \"✘\") + \"]\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        + module.map(m -\u003e \"[\" + m.getCode() + \"]\").orElse(\"\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public int compareTo(Task that) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.getTimeFrame().compareTo(that.getTimeFrame());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonSetter(\"description\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonSetter(\"module\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void setModule(Module module) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.module \u003d Optional.ofNullable(module);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"module\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Module getRawtModule() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.module.orElse(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"done\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"description\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonSetter(\"done\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void setDone(boolean done) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        isDone \u003d done;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public abstract TimeFrame getTimeFrame();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public abstract void snooze() throws DuchessException;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public abstract Optional\u003cTask\u003e getReminder();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 5,
      "mohideenik": 69,
      "nishanthelango": 3
    }
  },
  {
    "path": "src/main/java/duchess/model/task/Todo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.TimeFrame;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return String.format(\"[T]%s %s\", super.toString(), this.description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public TimeFrame getTimeFrame() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return TimeFrame.ofTimelessTask();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void snooze() throws DuchessException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        throw new DuchessException(\"You can\u0027t snooze that task.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Optional\u003cTask\u003e getReminder() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Todo() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 6,
      "mohideenik": 24,
      "nishanthelango": 5,
      "muserr": 3
    }
  },
  {
    "path": "src/main/java/duchess/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.DefaultState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Used for list command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static String TASKS_KEYWORD \u003d \"tasks\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static String MODULES_KEYWORD \u003d \"modules\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Usage for commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static String LIST_USAGE \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \"Usage: list (tasks | modules)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private ParserState parserState;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Initializes the duchess.parser."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parserState \u003d new DefaultState(this);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns the command to execute in response to the user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param input the raw user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the command to execute"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException if the user input is invalid"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command parse(String input) throws DuchessException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.parserState.parse(input);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Sets the duchess.parser state."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param newState the state to set the duchess.parser to"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void setParserState(ParserState newState) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parserState \u003d newState;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 9,
      "mohideenik": 42,
      "muserr": 1
    }
  },
  {
    "path": "src/main/java/duchess/parser/Util.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " * Collection of helpful functions to parse user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class Util {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private static final String INVALID_FORMAT_MESSAGE \u003d \"Please enter dates in the format dd/mm/yyyy hhmm\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private static final DateTimeFormatter formatter \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/uuuu HHmm\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Util() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        // Note that this class is not meant to be instantiated"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        // similar to the Math class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        //"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        // It\u0027s simply a collection of utility functions."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Parses a given string and returns a {@code LocalDateTime} object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param dateTime the string to parse"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return {@code LocalDateTime} obtained by parsing the supplied string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException if the supplied string is formatted incorrectly"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTime) throws DuchessException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return LocalDateTime.parse(dateTime, formatter);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            throw new DuchessException(INVALID_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Parses a list of string and returns a {@code LocalDateTime} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param tokens the datetime string split at space"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param offset the offset of the datetime tokens from the beginning of the list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return {@code LocalDateTime} object obtained by parsing the supplied tokens"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException if the format is invalid or there are insufficient tokens to parse"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static LocalDateTime parseDateTime(List\u003cString\u003e tokens, int offset) throws DuchessException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            String dateTime \u003d tokens.get(offset) + \" \" + tokens.get(offset + 1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return parseDateTime(dateTime);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            throw new DuchessException(INVALID_FORMAT_MESSAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns a {@code String} from a {@code LocalDateTime} object with the desired formatting."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param dateTime the object to format"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the formatted string"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static String formatDateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return formatter.format(dateTime);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns a map mapping the parameter to its corresponding values from user input."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param input the raw input from the user"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the mapping of parameter to values"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static TreeMap\u003cString, String\u003e parameterize(String input) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        TreeMap\u003cString, String\u003e mappedTokens \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        List\u003cString\u003e tokens \u003d List.of(input.split(\" \"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        String currentParameter \u003d \"general\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        List\u003cString\u003e collectedTokens \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        for (String token : tokens) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            if (!mappedTokens.containsKey(\"command\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                mappedTokens.put(\"command\", token);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } else if (token.charAt(0) \u003d\u003d \u0027/\u0027) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                mappedTokens.put("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        currentParameter,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        String.join(\" \", collectedTokens)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                currentParameter \u003d token.substring(1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                collectedTokens \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                collectedTokens.add(token);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        mappedTokens.put("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                currentParameter,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                String.join(\" \", collectedTokens)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return mappedTokens;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 107
    }
  },
  {
    "path": "src/main/java/duchess/parser/commands/ListCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.ListModulesCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.ListTasksCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class ListCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    // Not meant to be instantiated"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private ListCommandParser() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns a command to list user\u0027s resources."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param parameters the processed user input"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the command to execute"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException if the input is invalid"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public static Command parse(Map\u003cString, String\u003e parameters) throws DuchessException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return Optional"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .ofNullable(parameters.get(\"general\"))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .map(keyword -\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    if (keyword.equalsIgnoreCase(Parser.TASKS_KEYWORD)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        return new ListTasksCommand();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    } else if (keyword.equalsIgnoreCase(Parser.MODULES_KEYWORD)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        return new ListModulesCommand();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        return null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                }).orElseThrow(() -\u003e new DuchessException(Parser.LIST_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 1,
      "mohideenik": 36
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/DefaultState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.AddTodoCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.ByeCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DeleteTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.LogCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.SnoozeCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.ViewScheduleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.commands.ListCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class DefaultState implements ParserState {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private Parser parser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public DefaultState(Parser parser) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser \u003d parser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns the command to execute after parsing user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param input the user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @return the command to execute"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @throws DuchessException the exception if user input is invalid"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Command parse(String input) throws DuchessException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        List\u003cString\u003e words \u003d Arrays.asList(input.split(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        String keyword \u003d words.get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        List\u003cString\u003e arguments \u003d words.subList(1, words.size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Map\u003cString, String\u003e parameters \u003d Util.parameterize(input);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        switch (keyword) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return ListCommandParser.parse(parameters);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        case \"add\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                String secondKeyword \u003d words.get(1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                switch (secondKeyword) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                case \"module\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    return new AddModuleCommand(words.subList(2, words.size()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } catch (IndexOutOfBoundsException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                throw new DuchessException(\"Usage: add module \u003cmodule-code\u003e \u003cmodule-name\u003e\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new FindCommand(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                String secondKeyword \u003d words.get(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                switch (secondKeyword) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                case \"task\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    return new DeleteTaskCommand(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                case \"module\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    return new DeleteModuleCommand(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } catch (IndexOutOfBoundsException | IllegalArgumentException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                throw new DuchessException(\"Usage: delete (module|task) \u003cnumber\u003e\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                return new DoneCommand(Integer.parseInt(words.get(0)) - 1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                throw new DuchessException(\"Please supply a number. Eg: done 2\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            if (arguments.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                throw new DuchessException(\"Format for todo: todo \u003ctask\u003e\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            if (arguments.get(arguments.size() - 1).charAt(0) \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                String description \u003d String.join(\" \", arguments.subList(0, arguments.size() - 1));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                String moduleCode \u003d arguments.get(arguments.size() - 1).substring(1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                return new AddTodoCommand(description, moduleCode);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                String description \u003d String.join(\" \", arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                return new AddTodoCommand(description);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            int separatorIndex \u003d arguments.indexOf(\"/by\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            if (arguments.size() \u003d\u003d 0 || separatorIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                throw new DuchessException(\"Format for deadline: deadline \u003ctask\u003e /by \u003cdeadline\u003e\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            if (arguments.get(arguments.size() - 1).charAt(0) \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                String description \u003d String.join(\" \", arguments.subList(0, separatorIndex));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                LocalDateTime deadline \u003d Util"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        .parseDateTime(arguments.subList(0, arguments.size() - 1), separatorIndex + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                String moduleCode \u003d arguments.get(arguments.size() - 1).substring(1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                return new AddDeadlineCommand(description, deadline, moduleCode);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                String description \u003d String.join(\" \", arguments.subList(0, separatorIndex));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                LocalDateTime deadline \u003d Util"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        .parseDateTime(arguments, separatorIndex + 1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                return new AddDeadlineCommand(description, deadline);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            int atSeparatorIndex \u003d arguments.indexOf(\"/at\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            int toSeparatorIndex \u003d arguments.indexOf(\"/to\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            if (arguments.size() \u003d\u003d 0 || atSeparatorIndex \u003c\u003d 0 || toSeparatorIndex \u003c atSeparatorIndex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                throw new DuchessException(\"Format for event: event \u003cevent\u003e /at \u003cstart datetime\u003e /to \u003cend datetime\u003e\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            if (arguments.get(arguments.size() - 1).charAt(0) \u003d\u003d \u0027#\u0027) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                String description \u003d String.join(\" \", arguments.subList(0, atSeparatorIndex));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                LocalDateTime end \u003d Util"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        .parseDateTime(arguments.subList(0, arguments.size() - 1), toSeparatorIndex + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                LocalDateTime start \u003d Util"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        .parseDateTime(arguments.subList(0, arguments.size() - 1), atSeparatorIndex + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                String moduleCode \u003d arguments.get(arguments.size() - 1).substring(1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                return new AddEventCommand(description, end, start, moduleCode);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                String description \u003d String.join(\" \", arguments.subList(0, atSeparatorIndex));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                LocalDateTime end \u003d Util.parseDateTime(arguments, toSeparatorIndex + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                LocalDateTime start \u003d Util.parseDateTime(arguments, atSeparatorIndex + 1);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                return new AddEventCommand(description, end, start);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        case \"reminder\":"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new ReminderCommand();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        case \"snooze\":"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new SnoozeCommand(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        case \"schedule\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                String view \u003d words.get(2);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                boolean isInvalidView \u003d !view.equals(\"day\") \u0026\u0026 !view.equals(\"week\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                boolean isIllegalArgument \u003d isInvalidView \u0026\u0026 (words.size() \u003e 3);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                if (isIllegalArgument) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                    throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                String date \u003d words.get(1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                return new ViewScheduleCommand(date, view);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                throw new DuchessException(\"Usage: schedule \u003cdate\u003e (day | week)\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new ByeCommand();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        case \"log\":"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new LogCommand();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        case \"undo\":"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new UndoCommand(arguments);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        case \"redo\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return new RedoCommand(arguments);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            throw new DuchessException(\"Please enter a valid command.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 164
    }
  },
  {
    "path": "src/main/java/duchess/parser/states/ParserState.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public interface ParserState {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public abstract Command parse(String input) throws DuchessException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 8
    }
  },
  {
    "path": "src/main/java/duchess/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "muserr"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonInclude;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "muserr"
        },
        "content": "import com.fasterxml.jackson.core.JsonParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "muserr"
        },
        "content": "import com.fasterxml.jackson.databind.JsonMappingException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.databind.MapperFeature;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.Deque;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private String fileName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private Deque\u003cString\u003e undoStack;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "    private Deque\u003cString\u003e redoStack;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Constructs Storage object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param fileName filename for duchess.storage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Storage(String fileName) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.fileName \u003d fileName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "        undoStack \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "muserr"
        },
        "content": "        redoStack \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    // Unchecked type coercion is necessary here."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    // And possible cast exceptions are handled"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Returns the tasklist loaded from file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public Store load() throws DuchessException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            FileInputStream fileStream \u003d new FileInputStream(this.fileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            Store store \u003d getObjectMapper().readValue(fileStream, Store.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            fileStream.close();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return store;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (IOException | ClassCastException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"Unable to read file, continuing with empty list.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Saves the given tasklist to file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param store the store to save"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "     * @throws DuchessException an error if unable to write to file"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void save(Store store) throws DuchessException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            FileOutputStream fileStream \u003d new FileOutputStream(this.fileName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            getObjectMapper().writeValue(fileStream, store);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            fileStream.close();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            throw new DuchessException(\"An unexpected error occurred when writing to the file. \" + e);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private ObjectMapper getObjectMapper() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return new ObjectMapper()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .disable(MapperFeature.AUTO_DETECT_CREATORS,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        MapperFeature.AUTO_DETECT_FIELDS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        MapperFeature.AUTO_DETECT_GETTERS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                        MapperFeature.AUTO_DETECT_IS_GETTERS)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "muserr"
        },
        "content": "                .enable(SerializationFeature.INDENT_OUTPUT)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "muserr"
        },
        "content": "                .setSerializationInclusion(JsonInclude.Include.NON_NULL);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Obtains last Store object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @return last Store object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @throws DuchessException throws exception when unable to obtain Store object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public Store getLastSnapshot() throws DuchessException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (undoStack.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(\"There\u0027s nothing to undo.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "muserr"
        },
        "content": "        String jsonVal \u003d undoStack.pollLast();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "muserr"
        },
        "content": "        // Add this string to redoStack"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "muserr"
        },
        "content": "        redoStack.addFirst(jsonVal);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store store \u003d getObjectMapper().readValue(jsonVal, Store.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "muserr"
        },
        "content": "            return store;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (JsonParseException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "muserr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(\"JSON parse was unsuccessful.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (JsonMappingException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "muserr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(\"Mapping was unsuccessful.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "muserr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            throw new DuchessException(\"Check duchess.storage input.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Adds Store object to stack."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param store current store object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @throws DuchessException throws exception when unable to push object to stack"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void addToUndoStackPush(Store store) throws DuchessException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "muserr"
        },
        "content": "            String jsonVal \u003d getObjectMapper().writeValueAsString(store);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "muserr"
        },
        "content": "            String undoStackTop;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "muserr"
        },
        "content": "            if (undoStack.size() !\u003d 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "muserr"
        },
        "content": "                undoStackTop \u003d undoStack.peekLast();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "muserr"
        },
        "content": "                // Only push to undoStack if the topmost stack object is different."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "muserr"
        },
        "content": "                if (!undoStackTop.equals(jsonVal)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "muserr"
        },
        "content": "                    undoStack.addLast(jsonVal);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "muserr"
        },
        "content": "                    // Clears redo whenever there store is modified."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "muserr"
        },
        "content": "                    redoStack.clear();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "muserr"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "muserr"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "muserr"
        },
        "content": "                assert (undoStack.size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "muserr"
        },
        "content": "                undoStack.addLast(jsonVal);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "muserr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (JsonProcessingException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "muserr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(\"Undo stack push was unsuccessful.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Obtains first Store object."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @return first Store object"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @throws DuchessException throws exception when unable to obtain Store object"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public Store getFirstSnapshot() throws DuchessException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (redoStack.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(\"There\u0027s nothing to redo.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "muserr"
        },
        "content": "        String jsonVal \u003d redoStack.pollFirst();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "muserr"
        },
        "content": "        // Add this string to undoStack"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "muserr"
        },
        "content": "        undoStack.addLast(jsonVal);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "muserr"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "muserr"
        },
        "content": "            Store store \u003d getObjectMapper().readValue(jsonVal, Store.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "muserr"
        },
        "content": "            return store;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (JsonParseException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "muserr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(\"JSON parse was unsuccessful.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (JsonMappingException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "muserr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "muserr"
        },
        "content": "            throw new DuchessException(\"Mapping was unsuccessful.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "muserr"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            throw new DuchessException(\"Check duchess.storage input.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public Deque\u003cString\u003e getUndoStack() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "muserr"
        },
        "content": "        return this.undoStack;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public Deque\u003cString\u003e getRedoStack() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "muserr"
        },
        "content": "        return this.undoStack;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Returns the top object of UndoStack as a Store object."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @return top object as a store object"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public Store peekUndoStackAsStore() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (undoStack.size() !\u003d 0) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "muserr"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "muserr"
        },
        "content": "                String undoStackString \u003d undoStack.peekLast();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "muserr"
        },
        "content": "                Store store \u003d getObjectMapper().readValue(undoStackString, Store.class);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "muserr"
        },
        "content": "                return store;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "muserr"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "muserr"
        },
        "content": "                System.out.println(\"Unable to convert String to Store.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "muserr"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "muserr"
        },
        "content": "        return new Store();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 3,
      "mohideenik": 54,
      "nishanthelango": 6,
      "muserr": 135
    }
  },
  {
    "path": "src/main/java/duchess/storage/Store.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonGetter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonSetter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarEntry;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.calendar.CalendarManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class Store {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private List\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private List\u003cModule\u003e moduleList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private CalendarManager duchessCalendar;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * Initialises new taskList, moduleList and duchessCalendar."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Store() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.moduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        this.duchessCalendar \u003d new CalendarManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public boolean isClashing(Task newTask) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return this.taskList.stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                .anyMatch(task -\u003e task.clashesWith(newTask));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public Optional\u003cModule\u003e findModuleByCode(String code) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return moduleList.stream().filter(module -\u003e module.isOfCode(code)).findFirst();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"taskList\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public List\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonSetter(\"taskList\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void setTaskList(List\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonGetter(\"moduleList\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public List\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @JsonSetter(\"moduleList\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void setModuleList(List\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public Map\u003cLocalDate, CalendarEntry\u003e getDuchessCalendar() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        return CalendarManager.getDuchessCalendar();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 14,
      "mohideenik": 48
    }
  },
  {
    "path": "src/main/java/duchess/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * Reference to Scanner."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Scanner sc;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Instantiates Scanner class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints an indented line."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void beginBlock() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        printHR();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints an indented line."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void endBlock() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        printHR();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints welcome message."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showWelcome() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        beginBlock();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        printIndented(\"Hello! I\u0027m Duke\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        printIndented(\"What can I do for you?\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        endBlock();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints farewell message."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showBye() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        printIndented(\"Bye. Hope to see you again soon!\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints error to user."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message Error message to be displayed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showError(String message) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        printIndented(message);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Displays the newly added module as well as other modules."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param module  newly added module"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param modules existing modules"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void showModuleAdded(Module module, List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"I\u0027ve added this module:\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"  \" + module);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"Here are all your modules:\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        showModules(modules);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints the task that was added."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks List of all tasks"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task  Added task"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showTaskAdded(List\u003cTask\u003e tasks, Task task) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        printIndented(\"Got it . I\u0027ve added this task:\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        printIndented(\"  \" + task);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showNumTasks(tasks);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays Task objects in list given."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks List of Task objects"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showTaskList(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        printIndented(\"Here are the tasks in your list:\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        showTasks(tasks);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Displays the user\u0027s modules."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param modules list of modules"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void showModuleList(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        if (modules.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            printIndented(\"You\u0027ve no modules.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            printIndented(\"You can add modules using the `add module` command.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"Here are your modules:\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        showModules(modules);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays search results to user."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks List containing tasks from user"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showSearchResult(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        printIndented(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        showTasks(tasks);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays schedule of a single day to user."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Informs user if there are ongoing events."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param tasks List of tasks to show"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     * @param date  Date"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limsiying"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void showScheduleResult(List\u003cTask\u003e tasks, String date, String academicContext) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        printIndented(academicContext);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"Here is your schedule for \" + date + \":\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            printIndented(counter++ + \". \" + t.toString());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public void showFinishedExport(String filePath) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        printIndented(\"Your schedule has finished exporting to \" + filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the task that was just snoozed."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task The task that was just snoozed"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void showSnoozedTask(Task task) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        printIndented(\"Noted. I\u0027ve snoozed this task:\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        printIndented(\"  \" + task);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the task that was just deleted."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks List of all tasks"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task  The task that was just deleted"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showDeletedTask(List\u003cTask\u003e tasks, Task task) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        printIndented(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        printIndented(\"  \" + task);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        showNumTasks(tasks);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints message for task completion."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param task Completed task"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showDoneTask(Task task) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        printIndented(\"Nice! I\u0027ve marked this task as done:\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        printIndented(\"  \" + task);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets next line from user inputs."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return String containing user input"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        return sc.nextLine();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints a string accompanied with indentation."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param line String containing description to be indented"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private void printIndented(String line) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"    \" + line);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the tasks in a list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks List containing user tasks"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNumTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        printIndented(\"Now you have \""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                + tasks.size()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                + (tasks.size() \u003e 1 ? \" tasks\" : \" task\")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                + \" in the list.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays tasks in a list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks List containing user tasks"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    private void showTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            printIndented(counter++ + \". \" + task);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Displays modules in a list."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param modules list containing modules"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private void showModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        for (Module module : modules) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            printIndented(counter++ + \". \" + module);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows no deadlines present."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showNoDeadlines() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        printIndented(\"You have no pending deadlines.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays the list of deadlines present in user list."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tasks List of all tasks"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public void showDeadlines(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "muserr"
        },
        "content": "        printIndented(\"You currently have these deadlines:\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "muserr"
        },
        "content": "        showTasks(tasks);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays user history."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param log list of user log"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void showUserHistory(List\u003cString\u003e log) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "muserr"
        },
        "content": "        printIndented(\"These are the commands you entered:\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "muserr"
        },
        "content": "        int counter \u003d 1;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "muserr"
        },
        "content": "        for (String userInput : log) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "muserr"
        },
        "content": "            printIndented(counter++ + \". \" + userInput);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays number of undone actions to user."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param undoCounter number of undo operations"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void showUndo(int undoCounter) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (undoCounter \u003d\u003d 1) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "muserr"
        },
        "content": "            printIndented(\"The last command has been undone.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else if (undoCounter \u003d\u003d 0) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "muserr"
        },
        "content": "            printIndented(\"There\u0027s nothing to undo.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "muserr"
        },
        "content": "            printIndented(\"The last few commands have been undone.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "muserr"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * Displays number of undone actions to user."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "muserr"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "muserr"
        },
        "content": "     * @param redoCounter number of undo operations"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "muserr"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "muserr"
        },
        "content": "    public void showRedo(int redoCounter) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "muserr"
        },
        "content": "        if (redoCounter \u003d\u003d 1) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "muserr"
        },
        "content": "            printIndented(\"I redid the last command.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "muserr"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "muserr"
        },
        "content": "            printIndented(\"I redid the last few commands.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "muserr"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Displays an error message indicating why the module can\u0027t be deleted."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * \u003cp\u003eThe function also prints the tasks that are associated with the module"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * being deleted.\u003c/p\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param tasks list of tasks belonging to the module being deleted"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void showUnableToDeleteModuleMsg(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"You can\u0027t delete the module without deleting all of the associated tasks.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"The following tasks are associated with the module.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        showTasks(tasks);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Displays a confirmation message stating that the module has been deleted."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * @param module the module that was just deleted"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void showDeletedModule(Module module) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        printIndented(\"You\u0027ve deleted \" + module + \".\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints a straight line."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    private void printHR() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        printIndented(\"_______________________________________________________________\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 9,
      "mohideenik": 67,
      "muserr": 45,
      "-": 195
    }
  },
  {
    "path": "src/test/java/duchess/commands/ReminderCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.logic.commands.ReminderCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "muserr"
        },
        "content": "import duchess.model.task.DuchessLog;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.storage.Store;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "muserr"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "muserr"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "muserr"
        },
        "content": "public class ReminderCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void testExecuteWithoutDeadlines() throws DuchessException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "muserr"
        },
        "content": "        String filename \u003d \"text_file\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Store store \u003d new Store();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Storage storage \u003d new Storage(filename);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(store.getTaskList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "muserr"
        },
        "content": "        ReminderCommand reminderCommand \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        reminderCommand.execute(store, ui, storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(store.getTaskList().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "muserr"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    public void testExecuteWithDeadlines() throws DuchessException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "muserr"
        },
        "content": "        String firstDeadline \u003d \"deadline homework assignment /by 23/12/2019 1800\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "muserr"
        },
        "content": "        String secondDeadline \u003d \"deadline school project tasks /by 01/11/2020 0900\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "muserr"
        },
        "content": "        String filename \u003d \"text_file\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Store store \u003d new Store();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Ui ui \u003d new Ui();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "muserr"
        },
        "content": "        Storage storage \u003d new Storage(filename);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "muserr"
        },
        "content": "        DuchessLog duchessLog \u003d new DuchessLog();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "muserr"
        },
        "content": "        // Adding the firstDeadline"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.parse(firstDeadline).execute(store, ui, storage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        // Adding the secondDeadline"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.parse(secondDeadline).execute(store, ui, storage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "muserr"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(store.getTaskList().size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "muserr"
        },
        "content": "        ReminderCommand reminderCommand \u003d new ReminderCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "muserr"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "muserr"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 4,
      "mohideenik": 13,
      "nishanthelango": 3,
      "muserr": 31
    }
  },
  {
    "path": "src/test/java/duchess/commands/ViewScheduleCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import duchess.logic.commands.ViewScheduleCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class ViewScheduleCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    void viewScheduleCommand_inValidDate_duchessExceptionThrown() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        List.of("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                List.of(\"2/3/2019\", \"day\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                List.of(\"32/01/2019\", \"week\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                List.of(\"12/02\", \"week\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        ).forEach(str -\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            assertThrows(DuchessException.class, () -\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                new ViewScheduleCommand(str.get(0), str.get(1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            });"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        });"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 22,
      "mohideenik": 2,
      "nishanthelango": 1
    }
  },
  {
    "path": "src/test/java/duchess/model/ModuleTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Module module \u003d new Module("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \"CS1231\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \"Discrete Mathematics\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    );"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(module.toString(), \"CS1231 Discrete Mathematics\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void getName_getsName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(module.getName(), \"Discrete Mathematics\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void getCode_getsCode() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(module.getCode(), \"CS1231\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void isOfCode_sameCode_returnsTrue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(module.isOfCode(\"cs1231\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void isOfCode_differentCode_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertFalse(module.isOfCode(\"CS2040\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void equals_sameCode_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Module other \u003d new Module(\"CS1231\", \"Does not matter\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(module.equals(other));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void equals_differentCode_returnsFalse() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Module other \u003d new Module(\"CS1232\", \"Discrete Mathematics\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertFalse(module.equals(other));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 51
    }
  },
  {
    "path": "src/test/java/duchess/model/TimeFrameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class TimeFrameTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final LocalDateTime dateTime \u003d Util.parseDateTime(\"12/12/2019 1200\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final LocalDateTime dateTime2 \u003d Util.parseDateTime(\"12/12/2019 1400\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final TimeFrame instantFrame \u003d TimeFrame.ofInstantaneousTask(dateTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final TimeFrame indefiniteFrame \u003d TimeFrame.ofTimelessTask();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final TimeFrame normalFrame \u003d new TimeFrame(dateTime, dateTime2);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public TimeFrameTest() throws DuchessException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void compareTo() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(indefiniteFrame.compareTo(indefiniteFrame) \u003d\u003d 0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(indefiniteFrame.compareTo(instantFrame) \u003c 0);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(instantFrame.compareTo(indefiniteFrame) \u003e 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(normalFrame.compareTo(normalFrame) \u003d\u003d 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void fallsWithin_indefiniteTasks() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertFalse(normalFrame.fallsWithin(indefiniteFrame));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void clashesWith_instantaneousTask() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertFalse(normalFrame.clashesWith(instantFrame));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 40
    }
  },
  {
    "path": "src/test/java/duchess/model/calendar/AcademicContextTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limsiying"
        },
        "content": "package duchess.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.api.extension.ParameterContext;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.params.ParameterizedTest;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.params.converter.ArgumentConversionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.params.converter.ArgumentConverter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.params.converter.ConvertWith;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import org.junit.jupiter.params.provider.CsvSource;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limsiying"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limsiying"
        },
        "content": "public class AcademicContextTest implements ArgumentConverter {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    public Object convert(Object source, ParameterContext context) throws ArgumentConversionException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/uuuu HHmm\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                    .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            return LocalDateTime.parse((String) source, formatter);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            throw new IllegalArgumentException(\"Failed to convert\", e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limsiying"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @ParameterizedTest"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    @CsvSource(value \u003d {\"29/12/2018 0000:AY2018/2019, Winter Break, 3 weeks left to the next semester\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"10/12/2018 0000:AY2018/2019, Winter Break, 5 weeks left to the next semester\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"17/12/2018 0000:AY2018/2019, Winter Break, 4 weeks left to the next semester\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"24/12/2018 0000:AY2018/2019, Winter Break, 3 weeks left to the next semester\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"01/01/2019 0000:AY2018/2019, Winter Break, 2 weeks left to the next semester\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"07/01/2019 2359:AY2018/2019, Winter Break, last week of break before a new semester starts\", //"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"14/01/2019 2359:AY2018/2019, Semester 2, W1\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"05/08/2019 0000:AY2018/2019, Summer Break, last week of break before a new semester starts\", //"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"12/08/2019 2359:AY2019/2020, Semester 1, W1\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"18/08/2019 2359:AY2019/2020, Semester 1, W1\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"19/08/2019 2359:AY2019/2020, Semester 1, W2\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"25/08/2019 2359:AY2019/2020, Semester 1, W2\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"06/10/2019 2359:AY2019/2020, Semester 1, W7\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"07/10/2019 2359:AY2019/2020, Semester 1, W8\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"13/10/2019 2359:AY2019/2020, Semester 1, W8\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"29/09/2019 0000:AY2019/2020, Semester 1, Recess Week\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"20/11/2019 0000:AY2019/2020, Semester 1, Reading Week\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"05/12/2019 0000:AY2019/2020, Semester 1, Examinations\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"25/02/2020 0000:AY2019/2020, Semester 2, Recess Week\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"21/04/2020 0000:AY2019/2020, Semester 2, Reading Week\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"05/05/2020 2359:AY2019/2020, Semester 2, Examinations\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"21/09/2020 0000:AY2020/2021, Semester 1, Recess Week\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"19/11/2020 0000:AY2020/2021, Semester 1, Reading Week\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"03/12/2020 2359:AY2020/2021, Semester 1, Examinations\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"25/02/2021 0000:AY2020/2021, Semester 2, Recess Week\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"21/04/2021 0000:AY2020/2021, Semester 2, Reading Week\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            \"05/05/2021 2359:AY2020/2021, Semester 2, Examinations\"},"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limsiying"
        },
        "content": "            delimiter \u003d \u0027:\u0027)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    void academicContext_processedCorrectly(@ConvertWith(AcademicContextTest.class) LocalDateTime localDateTime,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limsiying"
        },
        "content": "                                            String expected) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        AcademicContext ac \u003d new AcademicContext(localDateTime);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        String academicContext \u003d ac.toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limsiying"
        },
        "content": "        assertEquals(expected, academicContext);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limsiying"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limsiying"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limsiying": 64,
      "mohideenik": 1
    }
  },
  {
    "path": "src/test/java/duchess/model/task/DeadlineTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    List\u003cString\u003e getList(String input) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        return List.of(input.split(\" \"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void toString_formatted_correctly() throws DuchessException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        List\u003cString\u003e list \u003d getList(\"do something /by 20/12/2019 1243\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        assertEquals(\"[D][✘] do something (by: 20/12/2019 1243)\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                new Deadline(\"do something\", LocalDateTime.parse(\"2019-12-20T12:43\")).toString());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void snooze_within_year_snoozes() throws DuchessException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Task task \u003d new Deadline(\"do something\", LocalDateTime.parse(\"2019-12-20T12:12\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        task.snooze();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(task.toString(), \"[D][✘] do something (by: 27/12/2019 1212)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void snooze_over_years_snoozes() throws DuchessException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Task task \u003d new Deadline(\"do something\", LocalDateTime.parse(\"2019-12-27T12:12\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        task.snooze();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(task.toString(), \"[D][✘] do something (by: 03/01/2020 1212)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void setDeadline_setsDeadline() throws DuchessException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Deadline deadline \u003d new Deadline(\"do something\", LocalDateTime.parse(\"2019-12-26T12:12\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(deadline.getDeadline(), \"2019-12-26T12:12\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setDeadline(\"2019-12-27T12:12\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(deadline.getDeadline(), \"2019-12-27T12:12\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 37,
      "nishanthelango": 7
    }
  },
  {
    "path": "src/test/java/duchess/model/task/EventTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class EventTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Event event \u003d new Event(\"2019-12-27T12:12\", \"2019-12-27T12:14\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(event.getStart(), \"2019-12-27T12:12\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(event.getEnd(), \"2019-12-27T12:14\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void toString_formatsCorrectly() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        event.setDescription(\"Test\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(event.toString(),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                \"[E][✘] Test (at: 27/12/2019 1212 to 27/12/2019 1214)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void snooze_snoozes() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        event.snooze();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(event.getStart(), \"2020-01-03T12:12\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 28
    }
  },
  {
    "path": "src/test/java/duchess/model/task/TaskTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Task deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Module module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     * Instantiate testing class with default deadline and module."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public TaskTest() throws DuchessException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        deadline \u003d new Deadline(\"return book\", LocalDateTime.parse(\"2020-12-12T12:00\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        module \u003d new Module(\"CS2113T\", \"Easy game\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void getModule_getsModule() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setModule(module);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                Optional.of(module),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                deadline.getModule()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setModule(null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                Optional.empty(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                deadline.getModule()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void compareTo_twoDeadlines_increasingOrder() throws DuchessException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Task other \u003d new Deadline(\"return book\", LocalDateTime.parse(\"2020-12-12T14:00\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                deadline.compareTo(other) \u003c 0"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void setDone_setsDone() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setDone(false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertFalse(deadline.isDone());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setDone(true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(deadline.isDone());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void setDescription_setsDescription() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setDescription(\"Test\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(deadline.getDescription(), \"Test\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void toString_includesModuleName() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setModule(module);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                deadline.toString().contains(\"CS2113T\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setModule(null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                deadline.toString().contains(\"CS2113T\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void toString_includesTick() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setDone(true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                deadline.toString(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                \"[D][✓] return book (by: 12/12/2020 1200)\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        deadline.setDone(false);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                deadline.toString(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                \"[D][✘] return book (by: 12/12/2020 1200)\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 84,
      "nishanthelango": 3
    }
  },
  {
    "path": "src/test/java/duchess/parser/ParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.states.ParserState;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    void parse() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        parser.setParserState(new ParserStateStub());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            DuchessException.class,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            () -\u003e parser.parse(\"will throw exception\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            \"Stub test\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private class ParserStateStub implements ParserState {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        public Command parse(String input) throws DuchessException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            throw new DuchessException(\"Stub test\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 28
    }
  },
  {
    "path": "src/test/java/duchess/parser/UtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "public class UtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void parseDateTime_outOfBounds_exceptionThrown() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            DuchessException.class,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            () -\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                Util.parseDateTime(List.of(\"12/12/2019\"), 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void parameterize() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        String input \u003d \"event something happening /at a b /to c d /hi\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Map\u003cString, String\u003e parameters \u003d Util.parameterize(input);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(\"event\", parameters.get(\"command\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(\"something happening\", parameters.get(\"general\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(\"a b\", parameters.get(\"at\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(\"c d\", parameters.get(\"to\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertEquals(\"\", parameters.get(\"hi\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 34
    }
  },
  {
    "path": "src/test/java/duchess/parser/commands/ListCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.ListModulesCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.ListTasksCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "class ListCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    void parse() throws DuchessException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Map\u003cString, String\u003e parameters1 \u003d Util.parameterize(\"list modules\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                ListCommandParser.parse(parameters1) instanceof ListModulesCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Map\u003cString, String\u003e parameters2 \u003d Util.parameterize(\"list tasks\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "                ListCommandParser.parse(parameters2) instanceof ListTasksCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        );"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Map\u003cString, String\u003e parameters3 \u003d Util.parameterize(\"list something\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertThrows(DuchessException.class, () -\u003e ListCommandParser.parse(parameters3));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 30
    }
  },
  {
    "path": "src/test/java/duchess/parser/states/DefaultStateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.parser.states;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.ListModulesCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.logic.commands.ListTasksCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "class DefaultStateTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final Parser parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    private final DefaultState defaultState;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public DefaultStateTest() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.parser \u003d new Parser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        this.defaultState \u003d new DefaultState(this.parser);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    public void list_command() throws DuchessException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(defaultState.parse(\"list modules\") instanceof ListModulesCommand);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        assertTrue(defaultState.parse(\"list tasks\") instanceof ListTasksCommand);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 25
    }
  },
  {
    "path": "src/test/java/duchess/storage/DetectAnomaliesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "package duchess.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mohideenik"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.exceptions.DuchessException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "import duchess.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import duchess.parser.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "public class DetectAnomaliesTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    List\u003cString\u003e getList(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        return List.of(input.split(\" \"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    void clash_returnsTrue() throws DuchessException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        String taskInput \u003d \"meeting /at 12/12/2020 1800 /to 12/12/2020 1900\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Store store \u003d new Store();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Task task \u003d new Event(\"meeting\", Util.parseDateTime(\"12/12/2020 1900\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                Util.parseDateTime(\"12/12/2020 1800\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        store.getTaskList().add(task);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        for (String str : List.of("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                \"12/12/2020 1830 /to 12/12/2020 1930\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                \"12/12/2020 1730 /to 12/12/2020 1830\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                \"12/12/2020 1730 /to 12/12/2020 1930\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                \"12/12/2020 1800 /to 12/12/2020 1830\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                \"12/12/2020 1900 /to 12/12/2020 1930\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        )) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            assertTrue(store.isClashing(new Event(\"party\", Util.parseDateTime(str.substring(20)),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    Util.parseDateTime(str.substring(0, 15)))));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    void no_clash_returnsFalse() throws DuchessException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        Store store \u003d new Store();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        Task task \u003d new Event(\"meeting\", Util.parseDateTime(\"12/12/2020 1900\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                Util.parseDateTime(\"12/12/2020 1800\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mohideenik"
        },
        "content": "        store.getTaskList().add(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        for (String str : List.of("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                \"12/12/2020 1930 /to 12/12/2020 2000\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                \"12/12/2020 1630 /to 12/12/2020 1730\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        )) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "            assertFalse(store.isClashing(new Event(\"party\", Util.parseDateTime(str.substring(20)),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "                    Util.parseDateTime(str.substring(0, 15)))));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nishanthelango"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mohideenik": 8,
      "nishanthelango": 47
    }
  }
]
